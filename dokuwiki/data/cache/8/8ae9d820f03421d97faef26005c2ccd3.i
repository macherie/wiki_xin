a:157:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:21:"Wpa_supplicant 分析";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1;}i:4;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:63:"依然是带着问题去看吧，否则20w行代码要看死的";}i:2;i:38;}i:5;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:101;}i:6;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:161:"，不可能也没必要去详细的分析代码，我们只要知道它的功能框架，会去debug，会去用就看了，下面是我想到的几个问题：";}i:2;i:104;}i:7;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:265;}i:8;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:267;}i:9;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:79:"1.什么是wpa_supplicant，它主要的功能是什么，它有什么特点...";i:1;i:2;i:2;i:267;}i:2;i:267;}i:10;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:267;}i:11;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:267;}i:12;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:583:"Wpa_supplicnt是一个开源项目，支持多平台多系统，它实现了对无线网络进行管理和控制的功能.
Wpa_supplicant主要是用来支持WEP，WPA/WPA2和WAPI无线协议和加密认证的，而实际上的工作内容是通过socket（不管是wpa_supplicant与上层还是wpa_supplicant与驱动都采用socket通讯）与驱动交互上报数据给用户，而用户可以通过socket发送命令给wpa_supplicant调动驱动来对WiFi芯片操作。 简单的说，wpa_supplicant就是WiFi驱动和用户的中转站外加对协议和加密认证的支持。";}i:2;i:360;}i:13;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:943;}i:14;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:943;}i:15;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:110:"根据官网描述，wpa_supplicant所支持的功能非常多，此处列举其中几个重要的功能点：";}i:2;i:945;}i:16;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1055;}i:17;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1057;}i:18;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:104:"1>支持WPA和IEEE 802.11i所定义的大部分功能，这部分功能集中在安全方面，包括：";i:1;i:3;i:2;i:1057;}i:2;i:1057;}i:19;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:1057;}i:20;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1057;}i:21;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:123:"●支持WPA-PSK（即WPA-Personal）和WPA-Enterprise（即利用RAIDUS认证服务器来完成身份认证的情况）。";}i:2;i:1173;}i:22;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1296;}i:23;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1296;}i:24;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:255:"●数据加密方面支持CCMP、TKIP、WEP104和WEP40。注意，WEP104和WEP40中的数字代表密钥的长度。104表示密钥长度为104个二进制位（如以ASCII字符个数来计算的话，WEP104支持的密钥长度为13个ASCII字符）。";}i:2;i:1298;}i:25;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1553;}i:26;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1553;}i:27;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:93:"●完全支持WPA和WPA2，包括PMKSA缓存，预认证（pre-authentication）等功能。";}i:2;i:1555;}i:28;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1648;}i:29;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1648;}i:30;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:239:"●支持IEEE 802.11r和802.11w，其中802.11r规范定义了快速基础服务转移（Fast Transition）功能，而802.11w则新增了对管理帧的安全保护机制。支持WFA制定的Wi-Fi Proctected Setup功能、P2P、TDLS等。";}i:2;i:1650;}i:31;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1889;}i:32;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1891;}i:33;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:126:"2>支持多种EAP Method：主要和802.1X中Supplicant的功能有关，wpa_supplicant支持多达25种EAP Method，包括：";i:1;i:3;i:2;i:1891;}i:2;i:1891;}i:34;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:1891;}i:35;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1891;}i:36;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:251:"●EAP-TLS：TLS（Transport Layer Security）本身是一种传输层安全协议，它利用密钥算法提供端点身份认证与通讯保密，其基础是公钥基础设施（public key infrastructure，简称PKI）。EAP-TLS定义于RFC 5216。";}i:2;i:2029;}i:37;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2280;}i:38;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2280;}i:39;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:221:"●EAP-PEAP：PEAP（Protected Extensible Authentication Protocol，可扩展EAP）由微软、思科以及RSA Security三个公司共同开发，是一种利用证书加用户名和密码来进行身份验证的方法。";}i:2;i:2282;}i:40;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2503;}i:41;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2503;}i:42;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:173:"●EAP-TTLS：它是TLS的拓展，全名为Tunneled Transport Layer Security（隧道传输层安全协议），相比TLS，它简化了认证过程中客户端的工作。";}i:2;i:2505;}i:43;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2678;}i:44;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2678;}i:45;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:55:"●EAP-SIM、EAP-PSK、EAP-GPSK等其他认证方法。";}i:2;i:2680;}i:46;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2735;}i:47;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2735;}i:48;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"☆";}i:2;i:2737;}i:49;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:63:"http://en.wikipedia.org/wiki/Extensible_Authentication_Protocol";i:1;N;}i:2;i:2740;}i:50;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:"以了解更多EAP方法的知识";}i:2;i:2803;}i:51;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2836;}i:52;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2838;}i:53;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:32:"3>支持的无线网卡驱动：";i:1;i:3;i:2;i:2838;}i:2;i:2838;}i:54;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:2838;}i:55;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2838;}i:56;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:"●支持nl80211/cfg80211驱动";}i:2;i:2882;}i:57;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2913;}i:58;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2913;}i:59;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"●支持wext驱动";}i:2;i:2915;}i:60;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2934;}i:61;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2934;}i:62;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:"●Wired Ethernet drivers";}i:2;i:2936;}i:63;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2961;}i:64;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2961;}i:65;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:83:"●BSD net80211 layer (e.g., Atheros driver) (FreeBSD 6-CURRENT and NetBSD current)";}i:2;i:2963;}i:66;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3046;}i:67;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3046;}i:68;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:74:"●Windows NDIS drivers (Windows; at least XP and 2000, others not tested)";}i:2;i:3048;}i:69;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3122;}i:70;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3122;}i:71;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:198:"wpa_supplicant经过谷歌修改移植到android平台上，它是用户空间中无线网络部分的核心模块，所有Framework中wifi相关的操作最终都是借由wpa_supplicant来完成。";}i:2;i:3124;}i:72;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3322;}i:73;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3324;}i:74;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:59:"2.Wpa_supplicant都有哪些部分组成，框架是什么?";i:1;i:2;i:2;i:3324;}i:2;i:3324;}i:75;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:3324;}i:76;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3324;}i:77;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:47:":android:wifi:wpa_supplicant:wpa_supplicant.png";i:1;s:0:"";i:2;N;i:3;N;i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:3396;}i:78;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3448;}i:79;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3448;}i:80;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:47:"从上图看wpa_supplicant主要组成部分：";}i:2;i:3450;}i:81;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3497;}i:82;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3497;}i:83;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:179:"●wpa_supplicant所有工作都围绕事件（对应图中的event loop模块）展开。wpa_supplicant没有使用多线程编程，所有事件处理都在主线程中完成。";}i:2;i:3499;}i:84;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3678;}i:85;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3678;}i:86;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:426:"●位于event loop模块下方的driver i/f（i/f代表interface）接口模块用于隔离和底层驱动直接交互的那些driver控制模块（如wext、ndiswrapper、nl80211等，wpa_supplicant中称之为driver wrapper）。这些driver wrapper和平台以及芯片所使用的驱动相关。不过，由于driver i/f的隔离作用，wpa_supplicant中其他模块将能最大程度保持平台以及驱动无关性。";}i:2;i:3680;}i:87;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4106;}i:88;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4106;}i:89;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:172:"●driver wrapper经常要返回一些信息给上层。wpa_supplicant中，这些信息将通过driver events的方式反馈给wpa_supplicant供其他模块进行处理。";}i:2;i:4108;}i:90;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4280;}i:91;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4280;}i:92;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:306:"●EAP以及EAPOL协议，除了定义消息格式外，RFC4137文档定义了EAP状态机，而802.1X文档中还定义了EAPOL状态机。wpa_supplicant根据这两个协议分别实现了EAP和EAPOL状态机。除此之外，wpa_supplicant还定义了自己的状态机（即WPA/WPA2 State Machine）。";}i:2;i:4282;}i:93;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4588;}i:94;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4588;}i:95;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:156:"●wpa_supplicant实现了多种EAP方法，如图中EAP method模块所示。另外它还包含了TLS模块和crypto模块用于支持对应的EAP方法。";}i:2;i:4590;}i:96;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4746;}i:97;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4746;}i:98;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:117:"●EAPOL以及EAP消息都属于LLC层数据，所以wpa_supplicant的l2_packet模块用于收发EAPOL和EAP消息。";}i:2;i:4748;}i:99;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4865;}i:100;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4865;}i:101;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:99:"●wpa_supplicant支持较多的配置参数，这些参数的处理由configuration模块完成。";}i:2;i:4867;}i:102;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4966;}i:103;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4966;}i:104;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:264:"●wpa_supplicant是C/S结构中的Server端，它通过ctrl i/f模块向客户端提供通信接口。Linux/Unix平台中，Client端利用Unix域socket与其通信。目前常用的Client端wpa_cli（无界面的命令行程序）和wpa_gui（UI用Qt实现）。";}i:2;i:4968;}i:105;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5232;}i:106;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5232;}i:107;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:62:"关于WPA/WPA2 80211i 80211x EAP EAPOL见另一文档介绍。";}i:2;i:5234;}i:108;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5296;}i:109;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5298;}i:110;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:38:"3.Wpa_supplicant是如何初始化的?";i:1;i:2;i:2;i:5298;}i:2;i:5298;}i:111;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:5298;}i:112;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5298;}i:113;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:47:":android:wifi:wpa_supplicant:wpa_supplicnat.jpg";i:1;s:0:"";i:2;N;i:3;N;i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:5349;}i:114;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5401;}i:115;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5401;}i:116;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:42:"看不清楚？好吧，见附件下载。";}i:2;i:5403;}i:117;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5445;}i:118;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5448;}i:119;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:70:"4.Wpa_supplicant是如何完成“承上启下”的桥梁功能的？";i:1;i:2;i:2;i:5448;}i:2;i:5448;}i:120;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:5448;}i:121;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5532;}i:122;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:143:"1>上行接口，即与framework层通信接口，是通过socket通信，上面流程图中已经分析了两种接口的初始化与建立：";i:1;i:3;i:2;i:5532;}i:2;i:5532;}i:123;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:5532;}i:124;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5532;}i:125;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:78:"● global control interface: 用于配置（增加或删除）网络接口。";}i:2;i:5688;}i:126;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5766;}i:127;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5766;}i:128;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:65:"● ctrl interface: 与其他外部模块交互的控制接口。";}i:2;i:5768;}i:129;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5833;}i:130;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5833;}i:131;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:516:"例如，在初始化时，android 平台的wifi.c中的 wifi_connect_to_supplicant函数调用wpa_ctrl_open函数创建两个socket，一个是ctrl interface，另一个就是monitor interface,monitor interface这个接口用于监测从wpa_supplicant发出的event事件。
这两个socket创建成功后，monitor interface 会发送ATTACH到wpa_supplicant模块，wpa_supplicant模块收到后，会将该客户端的socket信息记录下来，用于以后发送事件时用（由于用的是DGRAM的方式）。";}i:2;i:5835;}i:132;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6351;}i:133;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6351;}i:134;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:"关于控制接口命令：";}i:2;i:6353;}i:135;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6380;}i:136;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:607:"     PING
     MIB
     STATUS
     STATUS-VERBOSE
     PMKSA
     SET <variable> <valus>
     LOGON
     LOGOFF
     REASSOCIATE
     RECONNECT
     PREAUTH <BSSID>
     ATTACH
     DETACH
     LEVEL <debug level>
     RECONFIGURE
     TERMINATE
     BSSID <network id> <BSSID>
     LIST_NETWORKS
     DISCONNECT
     SCAN
     SCAN_RESULTS
     BSS
     SELECT_NETWORK <network id>
     ENABLE_NETWORK <network id>
     DISABLE_NETWORK <network id>
     ADD_NETWORK
     REMOVE_NETWORK <network id>
     SET_NETWORK <network id> <variable> <value>
     GET_NETWORK <network id> <variable>
     SAVE_CONFIG";}i:2;i:6380;}i:137;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:7049;}i:138;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:81:"2>下行接口，即最终实现与kernel driver层通信（待具体分析）：";i:1;i:3;i:2;i:7049;}i:2;i:7049;}i:139;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:7049;}i:140;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7049;}i:141;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:52:"● socket for ioctl: 发送命令到kernel space。";}i:2;i:7142;}i:142;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7194;}i:143;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7194;}i:144;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:126:"● socket (netlink) for interact between kernel and userspace(AF_NETLINK, NETLINK_ROUTE): 接受kernel发送上来的event。";}i:2;i:7196;}i:145;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7322;}i:146;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7322;}i:147;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:58:"● socket for l2 packet(PF_PACKET): 处理802.1x报文。";}i:2;i:7324;}i:148;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7382;}i:149;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:7385;}i:150;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:62:"5.wpa_supplicant工具使用，Wpa_supplicant.conf的格式？";i:1;i:2;i:2;i:7385;}i:2;i:7385;}i:151;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:7385;}i:152;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:7460;}i:153;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:15:"6.资源列表.";i:1;i:2;i:2;i:7460;}i:2;i:7460;}i:154;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:7460;}i:155;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:7489;}i:156;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:7489;}}