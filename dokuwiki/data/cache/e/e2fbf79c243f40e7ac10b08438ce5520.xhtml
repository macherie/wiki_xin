
<h1 class="sectionedit1" id="使用_git_repo_下载代码">使用 Git &amp; Repo 下载代码</h1>
<div class="level1">

</div>
<!-- EDIT1 SECTION "使用 Git & Repo 下载代码" [1-45] -->
<h2 class="sectionedit2" id="客户端安装_git">客户端安装 Git</h2>
<div class="level2">

</div>
<!-- EDIT2 SECTION "客户端安装 Git" [46-77] -->
<h3 class="sectionedit3" id="安装_git_gitk">安装 git，gitk</h3>
<div class="level3">

<p>
网络连接正常的情况下：
</p>
<pre class="code bash"><span class="co4">$ </span><span class="kw2">sudo</span> <span class="kw2">apt-get install</span> git-core gitk git-gui</pre>

<p>
不能上网，有.deb安装包的，请执行：
</p>
<pre class="code bash"><span class="co4">$ </span><span class="kw2">sudo</span> <span class="kw2">dpkg</span> <span class="re5">-i</span> XXXX.deb</pre>

</div>
<!-- EDIT3 SECTION "安装 git，gitk" [78-301] -->
<h3 class="sectionedit4" id="初次运行_git_前的配置">初次运行 Git 前的配置</h3>
<div class="level3">

<p>
<strong> 配置用户信息 </strong>
</p>
<pre class="code bash">$ <span class="kw2">git config</span> <span class="re5">--global</span> user.name yourname
$ <span class="kw2">git config</span> <span class="re5">--global</span> user.email <span class="st0">&quot;youremail&quot;</span></pre>

<p>
<strong> 配置文本编辑器 </strong>
</p>
<pre class="code bash"><span class="co4">$ </span><span class="kw2">git config</span> <span class="re5">--global</span> core.editor <span class="kw2">vim</span></pre>

<p>
详细内容请看<a href="/dokuwiki/doku.php?id=git:git%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE" class="wikilink1" title="git:git安装配置">Git 安装配置</a>
</p>

</div>
<!-- EDIT4 SECTION "初次运行 Git 前的配置" [302-619] -->
<h2 class="sectionedit5" id="安装_openssh">安装 openssh</h2>
<div class="level2">

<p>
上传代码到 gerrit 上，需要安装openssh client，并将本地的 SSH Public Keys 添加到 gerrit 上，gerrit 通过 SSH Public Keys 验证上传权限
</p>

</div>
<!-- EDIT5 SECTION "安装 openssh" [620-808] -->
<h3 class="sectionedit6" id="安装_openssh_client">安装 openssh client</h3>
<div class="level3">
<pre class="code bash"><span class="co4">$ </span><span class="kw2">sudo</span> <span class="kw2">apt-get install</span> openssh-client</pre>

<p>
检查 ~/.ssh 目录有没有，没有的话用 <strong>ssh-keygen</strong> 生成。ssh是管理和转换认证的密钥，包括 RSA 和 DSA 两种密钥
</p>

</div>
<!-- EDIT6 SECTION "安装 openssh client" [809-1043] -->
<h3 class="sectionedit7" id="生成_rsa_密钥">生成 rsa 密钥</h3>
<div class="level3">

<p>
<strong> 用下面的命令生成ssh私公钥：</strong>
</p>
<pre class="code bash"><span class="co4">$ </span><span class="kw2">ssh-keygen</span> <span class="re5">-t</span> rsa <span class="re5">-C</span> <span class="st0">&quot;youremail&quot;</span></pre>

<p>
（最好加上youremail）一路回车，不用输密码，在 ~/.ssh 目录会生成 id_rsa, id_rsa.pub 两个文件
</p>

<p>
<strong> 请将 ~/.ssh/id_rsa.pub 文件以邮件附件的形式发给 kun.mao@sim.com和y.liu@sim.com </strong>
</p>

<p>
<strong> 拷贝 ~/.ssh/id_rsa.pub 的内容，在 Gerrit 中添加公钥：</strong>
</p>

<p>
首先登入到 <a href="http://192.167.100.232:8080" class="urlextern" title="http://192.167.100.232:8080"  rel="nofollow">http://192.167.100.232:8080</a>，点击右上角的 sign in，输入用户名，密码<span style='color:red; '>（Windows登陆账号和密码）</span>。
</p>

<p>
进入 gerrit 界面之后，点击 admin –》settings（在右上角），选择左侧 SSH Public Keys 选项，添加公钥 
</p>

<p>
<strong> 公钥添加完成后，测试能否连接到 gerrit 服务器：</strong>
</p>
<pre class="code bash"><span class="co4">$ </span><span class="kw2">ssh</span> <span class="re5">-p</span> <span class="nu0">29418</span> yourname<span class="sy0">@</span>192.167.100.232</pre>

<p>
如果提示 publickey denied，说明生成的 key 有问题，请重新生成，然后重启 ubuntu 机器。
</p>

</div>
<!-- EDIT7 SECTION "生成 rsa 密钥" [1044-1996] -->
<h2 class="sectionedit8" id="安装_repo">安装 Repo</h2>
<div class="level2">

<p>
<a href="/dokuwiki/doku.php?id=linux:%E6%90%AD%E5%BB%BA%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83:%E5%AE%89%E8%A3%85repo" class="wikilink1" title="linux:搭建工作环境:安装repo">安装 Repo</a>
</p>

</div>
<!-- EDIT8 SECTION "安装 Repo" [1997-2073] -->
<h2 class="sectionedit9" id="下载代码">下载代码</h2>
<div class="level2">

</div>
<!-- EDIT9 SECTION "下载代码" [2074-2098] -->
<h3 class="sectionedit10" id="初始化版本库">初始化版本库</h3>
<div class="level3">

<p>
<strong> 先在本地建立一个空的工程目录 </strong>
</p>

<p>
例：myandroid
</p>
<pre class="code bash">$ <span class="kw2">mkdir</span> myandroid	
$ <span class="kw3">cd</span> myandroid</pre>

<p>
<strong> 用 repo init 命令初始化：</strong>
</p>

<p>
用 repo init 来下载 manifest Git 库，具体命令如下：
</p>

<p>
下载 S55 通用项目请用下面的分支：
</p>
<pre class="code bash"><span class="co4">$ </span>repo init <span class="re5">-u</span> <span class="kw2">git</span><span class="sy0">@</span>192.167.100.232:platform<span class="sy0">/</span>manifest.git <span class="re5">-b</span> QRD8926_KK <span class="re5">--repo-url</span>=<span class="kw2">git</span><span class="sy0">@</span>192.167.100.232:repo.git</pre>

<p>
下载过程中会出现让你输入姓名和 email，请一定要输入正确的用户名和 email (执行了git config 的话，这个地方会自动出现你的名字和mail)
</p>

<p>
最后会看到 repo initialized in android 这样的提示，说明本地的版本库已经初始化完毕
</p>

</div>
<!-- EDIT10 SECTION "初始化版本库" [2099-2825] -->
<h3 class="sectionedit11" id="同步版本库">同步版本库</h3>
<div class="level3">

<p>
<strong> 使用命令：</strong>
</p>
<pre class="code bash"><span class="co4">$ </span>repo <span class="kw2">sync</span></pre>

<p>
将整个 android 代码同步到本地
</p>

<p>
<strong> 同步单个或选定的projects: </strong>
</p>
<pre class="code bash"><span class="co4">$ </span>repo <span class="kw2">sync</span> project1 project2…</pre>

</div>
<!-- EDIT11 SECTION "同步版本库" [2826-3040] -->
<h2 class="sectionedit12" id="开发步骤">开发步骤</h2>
<div class="level2">

<p>
建立个人feature分支，修改代码，解决冲突, 上传分支到 gerrit
</p>

</div>
<!-- EDIT12 SECTION "开发步骤" [3041-3146] -->
<h3 class="sectionedit13" id="基本流程">基本流程</h3>
<div class="level3">
<ol>
<li class="level1"><div class="li"> 用 repo start branch –all 创建个人分支</div>
</li>
<li class="level1"><div class="li"> 修改文件</div>
</li>
<li class="level1"><div class="li"> git add file</div>
</li>
<li class="level1"><div class="li"> 用 git commit 提交更改</div>
</li>
<li class="level1"><div class="li"> 用 repo upload 把本地修改的分支上传到 gerrit server</div>
</li>
</ol>

</div>
<!-- EDIT13 SECTION "基本流程" [3147-3356] -->
<h3 class="sectionedit14" id="创建个人分支">创建个人分支</h3>
<div class="level3">

<p>
<strong> 创建个人分支方法一：（应用所有仓库） </strong>
</p>
<pre class="code bash"><span class="co4">$ </span>repo start yourbranch <span class="re5">--all</span></pre>

<p>
–all 参数表示应用于所有project, 可以创建出此分支
</p>

<p>
创建单个project分支
</p>
<pre class="code bash"><span class="co4">$ </span>repo start yourbranch project1ist1</pre>

<p>
project1ist1  表示你创建的分支只应用projectlist1项目
</p>

<p>
<strong> 创建个人分支方法二：
<span style='color:red; '>（只适用于当前仓库，不能用 repo upload 上传 git branch 创建的分支名，所以建议大家不要使用这个命令创建分支）</span> </strong>
</p>
<pre class="code bash"><span class="co4">$ </span><span class="kw2">git branch</span> yourbranch</pre>

<p>
<strong> 分支应用技巧: </strong>
</p>

<p>
查看分支：
</p>
<pre class="code bash"><span class="co4">$ </span><span class="kw2">git branch</span></pre>

<p>
可显示当前版本库所有存在的分支，带*号的分支表示当前定位在哪个分支上
</p>

<p>
切换分支：
</p>
<pre class="code bash"><span class="co4">$ </span><span class="kw2">git checkout</span> yourbranch</pre>

<p>
提示：swiched to branch &#039;yourbranch&#039;，HEAD已经指向 yourbranch
</p>

</div>
<!-- EDIT14 SECTION "创建个人分支" [3357-4276] -->
<h3 class="sectionedit15" id="修改代码">修改代码</h3>
<div class="level3">

<p>
开发人员可以开始修改代码
</p>

<p>
修改好之后，可以用下面两个命令来查看你修改文件内容的差异：
</p>
<pre class="code bash">$ repo status
$ <span class="kw2">git diff</span></pre>

</div>
<!-- EDIT15 SECTION "修改代码" [4277-4472] -->
<h3 class="sectionedit16" id="提交到本地_git_仓库">提交到本地 git 仓库</h3>
<div class="level3">

<p>
<strong> 代码确认修改没问题，可以提交到本地 git 仓库: </strong>
</p>
<pre class="code bash"><span class="co4">$ </span><span class="kw2">git add</span> <span class="kw2">file</span></pre>

<p>
file: 需要上传到服务器的文件名，此处也可使用 git-gui 工具来操作
</p>
<pre class="code bash"><span class="co4">$ </span><span class="kw2">git commit</span> <span class="re5">-m</span> <span class="st0">&quot;注释&quot;</span></pre>

<p>
此处的注释一定要添加,撤销修改使用 git reset 
</p>

<p>
<span style='color:red; '><strong> 上传代码前同步版本库 </strong></span>
</p>

<p>
同步版本库: 
</p>
<pre class="code bash"><span class="co4">$ </span>repo <span class="kw2">sync</span></pre>

<p>
同步版本库中的改动到本地仓库, 如遇到冲突，代码更新失败，到失败的库中做如下操作:
</p>
<pre class="code bash"><span class="co4">$ </span><span class="kw2">git pull</span> <span class="re5">--rebase</span></pre>

<p>
如有冲突，修改冲突后：
</p>
<pre class="code bash">$ <span class="kw2">git add</span> 冲突文件
$ <span class="kw2">git commit</span>
$ <span class="kw2">git rebase</span> <span class="re5">--continue</span></pre>

</div>
<!-- EDIT16 SECTION "提交到本地 git 仓库" [4473-5191] -->
<h3 class="sectionedit17" id="上传代码">上传代码</h3>
<div class="level3">

<p>
<strong> 使用命令：</strong>
</p>
<pre class="code bash"><span class="co4">$ </span>repo upload</pre>

<p>
使用命令 repo upload 把本地的分支上传 gerrit 进行 code review, gerrit 系统会自动创建一个 chang-id
</p>

<p>
<strong> 如果只修改了某个projectlist下的几个文件，就可以直接对这个project提交：</strong>
</p>
<pre class="code bash"><span class="co4">$ </span>repo upload projectlist</pre>

<p>
上传成功提示:
</p>

<p>
 *[new branch] yourbranch→refs/for/psh100_414007/yourbranch
</p>

<p>
说明已经上传到 gerrit 中，等待 code review
</p>

<p>
<strong> 如果修改了好几个projectlist，请用下面的命令提交：</strong>
</p>
<pre class="code bash"><span class="co4">$</span>repo upload</pre>

<p>
弹出 vim 编辑窗口界面，找到要上传仓库的分支名，将前面的 # 删除，按esc键, 输入:wq保存退出，即可提交所有项目
</p>

<p>
<strong> 如果上传到gerrit，发现修改的有问题，但又不想创建新的 change-id，可以用如下方式：</strong>
</p>

<p>
保证你本地的分支还是之前checkout的那个分支，修改完成之后用：
</p>
<pre class="code bash">$ <span class="kw2">git commit</span> <span class="re5">--amend</span> <span class="re5">-m</span> <span class="st0">&quot;注释&quot;</span>
$ repo upload</pre>

<p>
上传成功，该 change-id 会多了一个 patch set
</p>

<p>
关于repo的补充：
</p>

<p>
sudo apt-get install phablet-tools
</p>

</div>
<!-- EDIT17 SECTION "上传代码" [5192-] -->