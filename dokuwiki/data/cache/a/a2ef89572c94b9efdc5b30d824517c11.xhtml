
<p>
import time
import datetime
import sys
import getopt
import os
</p>

<p>
a_time = None
s_second = None
s_microsecone = None
abs_time = 0.0
inputfile = None
outputfile = None
</p>

<p>
def usage():
</p>
<pre class="code">  print(&#039;&#039;&#039;Help Information:
           -h, --help:        Show help information
           -i, --inputfile:   input file  to parse
           -o, --outputfile:  output fiel parsed
                      &#039;&#039;&#039;)</pre>

<p>
def calc_delta(stream):
</p>
<pre class="code">  global s_second
  global s_microsecond
  global a_time
  global outfile
  begin_index = None
  end_index = None
  delta_second = 0
  delta_mircosecond = 0
  delta_time = 0
  d_time = None
  new_line = None
  if a_time ==None:
      print(&quot;Can&#039;t convert to android time&quot;)
      exit(-1)
  for line in stream:
      if line:
          try:
              begin_index =  line.index(&#039;[&#039;)
              end_index = line[begin_index+1:].index(&#039;]&#039;)+begin_index+1
              time_string = line[begin_index + 1 :end_index]
              [d_second,d_microsecond] = time_string.split(&#039;.&#039;)
              delta_second = int(int(d_second) - int(s_second))
              delta_microsecond = int(int(d_microsecond)-int(s_microsecond))
              delta_time = datetime.timedelta(seconds=delta_second,microseconds=delta_microsecond)
              d_time = a_time + delta_time
              new_line = d_time.strftime(&quot;%m-%d %H:%M:%S.%f&quot;)+&#039; &#039; + line
              outputfile.write(new_line)
          except:
              outputfile.write(line)</pre>

<p>
def get_atime(stream):
</p>
<pre class="code">  global s_second
  global s_microsecond
  global a_time
  a_time_op = None
  begin_index = None
  end_index = None
  for line in stream:
      if line:
          a_time_op = line.find(&#039;android time&#039;)
          if a_time_op&gt;=1:
              begin_index =  line.index(&#039;[&#039;)
              end_index = line[begin_index+1:].index(&#039;]&#039;)+begin_index+1
              date_string = line[a_time_op+13:].strip()
              abs_time = line[begin_index + 1 :end_index]
              [s_second,s_microsecond] = abs_time.split(&#039;.&#039;)
              a_time = datetime.datetime.strptime(date_string, &quot;%Y-%m-%d %H:%M:%S.%f&quot;)
              break</pre>

<p>
def main(argv):
</p>
<pre class="code">  global inputfile
  global outputfile
  inputpath = None
  outputpath = None
  try:
      opts, args = getopt.getopt(argv,&quot;hi:o:&quot;,[&quot;help&quot;,&quot;inputfile=&quot;,&quot;outputfile=&quot;])
  except getopt.GetoptError:
      usage()
      sys.exit(2)
  for opt, arg in opts:
      if opt in (&quot;-h&quot;, &quot;--help&quot;):
          usage()
          sys.exit()
      if opt in (&quot;-i&quot;, &quot;--inputfile&quot;):
          inputpath = arg
      if opt in (&quot;-o&quot;, &quot;outputfile&quot;):
          outputpath = arg
  if inputpath == None:
      usage()
      sys.exit()
  if outputpath == None:
      outputpath = os.getcwd()+&quot;/out.txt&quot;</pre>

<p>
    inputfile = open(inputpath, &#039;r&#039;)
</p>
<pre class="code">  outputfile = open(outputpath, &#039;w&#039;)
  get_atime(inputfile)
  inputfile.seek(0)
  calc_delta(inputfile)
  inputfile.close()
  outputfile.close()</pre>

<p>
if <em class="u">name</em> == “<em class="u">main</em>”:
</p>
<pre class="code">  main(sys.argv[1:])</pre>
