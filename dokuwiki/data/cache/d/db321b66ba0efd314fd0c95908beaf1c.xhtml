
<p>
 — <em><a href="mailto:&#x6b;&#x65;&#x6d;&#x65;&#x6e;&#x67;&#x2e;&#x79;&#x61;&#x6e;&#x67;&#x40;&#x73;&#x69;&#x6d;&#x2e;&#x63;&#x6f;&#x6d;" class="mail" title="&#x6b;&#x65;&#x6d;&#x65;&#x6e;&#x67;&#x2e;&#x79;&#x61;&#x6e;&#x67;&#x40;&#x73;&#x69;&#x6d;&#x2e;&#x63;&#x6f;&#x6d;">杨克猛</a> 2014/2/18</em>
</p>

<h2 class="sectionedit1" id="程序员的素质">程序员的素质</h2>
<div class="level2">

<p>
<strong>一个程序员应该具备哪些素质？谁是优秀的程序员？</strong>
</p>
<ol>
<li class="level1"><div class="li"> 细心和责任心。他们写代码非常细心，基本上不会犯忘记释放内存关闭文件的错误，经常性的检查代码，发现代码中微小错误；提交代码之前，一般会测试几十遍，保证代码尽量不出问题。对代码精益求精，即便是代码没有问题，也要经常重构，提高代码的健壮性和简洁性。</div>
</li>
<li class="level1"><div class="li"> 善于学习和总结，寻找自己的不足。IT领域的技术更新换代太快了，他们会经常读一些计算机经典名著，又时刻关注新技术的发展，对于犯过的错误会牢牢记在心中，写代码经常提醒别犯类似的错误。</div>
</li>
<li class="level1"><div class="li"> 思维严谨。他们写一个函数，总会先检查参数，IF语句总能覆盖所有的条件组合，while不会有加1减1的错误，内存不用的时候，总会及时释放，调用一个函数，经常判断返回值。他们考虑的问题比一般人多，比如在SD卡上写文件，会先判断SD是否已经挂载，是不是可写，是不是已满，调用了write函数会检查写入了字符数，最后自己关闭文件，不使用java语言自动关闭文件的功能。</div>
</li>
<li class="level1"><div class="li"> 良好的耐力。为了跟踪一个BUG，连续几天分析LOG，反复对比不同条件下的LOG。有一种不达目标不罢休的劲头。</div>
</li>
<li class="level1"><div class="li"> 谦虚而谨慎，当别人提出疑问的时候，他会首先去看LOG和代码，他相信只要是代码总会隐藏错误，而决不会把自己的错误推卸到别人身上。态度谦和，乐意与别人沟通，从来不认为向别人请教是无能的表现。</div>
</li>
<li class="level1"><div class="li"> 善于使用设计模式和架构，写出的代码模块化性强，高内聚低耦合，扩充维护都容易。</div>
</li>
</ol>

<p>
<strong>拙劣的程序员</strong>
</p>
<ol>
<li class="level1"><div class="li"> 粗心，没有责任心。经常忘记释放内存关闭数据库或文件，代码写完了，测试一次没发现问题就提交。他认为反正有测试部门，测试软件是他们的事。很少检查代码，没问题决不看代码，更不会去重构，不愿对代码多测试。</div>
</li>
<li class="level1"><div class="li"> 不经常学习，很少总结，学习少，进步慢，总是犯重复性的错误。</div>
</li>
<li class="level1"><div class="li"> 思维混乱，丢三落四。不喜欢检查参数和返回值，IF语句只能覆盖大部分情况，所以其代码大部分情况是好的，却又时常出问题。一个模块维护大半年，仍然不稳定。</div>
</li>
<li class="level1"><div class="li"> 没有耐力。一个BUG跟踪半天没发现问题就厌倦了，打个补丁完事，连补丁都是有时行有时不行。</div>
</li>
<li class="level1"><div class="li"> 过于自信，狂妄自大，从不承认自己的代码有错，除非你能牢牢抓住他的证据。别人发现了他的问题不看LOG，不看代码，信誓旦旦地说“我的代码测过了，没有问题”。喜欢推卸责任，即便他真地发现了问题他也会说是别人的问题.</div>
</li>
<li class="level1"><div class="li"> 不使用设计模式，只喜欢用数组，代码随意而混乱，没有模块化思想，扩充维护极其困难。</div>
</li>
</ol>

<p>
如果一个软件部门有几个优秀的程序员，项目的成功就有了保障。对于拙劣的程序员，最好的办法就是把他们清理出去，他们的存在只会增加软件的错误，延缓项目的进度，还经常连累别人，至少不要把这些人放在重要的岗位。
</p>

</div>
<!-- EDIT1 SECTION "程序员的素质" [54-] -->