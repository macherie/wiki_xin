
<p>
 — <em><a href="mailto:&#x73;&#x68;&#x75;&#x2e;&#x79;&#x69;&#x6e;&#x40;&#x73;&#x69;&#x6d;&#x2e;&#x63;&#x6f;&#x6d;" class="mail" title="&#x73;&#x68;&#x75;&#x2e;&#x79;&#x69;&#x6e;&#x40;&#x73;&#x69;&#x6d;&#x2e;&#x63;&#x6f;&#x6d;">尹姝</a> 2013/12/11</em>
</p>

<h1 class="sectionedit1" id="git_基本操作">Git 基本操作</h1>
<div class="level1">

<p>
<a href="http://mt.sohu.com/20160927/n469237607.shtml" class="urlextern" title="http://mt.sohu.com/20160927/n469237607.shtml"  rel="nofollow">http://mt.sohu.com/20160927/n469237607.shtml</a>
</p>

<p>
<a href="/dokuwiki/lib/exe/fetch.php/git;git%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%8A%80%E5%B7%A7.ppt" class="media mediafile mf_ppt" title="git:git使用及技巧.ppt (1.3 MB)">git使用及技巧.ppt</a>
</p>

</div>
<!-- EDIT1 SECTION "Git 基本操作" [48-163] -->
<h2 class="sectionedit2" id="git_rm">git rm</h2>
<div class="level2">

<p>
<strong> 删除文件 </strong>
</p>

<p>
要从Git版本库中删除某个文件，就必须要先从暂存区删除，然后提交。可以用 git rm 命令完成此工作，并连带从工作区中删除指定的文件。
</p>
<pre class="code bash"><span class="co4">$ </span><span class="kw2">git rm</span> welcom.txt</pre>

<p>
<strong> 强制删除 </strong>
</p>

<p>
如果删除之前修改过并且已经加到暂存区的话，则必须要用强制删除选项-f。
</p>
<pre class="code bash"><span class="co4">$ </span><span class="kw2">git rm</span> <span class="re5">-f</span> welcom.txt</pre>

<p>
<strong> 删除Git版本库中文件，保留当前工作区文件 </strong>
</p>

<p>
如果只想把文件从Git版本库中删除，但想保留在当前工作区，可以用–cached选项。
</p>
<pre class="code bash"><span class="co4">$ </span><span class="kw2">git rm</span> <span class="re5">--cached</span> welcom.txt</pre>

<p>
<strong> 删除文件夹里所有文件 </strong>
</p>
<pre class="code bash"><span class="co4">$ </span><span class="kw2">git rm</span> <span class="re5">-r</span> dir<span class="sy0">/</span></pre>

<p>
<strong> 快速标记删除 </strong>
</p>

<p>
将本地有改动(包括修改和删除)的文件标记到暂存区
</p>
<pre class="code bash"><span class="co4">$ </span><span class="kw2">git add</span> <span class="re5">-u</span> .</pre>

</div>
<!-- EDIT2 SECTION "git rm" [164-1021] -->
<h2 class="sectionedit3" id="git_mv">git mv</h2>
<div class="level2">

<p>
<strong> 移动文件 </strong>
</p>
<pre class="code bash"><span class="co4">$ </span><span class="kw2">git mv</span> file_from file_to</pre>

<p>
git mv 命令相当于运行了下面三条命令：
</p>
<pre class="code bash">$ <span class="kw2">mv</span> file_from file_to
$ <span class="kw2">git rm</span> file_from
$ <span class="kw2">git add</span> file_to</pre>

</div>
<!-- EDIT3 SECTION "git mv" [1022-1241] -->
<h2 class="sectionedit4" id="git_diff">git diff</h2>
<div class="level2">

<p>
<a href="/dokuwiki/doku.php/git;diff" class="wikilink1" title="git:diff">git diff</a>
</p>

</div>
<!-- EDIT4 SECTION "git diff" [1242-1285] -->
<h2 class="sectionedit5" id="git_status">git status</h2>
<div class="level2">

<p>
Git status 命令用来确定哪些文件当前处于什么状态。
</p>

<p>
<strong> Nothing to commit：</strong> 工作目录是干净的，即当前没有任何被加到暂存区，也没有任何文件在上次提交后更改过。
</p>

<p>
<strong> Changes not staged for commit：</strong> 版本库中的文件在工作区中被修改了，还没有加到暂存区中（即还没有git add），也没有提交到版本库中。
</p>

<p>
<strong> Changes to be committed：</strong> 版本库中的文件在工作区中被修改了，并已加到暂存区中（即也git add），但还没有提交到版本库中。
</p>

<p>
<strong> Untracked files：</strong> 新加文件，版本库中并没有此文件。
</p>

<p>
<strong> Git status -s </strong>
</p>

<p>
第一列为暂存区状态
</p>

<p>
第二列为工作区状态
</p>
<pre class="code bash"><span class="co4">$ </span><span class="kw2">git status</span> <span class="re5">-s</span></pre>

<p>
<span style='color:green; '>M</span><span style='color:red; '>M</span> aaa
</p>

<p>
位于第一列的字符 <span style='color:green; '>M</span> 的含义是：版本库中的文件与处于中间状态——提交任务(提交暂存区，stage)中的文件相比有改动。
</p>

<p>
位于第二列的字符 <span style='color:red; '>M</span> 的含义是：工作区当前的文件与处于中间状态——提交任务(提交暂存区，stage)中的文件相比有改动。
</p>

</div>
<!-- EDIT5 SECTION "git status" [1286-2469] -->
<h2 class="sectionedit6" id="git_log">git log</h2>
<div class="level2">

<p>
<strong> 查看历史提交。</strong>
</p>

<p>
默认不用任何参数的话，git log 会按提交时间列出所有的更新，最近的更新排在最上面。每次更新都有一个 SHA1 哈希值、作者的名字和电子邮件地址、提交时间及提交说明。
</p>

<p>
参数：
</p>
<pre class="code">-p       选项展开显示每次提交的内容差异。
-&lt;n&gt;     则仅显示最近的 &lt;n&gt; 次提交。
--stat   仅显示简要的增改行数统计。
--pretty 可以指定使用完全不同于默认格式的方式展示历史提交。比如用 oneline 将每到个提交放在一行显示。另外还有 shor, full 和 fuller 可以用，展示的信息或多或少有些不同，请自己动手实践一下看看效果如何。</pre>

<p>
<strong> 例：查看某段时刻的log </strong>
</p>
<pre class="code bash"><span class="kw2">git log</span> <span class="re5">--until</span>=<span class="nu0">2013</span>-<span class="nu0">11</span>-<span class="nu0">23</span>  <span class="co0">#表示查看2013年11月23日以前的log</span>
<span class="kw2">git log</span> <span class="re5">--since</span>=<span class="st0">&quot;2 days ago&quot;</span> <span class="re5">--until</span>=<span class="st0">&quot;10 hour ago&quot;</span> <span class="co0">#就表示你希望查找两天前到十小时前的log</span>
<span class="kw2">git log</span> <span class="re5">--until</span>=<span class="nu0">1</span>.minute.ago <span class="co0"># 一分钟之前的所有 log</span>
<span class="kw2">git log</span> <span class="re5">--since</span>=<span class="nu0">1</span>.day.ago <span class="co0">#一天之内的log</span>
<span class="kw2">git log</span> <span class="re5">--since</span>=<span class="nu0">1</span>.hour.ago <span class="co0">#一个小时之内的 log</span>
<span class="kw2">git log</span> <span class="re5">--since</span>=<span class="nu0">1</span>.month.ago <span class="re5">--until</span>=<span class="nu0">2</span>.weeks.ago <span class="co0">#一个月之前到半个月之前的log</span>
<span class="kw2">git log</span> <span class="re5">--since</span>=2013.08.01 <span class="re5">--until</span>=<span class="nu0">2013</span>-09-07 <span class="co0">#某个时间段的 log</span></pre>

</div>
<!-- EDIT6 SECTION "git log" [2470-3761] -->
<h2 class="sectionedit7" id="多分支操作">多分支操作</h2>
<div class="level2">

<p>
当一套代码含有多个分支，且需要在不同的分支上进行来回的切换和开发，如果分别下载不同分支的代码到本地会占用大量内存，导致本机容量不够，故提供以下方法仅供参考。
</p>

<p>
eg：因CB09代码 客户需求不同，特此创建了不同的开发分支（主分支msm8996，客户分支MSM8996_C01，MSM8996_C02等）
</p>

<p>
下载完主分支msm8996代码后，进入到需要修改 的文件目录下（包含.git库即可）,eg abi/cpp
</p>
<pre class="code bash">$ <span class="kw3">cd</span> abi<span class="sy0">/</span><span class="kw2">cpp</span>
$ <span class="kw2">git status</span> . \\ 查看本地代码是否有修改但尚未提交
$ <span class="kw2">git stash</span>   \\ 如果本地代码已经有修改但尚未提交，为防止切换分支时覆盖本地代码，可先暂存本地代码
$ <span class="kw2">git branch</span> <span class="re5">-rv</span>   \\ 查看远程所有分支及相关信息
$ <span class="kw2">git checkout</span> <span class="re5">-b</span> MSM8996_C01 sim<span class="sy0">/</span>MSM8996_C01  \\ 如需要在客户分支MSM8996_C01进行相关开发测试，则基于远程分支sim<span class="sy0">/</span>MSM8996_C01 创建本地跟踪分支MSM8996_C01
$ xxxxxx  \\ 根据开发需求 进行相关修改，合并和提交
$ repo upload .  \\ 推送代码至评审服务器,此时推送到服务器上对应的分支是 MSM8996_C01,不在是默认的分支msm8996
$ <span class="kw2">git checkout</span> master-branch  \\ 修改完成代码后再切换回主分支即可
$ <span class="kw2">git stash</span> pop  \\ 将本地主分支上修改但未保存的代码 重新释放出来，进行后续的开发</pre>

<p>
<a href="/dokuwiki/lib/exe/detail.php/git;2016-12-20_17_09_08%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png?id=git%3Agit%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C" class="media" title="git:2016-12-20_17_09_08屏幕截图.png"><img src="/dokuwiki/lib/exe/fetch.php/git;2016-12-20_17_09_08%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" class="media" alt="" /></a>
</p>

<p>
<a href="/dokuwiki/lib/exe/detail.php/git;2016-12-20_17_05_59%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png?id=git%3Agit%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C" class="media" title="git:2016-12-20_17_05_59屏幕截图.png"><img src="/dokuwiki/lib/exe/fetch.php/git;2016-12-20_17_05_59%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" class="media" alt="" /></a>
</p>

<p>
<a href="/dokuwiki/lib/exe/detail.php/git;2016-12-20_17_07_08%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png?id=git%3Agit%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C" class="media" title="git:2016-12-20_17_07_08屏幕截图.png"><img src="/dokuwiki/lib/exe/fetch.php/git;2016-12-20_17_07_08%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" class="media" alt="" /></a>
</p>

<p>
注释：如果修改的文件牵扯的文件目录很多 （位于不同的.git 库下），可以在以上git命令前 添加 repo forall -c 通过迭代器对代码整体进行切换
</p>

</div>
<!-- EDIT7 SECTION "多分支操作" [3762-5502] -->
<h2 class="sectionedit8" id="git使用中__和__之间的区别">Git使用中“..”和“...”之间的区别</h2>
<div class="level2">

<p>
— <em><a href="mailto:&#x79;&#x75;&#x68;&#x75;&#x61;&#x2e;&#x77;&#x61;&#x6e;&#x67;&#x40;&#x73;&#x69;&#x6d;&#x2e;&#x63;&#x6f;&#x6d;" class="mail" title="&#x79;&#x75;&#x68;&#x75;&#x61;&#x2e;&#x77;&#x61;&#x6e;&#x67;&#x40;&#x73;&#x69;&#x6d;&#x2e;&#x63;&#x6f;&#x6d;">yuhua.wang</a> 2016/12/21 14:50</em>
</p>

<p>
在使用git中，我们经常需要对比几次提交或连续提交之间的区别，而“…“（三个点）和“..”（两个点）成为不二之选，那么他们之间有什么异同呢？下面简单介绍如下：
</p>

<p>
相同点：两者均可以表示一段Git提交记录，即 CommitA..CommitB or CommitA…CommitB 均表示从提交 CommitA到 ComiitB之间的所有提交。
</p>

<p>
不同点：因两者在不同的Git命令中其含义存在一定区别，故根据Git具体指令介绍如下： 
</p>
<ul>
<li class="level1"><div class="li"> <span style='color:red; '>  如果是在git log 查看历史记录中</span></div>
</li>
</ul>

<p>
注释：可通过在终端 执行 man git-rev-list 查看其详细的区别。
</p>

<p>
如下图的提交历史：
</p>
<pre class="code">      D---E-------F                      特性分支2
     /      
    B---C---G---H---I---J            特性分支1
   /                     
  A-------K---------------L--M     主分支 
 </pre>

<p>
git log F..J 将显示C, G, H, I, J
</p>

<p>
git log J..F 将显示D, E, F
</p>

<p>
git log F..M 将显示K, L, M
</p>

<p>
git log M..F 将显示B, D, E, F
</p>

<p>
git log F…J 将显示D, E, F, C, G, H, I, J
</p>

<p>
git log F…M 将显示B, D, E, F, K, L, M
</p>

<p>
综上我们可以知道：
</p>
<pre class="code bash"><span class="nu0">1</span>）“R1..R2” 与 “^R1 R2”表示的范围一样，均可以表示达到 R2但不可以达到R1的所有提交（即包含R2 但是不包含 R1）
&nbsp;
<span class="nu0">2</span>） “R1...R2” 叫做 ”Symmetric difference“，它与 <span class="st0">&quot;R1 R2 --not <span class="es4">$(git merge-base --all R1 R2)</span>&quot;</span>表示的范围一样，都是表示可以到R1或者R1，但是不能同时达到两者的提交（即包含R1和R2，但是不包含两者共同的祖先） 
&nbsp;
<span class="nu0">3</span>） “R1...R2” 和 “R2...R1” 表示的范围一样。</pre>
<ul>
<li class="level1"><div class="li"> <span style='color:red; '>  如果是在git diff 对比文件差异中</span></div>
</li>
</ul>

<p>
 注释：可通过在终端 执行 man git-diff 查看该命令具体使用方法。
</p>

<p>
案例如下：我们首先通过 git log 查看一下当前git库都有那些提交，在分别执行 git diff SHA1 SHA2，git diff SHA1..SHA2，git diff SHA1…SHA2 查看之间的区别。
</p>

<p>
<a href="/dokuwiki/lib/exe/detail.php/git;2016-12-21_14_20_06%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png?id=git%3Agit%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C" class="media" title="git:2016-12-21_14_20_06屏幕截图.png"><img src="/dokuwiki/lib/exe/fetch.php/git;2016-12-21_14_20_06%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" class="media" alt="" /></a>
</p>

<p>
<a href="/dokuwiki/lib/exe/detail.php/git;2016-12-21_14_17_57%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png?id=git%3Agit%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C" class="media" title="git:2016-12-21_14_17_57屏幕截图.png"><img src="/dokuwiki/lib/exe/fetch.php/git;2016-12-21_14_17_57%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" class="media" alt="" /></a>
</p>

<p>
<a href="/dokuwiki/lib/exe/detail.php/git;2016-12-21_14_18_30%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png?id=git%3Agit%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C" class="media" title="git:2016-12-21_14_18_30屏幕截图.png"><img src="/dokuwiki/lib/exe/fetch.php/git;2016-12-21_14_18_30%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" class="media" alt="" /></a>
</p>

<p>
<a href="/dokuwiki/lib/exe/detail.php/git;2016-12-21_14_18_49%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png?id=git%3Agit%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C" class="media" title="git:2016-12-21_14_18_49屏幕截图.png"><img src="/dokuwiki/lib/exe/fetch.php/git;2016-12-21_14_18_49%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" class="media" alt="" /></a>
</p>

<p>
其次，我们也可以通过查看官方资料给出的解释：
</p>

<p>
git diff [–options] &lt;commit&gt; &lt;commit&gt; [–] [&lt;path&gt;…] 
</p>
<pre class="code">      This is to view the changes between two arbitrary &lt;commit&gt;.    （对比两者提交之间的任意差异）</pre>

<p>
git diff [–options] &lt;commit&gt;..&lt;commit&gt; [–] [&lt;path&gt;…]
</p>
<pre class="code">       This is synonymous to the previous form. If &lt;commit&gt; on one side is omitted, it will have the same effect as using HEAD instead. （对比两者提交之间的任意差异，即使在其中一个提交中被忽略，但其提交记录依旧会被应用在HEAD中。）</pre>

<p>
git diff [–options] &lt;commit&gt;…&lt;commit&gt; [–] [&lt;path&gt;…]
</p>
<pre class="code">       This form is to view the changes on the branch containing and up to the second &lt;commit&gt;, starting at a common ancestor of both  &lt;commit&gt;. &quot;git diff A...B&quot; is equivalent to &quot;git diff $(git-merge-base A B) B&quot;. You can omit any one of &lt;commit&gt;, which has the same effect as using HEAD instead   （输出自A和B分别开发以来，B分支上的更改。）
       </pre>

<p>
 $ git diff topic master    (1)                <br/>
 1. Changes between the tips of the topic and the master branches.
</p>

<p>
 $ git diff topic..master   (2)                 <br/>
2. Same as above.
</p>

<p>
 $ git diff topic…master  (3)                 <br/>
3. Changes that occurred on the master branch since when the topic branch was started off it.      
</p>

<p>
综上我们可以知道：
</p>
<pre class="code bash"><span class="nu0">1</span>）“R1..R2” 表示R1到R2之间的区别，功能通 ”R1 R2“不添加 ..    
&nbsp;
<span class="nu0">2</span>） “R1...R2” 与<span class="kw2">git diff</span> $<span class="br0">&#40;</span><span class="kw2">git merge-base</span> R1 R2<span class="br0">&#41;</span>R2 相同，表示从R1和R2公共祖先到R2的区别。</pre>

</div>
<!-- EDIT8 SECTION "Git使用中“..”和“...”之间的区别" [5503-9410] -->
<h2 class="sectionedit9" id="git_忽略文件">Git 忽略文件</h2>
<div class="level2">

<p>
<a href="/dokuwiki/doku.php/git;gitignore" class="wikilink1" title="git:gitignore">Git 忽略文件</a>
</p>

</div>
<!-- EDIT9 SECTION "Git 忽略文件" [9411-] -->