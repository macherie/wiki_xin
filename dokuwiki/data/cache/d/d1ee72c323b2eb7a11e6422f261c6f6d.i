a:202:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:0;}i:2;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:1;}i:3;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"---";}i:2;i:2;}i:4;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:5;}i:5;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:6;}i:6;a:3:{i:0;s:9:"emaillink";i:1;a:2:{i:0;s:15:"shu.yin@sim.com";i:1;s:6:"尹姝";}i:2;i:8;}i:7;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:" 2013/12/11";}i:2;i:34;}i:8;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:45;}i:9;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:47;}i:10;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:48;}i:11;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:4:"Repo";i:1;i:1;i:2;i:48;}i:2;i:48;}i:12;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:48;}i:13;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:48;}i:14;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:265:"Repo是一个用Python语言开发的命令工作 ，可以更文件地进行多版本库的管理。Repo是对Git进行了一定的封装，简化了对多个Git版本库的管理。对于repo管理的任何一个版本库，都需要使用Git命令进行操作。";}i:2;i:68;}i:15;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:333;}i:16;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:335;}i:17;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:34:"Repo的使用过程大致如下：";i:1;i:2;i:2;i:335;}i:2;i:335;}i:18;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:335;}i:19;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:380;}i:20;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:380;}i:21;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:380;}i:22;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:119:" 运行repo init命令，克隆Android的一个清单库。这个清单库是通过XML技术建立的版本库清单。";}i:2;i:384;}i:23;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:503;}i:24;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:503;}i:25;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:503;}i:26;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:503;}i:27;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:172:" 清单库中的manifest.xml文件，列出了200多个版本库的克隆方式。包括版本库的地址和工作区地址的对应关系，以及分支的对应关系。";}i:2;i:507;}i:28;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:679;}i:29;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:679;}i:30;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:679;}i:31;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:679;}i:32;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:103:" 运行repo sync命令，开始同步，即分别克隆这200多个版本库到本地的工作区中。";}i:2;i:683;}i:33;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:786;}i:34;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:786;}i:35;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:786;}i:36;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:786;}i:37;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:79:" 同时对200多个版本库执行切换分支操作，切换到某个分支。";}i:2;i:790;}i:38;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:869;}i:39;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:869;}i:40;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:869;}i:41;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:871;}i:42;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:28:"Repo和清单库的初始化";i:1;i:2;i:2;i:871;}i:2;i:871;}i:43;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:871;}i:44;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:911;}i:45;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:911;}i:46;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:911;}i:47;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:148:" 建立一个工作目录，在工作目录中执行repo init -u <url>，完成repo完整的下载及项目清单版本库(manifest.git)的下载。";}i:2;i:915;}i:48;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1063;}i:49;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1063;}i:50;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1063;}i:51;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1063;}i:52;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:" 命令repo init要完成如下操作：";}i:2;i:1067;}i:53;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1107;}i:54;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1107;}i:55;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1107;}i:56;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1107;}i:57;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:97:" 完成repo这一工作的完整下载，因为在~/bin/下是repo不过是repo的引导程序。";}i:2;i:1111;}i:58;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1208;}i:59;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1208;}i:60;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1208;}i:61;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1208;}i:62;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:66:" 克隆android的清单库manifest.git(地址来自于-u参数)。";}i:2;i:1212;}i:63;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1278;}i:64;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1278;}i:65;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1278;}i:66;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1278;}i:67;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:172:" 克隆的清单库拉于.repo/manifest.git中，本地克隆到.repo/manifests。清单文件.repo/manifest.xml只是符号链接，它指向.repo/manifests/default.xml。";}i:2;i:1282;}i:68;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1454;}i:69;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1454;}i:70;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1454;}i:71;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1454;}i:72;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:145:" 询问用户的姓名和邮件地址，如果和Git默认的用户名、邮件地址不同，则记录在.repo/manifest.git库的config文件中";}i:2;i:1458;}i:73;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1603;}i:74;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1603;}i:75;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1603;}i:76;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1603;}i:77;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:" 如果不想用默认的URL地址获取repo，可以在repo init子命令中加";}i:2;i:1607;}i:78;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:1687;}i:79;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:"repo-url参数指定repo的版本库地址。";}i:2;i:1689;}i:80;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1734;}i:81;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1734;}i:82;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:1734;}i:83;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1736;}i:84;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:16:"Repo的命令集";i:1;i:2;i:2;i:1736;}i:2;i:1736;}i:85;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1736;}i:86;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1736;}i:87;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:67:"每一个repo子命令都可以通过下面的命令获得帮助：";}i:2;i:1765;}i:88;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1832;}i:89;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:19:"repo help <command>";}i:2;i:1832;}i:90;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1854;}i:91;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:15:"repo init命令";i:1;i:3;i:2;i:1854;}i:2;i:1854;}i:92;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:1854;}i:93;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1854;}i:94;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:119:"repo init子命令主要完成检出清单版本库(manifest.git)，以及配置Git用户名和邮件地址的工作。";}i:2;i:1880;}i:95;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1999;}i:96;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2001;}i:97;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:15:"repo sync命令";i:1;i:3;i:2;i:2001;}i:2;i:2001;}i:98;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:2001;}i:99;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2001;}i:100;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:240:"repo sync子命令用于参照清单文件克隆可同步版本库。如果某个项目版本库尚不存在，则执行repo sync命令相当于执行git clone。如果项目版本库已经存在，则相当于执行下面的两个命令：";}i:2;i:2027;}i:101;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2267;}i:102;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:2267;}i:103;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2267;}i:104;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2267;}i:105;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:71:" git remote update：相当于对每一个remote源执行fetch操作。";}i:2;i:2271;}i:106;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2342;}i:107;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2342;}i:108;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2342;}i:109;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2342;}i:110;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:82:" git rebase origin/branch：针对当前分支的跟踪分支执行rebase操作。";}i:2;i:2346;}i:111;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2428;}i:112;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2428;}i:113;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:2428;}i:114;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2430;}i:115;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:16:"repo start命令";i:1;i:3;i:2;i:2430;}i:2;i:2430;}i:116;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:2430;}i:117;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2430;}i:118;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:268:"repo start子命令实际上是对git checkout -b命令的封装。为指定的项目或所有项目(若使用-all参数)，以清单文件中为项目认定的分支或里程碑为基础，创建特性分支。特性分支的名称由命令的第一个参数指定。";}i:2;i:2457;}i:119;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2725;}i:120;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:49:"repo start <newbranchname> [--all | <project>…]";}i:2;i:2725;}i:121;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2778;}i:122;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"repo status命令";i:1;i:3;i:2;i:2778;}i:2;i:2778;}i:123;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:2778;}i:124;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2778;}i:125;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:147:"repo status子命令实际上是对git diff-index、git diff-files命令的封装，同时显示暂存区的状态和本地文件修改的状态。";}i:2;i:2806;}i:126;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2953;}i:127;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:26:"repo status [<project>…]";}i:2;i:2953;}i:128;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:2983;}i:129;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:19:"repo checkout命令";i:1;i:3;i:2;i:2983;}i:2;i:2983;}i:130;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:2983;}i:131;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2983;}i:132;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:110:"repo checkout子命令实际上是对git checkout命令的封装。检出之前由repo start创建的分支。";}i:2;i:3013;}i:133;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3123;}i:134;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:41:"repo checkout <branchname> [<project>…]";}i:2;i:3123;}i:135;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3168;}i:136;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:19:"repo branches命令";i:1;i:3;i:2;i:3168;}i:2;i:3168;}i:137;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:3168;}i:138;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3168;}i:139;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:"repo branches读取各个项目的分支列表并汇总显示。";}i:2;i:3198;}i:140;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3262;}i:141;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:28:"repo branches [<project>…]";}i:2;i:3262;}i:142;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3294;}i:143;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"repo upload命令";i:1;i:3;i:2;i:3294;}i:2;i:3294;}i:144;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:3294;}i:145;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3294;}i:146;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:416:"repo upload相当于git push，但是又有很大的不同。执行repo upload不是将版本库改动推送到克隆时的远程服务器，而是推送到代码审查服务器(Gerrit)的特殊引用上。代码审核服务器会对推送的提交进行特处理，将新的提交显示为一个待审核的修改集，并进入代码审查流程。只有当审核通过后，才会合并到正式的版本库中。";}i:2;i:3322;}i:147;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3738;}i:148;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3738;}i:149;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"用法如下：";}i:2;i:3740;}i:150;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3755;}i:151;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:38:"repo upload [--re --cc] [<project>]...";}i:2;i:3755;}i:152;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3755;}i:153;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"参数：";}i:2;i:3796;}i:154;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3811;}i:155;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:248:"
-h, --help	显示帮助信息。
-t		发送本地分支名称到Gerrit代码审核服务器。
--re=REVIEWERS, --reviewers=REVIEWERS
                要求由指定的人员进行审核。
-cc=CC	        同时发送通知到如下邮件地址。
";i:1;N;i:2;N;}i:2;i:3811;}i:156;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3811;}i:157;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:150:"如果发现上传后的代码有问题想重新修改，可以在本地继续修改代码，用git add把修改内容加到暂存区，用git commit ";}i:2;i:4068;}i:158;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:4218;}i:159;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:166:"amend修改上一次提交，再用repo upload重新上传修订集。这样上传后不会产生新的提交，而是会在原有的提交中新加一个修订集。";}i:2;i:4220;}i:160;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4386;}i:161;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4388;}i:162;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:19:"repo download命令";i:1;i:3;i:2;i:4388;}i:2;i:4388;}i:163;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:4388;}i:164;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4388;}i:165;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:236:"repo download命令主要用于代码审核者下载和评估提交的修订。使用repo download命令实际上就是用git fetch获取到对应项目的refs/changes/<changeid>/patchset>引用，并自动切换到对应的引用上。";}i:2;i:4418;}i:166;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4654;}i:167;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:45:"repo download {project change [/patchset]}…";}i:2;i:4654;}i:168;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4703;}i:169;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:16:"repo prune命令";i:1;i:3;i:2;i:4703;}i:2;i:4703;}i:170;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:4703;}i:171;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4703;}i:172;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:140:"repo prune子命令实际上是对git branch -d命令封装，该命令用于扫描项目的各个分支，并删除已经合并的分支。";}i:2;i:4730;}i:173;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4870;}i:174;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:25:"repo prune [<project>…]";}i:2;i:4870;}i:175;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4900;}i:176;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:23:"repo 遍历整个项目";i:1;i:3;i:2;i:4900;}i:2;i:4900;}i:177;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:4900;}i:178;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4900;}i:179;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:4934;}i:180;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"---";}i:2;i:4935;}i:181;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:4938;}i:182;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:4939;}i:183;a:3:{i:0;s:9:"emaillink";i:1;a:2:{i:0;s:23:"liangjiong.zhou@sim.com";i:1;s:15:"liangjiong.zhou";}i:2;i:4941;}i:184;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:" 2013/12/31 03:12";}i:2;i:4984;}i:185;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:5001;}i:186;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5003;}i:187;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5003;}i:188;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:48:"repo forall 可以用来遍历所有git仓库。";}i:2;i:5005;}i:189;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5059;}i:190;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:24:"
repo forall -c command
";i:1;s:4:"bash";i:2;N;}i:2;i:5059;}i:191;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5059;}i:192;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:5098;}i:193;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:5:"color";i:1;a:2:{i:0;i:1;i:1;a:2:{i:0;s:4:"blue";i:1;s:9:"lightgrey";}}i:2;i:1;i:3;s:22:"<color blue/lightgrey>";}i:2;i:5100;}i:194;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:5:"color";i:1;a:2:{i:0;i:3;i:1;s:6:"例：";}i:2;i:3;i:3;s:6:"例：";}i:2;i:5122;}i:195;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:5:"color";i:1;a:2:{i:0;i:4;i:1;s:0:"";}i:2;i:4;i:3;s:8:"</color>";}i:2;i:5128;}i:196;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:5136;}i:197;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:5138;}i:198;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5144;}i:199;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:105:"
$ repo forall -c git status      #等同 repo status
$ repo forall -c git clean -dxf  #清除整个repo
";i:1;s:4:"bash";i:2;N;}i:2;i:5144;}i:200;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5263;}i:201;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:5263;}}