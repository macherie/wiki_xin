
<p>
创建Opengl es程序框架
</p>

<p>
1.定义IOpenGLDemo接口
</p>
<pre class="code java"><span class="kw1">package</span> <span class="co2">com.android.opengldemo.example</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">import</span> <span class="co2">javax.microedition.khronos.opengles.GL10</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">public</span> <span class="kw1">interface</span> IOpenGLDemo <span class="br0">&#123;</span>
    <span class="co1">//drawScene提供统一的绘制函数，实现主要的绘制图形工作</span>
    <span class="kw1">public</span> <span class="kw4">void</span> drawScene<span class="br0">&#40;</span>GL10 gl<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre>

<p>
2.创建OpenGLDemoActivity，需要实现IOpenGLDemo接口中的drawScene()方法，完成实际的绘图工作。
</p>
<pre class="code java"><span class="kw1">package</span> <span class="co2">com.android.opengldemo.example</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">import</span> <span class="co2">android.app.Activity</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">android.opengl.GLSurfaceView</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">android.os.Bundle</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">android.view.Window</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">android.view.WindowManager</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">import</span> <span class="co2">javax.microedition.khronos.opengles.GL10</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">public</span> <span class="kw1">class</span> OpenGLDemoActivity <span class="kw1">extends</span> Activity <span class="kw1">implements</span> IOpenGLDemo <span class="br0">&#123;</span>
&nbsp;
    <span class="kw1">private</span> GLSurfaceView mGLSurfaceView<span class="sy0">;</span>
&nbsp;
    @Override
    <span class="kw1">protected</span> <span class="kw4">void</span> onCreate<span class="br0">&#40;</span>Bundle savedInstanceState<span class="br0">&#41;</span> <span class="br0">&#123;</span>
        <span class="kw1">super</span>.<span class="me1">onCreate</span><span class="br0">&#40;</span>savedInstanceState<span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="kw1">this</span>.<span class="me1">requestWindowFeature</span><span class="br0">&#40;</span><a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+window"><span class="kw3">Window</span></a>.<span class="me1">FEATURE_NO_TITLE</span><span class="br0">&#41;</span><span class="sy0">;</span>
        getWindow<span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">setFlags</span><span class="br0">&#40;</span>WindowManager.<span class="me1">LayoutParams</span>.<span class="me1">FLAG_FULLSCREEN</span>,WindowManager.<span class="me1">LayoutParams</span>.<span class="me1">FLAG_FULLSCREEN</span><span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="co1">//创建GLSurfaceView对象</span>
        mGLSurfaceView <span class="sy0">=</span> <span class="kw1">new</span> GLSurfaceView<span class="br0">&#40;</span><span class="kw1">this</span><span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="co1">//设置渲染器，这步是必须要的</span>
        mGLSurfaceView.<span class="me1">setRenderer</span><span class="br0">&#40;</span><span class="kw1">new</span> OpenGLRenderer<span class="br0">&#40;</span><span class="kw1">this</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        setContentView<span class="br0">&#40;</span>mGLSurfaceView<span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
&nbsp;
&nbsp;
    <span class="kw1">public</span> <span class="kw4">void</span> drawScene<span class="br0">&#40;</span>GL10 gl<span class="br0">&#41;</span><span class="br0">&#123;</span>
        <span class="co1">//将屏幕背景设置成黑色</span>
        gl.<span class="me1">glClearColor</span><span class="br0">&#40;</span>0.0f, 0.0f, 0.0f, 0.0f<span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="co1">//清除color buffer 以及 depth buffer缓存</span>
        gl.<span class="me1">glClear</span><span class="br0">&#40;</span>GL10.<span class="me1">GL_COLOR_BUFFER_BIT</span> <span class="sy0">|</span> GL10.<span class="me1">GL_DEPTH_BUFFER_BIT</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
&nbsp;
    @Override
    <span class="kw1">protected</span> <span class="kw4">void</span> onResume<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
        <span class="kw1">super</span>.<span class="me1">onResume</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="co1">//必须要在Activity的onResume（）中调用mGLSurfaceView.onResume()方法</span>
        mGLSurfaceView.<span class="me1">onResume</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
&nbsp;
    @Override
    <span class="kw1">protected</span> <span class="kw4">void</span> onPause<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
        <span class="kw1">super</span>.<span class="me1">onPause</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="co1">//必须要在Activity的onPause()方法中调用mGLSurfaceView.onPause()方法</span>
        mGLSurfaceView.<span class="me1">onPause</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre>

<p>
3.创建OpenGLRenderer类，实现GLSurfaceView.Renderer接口。Renderer接口提供了三个方法，onSurfaceCreated（），onSurfaceChanged（），onDrawFrame（），这三个方法必须实现。onSurfaceCreated（）方法中完成一些不太改变的常用设置，onSurfaceChanged（）主要用于横竖屏幕的切换，onDrawFrame（）完成主要的绘制工作。
</p>
<pre class="code java"><span class="kw1">package</span> <span class="co2">com.android.opengldemo.example</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">import</span> <span class="co2">android.opengl.GLSurfaceView</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">android.opengl.GLU</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">import</span> <span class="co2">javax.microedition.khronos.egl.EGLConfig</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">javax.microedition.khronos.opengles.GL10</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw1">public</span> <span class="kw1">class</span> OpenGLRenderer <span class="kw1">implements</span> GLSurfaceView.<a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+renderer"><span class="kw3">Renderer</span></a> <span class="br0">&#123;</span>
&nbsp;
    <span class="kw1">private</span> <span class="kw1">final</span> IOpenGLDemo mOpenGLDemo<span class="sy0">;</span>
&nbsp;
    <span class="kw1">public</span> OpenGLRenderer<span class="br0">&#40;</span>IOpenGLDemo demo<span class="br0">&#41;</span> <span class="br0">&#123;</span>
        mOpenGLDemo <span class="sy0">=</span> demo<span class="sy0">;</span>
    <span class="br0">&#125;</span>
&nbsp;
    @Override
    <span class="kw1">public</span> <span class="kw4">void</span> onSurfaceCreated<span class="br0">&#40;</span>GL10 gl10, EGLConfig eglConfig<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp;
        <span class="co1">//set the background color to back (rgba)</span>
        gl10.<span class="me1">glClearColor</span><span class="br0">&#40;</span>0.0f, 0.0f, 0.0f, 0.5f<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        <span class="co1">//Enable smooth shade</span>
        gl10.<span class="me1">glShadeModel</span><span class="br0">&#40;</span>GL10.<span class="me1">GL_SMOOTH</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        <span class="co1">// Depth buffer setup</span>
        gl10.<span class="me1">glClearDepthf</span><span class="br0">&#40;</span>1.0f<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        <span class="co1">//Enable Depth test</span>
        gl10.<span class="me1">glEnable</span><span class="br0">&#40;</span>GL10.<span class="me1">GL_DEPTH_TEST</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        <span class="co1">//The type of Depth testing to do</span>
        gl10.<span class="me1">glDepthFunc</span><span class="br0">&#40;</span>GL10.<span class="me1">GL_LEQUAL</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        <span class="co1">// Really nice perspective calculations.</span>
        gl10.<span class="me1">glHint</span><span class="br0">&#40;</span>GL10.<span class="me1">GL_PERSPECTIVE_CORRECTION_HINT</span>, GL10.<span class="me1">GL_NICEST</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
&nbsp;
    @Override
    <span class="kw1">public</span> <span class="kw4">void</span> onSurfaceChanged<span class="br0">&#40;</span>GL10 gl, <span class="kw4">int</span> width, <span class="kw4">int</span> height<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp;
        <span class="co1">//Set the current view port to the new size</span>
        gl.<span class="me1">glViewport</span><span class="br0">&#40;</span><span class="nu0">0</span>, <span class="nu0">0</span> , width, height<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        <span class="co1">//Select the projection matrix</span>
        gl.<span class="me1">glMatrixMode</span><span class="br0">&#40;</span>GL10.<span class="me1">GL_PROJECTION</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        <span class="co1">//Reset the projection matrix</span>
        gl.<span class="me1">glLoadIdentity</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        <span class="co1">//Caculate the aspect radio of window</span>
        GLU.<span class="me1">gluPerspective</span><span class="br0">&#40;</span>gl,45.0f, <span class="br0">&#40;</span><span class="kw4">float</span><span class="br0">&#41;</span>width<span class="sy0">/</span><span class="br0">&#40;</span><span class="kw4">float</span><span class="br0">&#41;</span>height, 1.0f, 100f<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        <span class="co1">//Select the Modelview matrix</span>
        gl.<span class="me1">glMatrixMode</span><span class="br0">&#40;</span>GL10.<span class="me1">GL_MODELVIEW</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        <span class="co1">//Reset the modelview matrix</span>
        gl.<span class="me1">glLoadIdentity</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
&nbsp;
    @Override
    <span class="kw1">public</span> <span class="kw4">void</span> onDrawFrame<span class="br0">&#40;</span>GL10 gl10<span class="br0">&#41;</span> <span class="br0">&#123;</span>
        <span class="kw1">if</span> <span class="br0">&#40;</span>mOpenGLDemo <span class="sy0">!=</span> <span class="kw2">null</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
            mOpenGLDemo.<span class="me1">drawScene</span><span class="br0">&#40;</span>gl10<span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="br0">&#125;</span>
    <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre>

<p>
4.在屏幕上绘制点
</p>
<pre class="code java"><span class="kw1">package</span> <span class="co2">com.android.opengldemo.example</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">import</span> <span class="co2">android.os.Bundle</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">import</span> <span class="co2">java.nio.ByteBuffer</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">java.nio.ByteOrder</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">java.nio.FloatBuffer</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">import</span> <span class="co2">javax.microedition.khronos.opengles.GL10</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="kw1">public</span> <span class="kw1">class</span> DrawPointActivity <span class="kw1">extends</span> OpenGLDemoActivity <span class="kw1">implements</span> IOpenGLDemo<span class="br0">&#123;</span>
&nbsp;
    <span class="kw4">float</span><span class="br0">&#91;</span><span class="br0">&#93;</span> vertexArray <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw4">float</span><span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#123;</span>
            <span class="sy0">-</span>0.8f , <span class="sy0">-</span>0.4f <span class="sy0">*</span> 1.732f , 0.0f ,
            0.8f , <span class="sy0">-</span>0.4f <span class="sy0">*</span> 1.732f , 0.0f ,
            <span class="sy0">-</span>0.4f <span class="sy0">*</span> 1.732f , 0.0f
    <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
    @Override
    <span class="kw1">protected</span>  <span class="kw4">void</span> onCreate<span class="br0">&#40;</span>Bundle savedInstanceState<span class="br0">&#41;</span><span class="br0">&#123;</span>
        <span class="kw1">super</span>.<span class="me1">onCreate</span><span class="br0">&#40;</span>savedInstanceState<span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
&nbsp;
    <span class="kw1">public</span> <span class="kw4">void</span> drawScene<span class="br0">&#40;</span>GL10 gl<span class="br0">&#41;</span><span class="br0">&#123;</span>
&nbsp;
        <span class="kw1">super</span>.<span class="me1">drawScene</span><span class="br0">&#40;</span>gl<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        ByteBuffer vbb <span class="sy0">=</span> ByteBuffer.<span class="me1">allocateDirect</span><span class="br0">&#40;</span>vertexArray.<span class="me1">length</span> <span class="sy0">*</span> <span class="nu0">4</span><span class="br0">&#41;</span><span class="sy0">;</span>
        vbb.<span class="me1">order</span><span class="br0">&#40;</span>ByteOrder.<span class="me1">nativeOrder</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        FloatBuffer vertex <span class="sy0">=</span> vbb.<span class="me1">asFloatBuffer</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        vertex.<span class="me1">put</span><span class="br0">&#40;</span>vertexArray<span class="br0">&#41;</span><span class="sy0">;</span>
        vertex.<span class="me1">position</span><span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
        gl.<span class="me1">glColor4f</span><span class="br0">&#40;</span>0.0f, 1.0f, 0.0f, 1.0f<span class="br0">&#41;</span><span class="sy0">;</span><span class="co1">//rgba</span>
        gl.<span class="me1">glPointSize</span><span class="br0">&#40;</span>8f<span class="br0">&#41;</span><span class="sy0">;</span><span class="co1">//point size</span>
        <span class="co1">//设置单位矩阵</span>
        gl.<span class="me1">glLoadIdentity</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="co1">//向z-方向平移4个单位</span>
        gl.<span class="me1">glTranslatef</span><span class="br0">&#40;</span><span class="nu0">0</span> , <span class="nu0">0</span>, <span class="sy0">-</span><span class="nu0">4</span><span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="co1">//打开 Pipeline 的Vectex 顶点“开关”</span>
        gl.<span class="me1">glEnableClientState</span><span class="br0">&#40;</span>GL10.<span class="me1">GL_VERTEX_ARRAY</span><span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="co1">//通知 OpenGL ES 图形库顶点坐标</span>
        gl.<span class="me1">glVertexPointer</span><span class="br0">&#40;</span><span class="nu0">3</span>, GL10.<span class="me1">GL_FLOAT</span>, <span class="nu0">0</span>, vertex<span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="co1">//绘制点</span>
        gl.<span class="me1">glDrawArrays</span><span class="br0">&#40;</span>GL10.<span class="me1">GL_POINTS</span>, <span class="nu0">0</span>, <span class="nu0">3</span><span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="co1">//关闭 Pipeline 的Vectex 顶点“开关”</span>
        gl.<span class="me1">glDisableClientState</span><span class="br0">&#40;</span>GL10.<span class="me1">GL_VERTEX_ARRAY</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre>

<p>
5.在DrawPointActivity类中有几个知识点需要说明，FloatBuffer以及一些绘图指令，如glDrawArrays（）。OpenGL ES 为了提高性能，通常将顶点，颜色等值存放在 java.nio 包中定义的 Buffer 类中，其中包括FloatBuffer,IntBuffer, ShortBuffer,ByteBuffer等。其使用方式如下：
</p>
<pre class="code java">    <span class="co1">//定义顶点坐标</span>
    <span class="kw4">float</span><span class="br0">&#91;</span><span class="br0">&#93;</span> vertexArray <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw4">float</span><span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#123;</span>
            <span class="sy0">-</span>0.8f , <span class="sy0">-</span>0.4f <span class="sy0">*</span> 1.732f , 0.0f ,
            0.8f , <span class="sy0">-</span>0.4f <span class="sy0">*</span> 1.732f , 0.0f ,
            <span class="sy0">-</span>0.4f <span class="sy0">*</span> 1.732f , 0.0f
    <span class="br0">&#125;</span><span class="sy0">;</span>
    <span class="co1">//创建FloatBuffer对象，并把数据保存到FloatBuffer中，vertexArray.length表示定点数组长度，一个float占4个字节，故乘4，表示需要分配的地址空间</span>
    ByteBuffer vbb <span class="sy0">=</span> ByteBuffer.<span class="me1">allocateDirect</span><span class="br0">&#40;</span>vertexArray.<span class="me1">length</span> <span class="sy0">*</span> <span class="nu0">4</span><span class="br0">&#41;</span><span class="sy0">;</span>
    vbb.<span class="me1">order</span><span class="br0">&#40;</span>ByteOrder.<span class="me1">nativeOrder</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    FloatBuffer vertex <span class="sy0">=</span> vbb.<span class="me1">asFloatBuffer</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="co1">//将数据保存到FloatBuffer对象vertex中</span>
    vertex.<span class="me1">put</span><span class="br0">&#40;</span>vertexArray<span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="co1">//指向数组第一个元素</span>
    vertex.<span class="me1">position</span><span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>   </pre>

<p>
OpenGL ES 提供了两类方法来绘制一个空间几何图形：
</p>
<pre class="code java"><span class="co1">// 使用 VetexBuffer 来绘制，顶点的顺序由 vertexBuffer 中的顺序指定。</span>
<span class="kw1">public</span> <span class="kw1">abstract</span> <span class="kw4">void</span> glDrawArrays<span class="br0">&#40;</span><span class="kw4">int</span> mode, <span class="kw4">int</span> first, <span class="kw4">int</span> count<span class="br0">&#41;</span>
<span class="co1">//可以重新定义顶点的顺序，顶点的顺序由 indices Buffer 指定</span>
<span class="kw1">public</span> <span class="kw1">abstract</span> <span class="kw4">void</span> glDrawElements<span class="br0">&#40;</span><span class="kw4">int</span> mode, <span class="kw4">int</span> count, <span class="kw4">int</span> type, Buffer indices<span class="br0">&#41;</span></pre>

<p>
其中mode表示要绘制什么图形，如GL_POINTS,GL_LINES,GL_TRIANGLES等。
</p>

<p>
打开顶点开关和关闭顶点开关的方法如下：
</p>
<pre class="code java">gl.<span class="me1">glEnableClientState</span><span class="br0">&#40;</span>GL10.<span class="me1">GL_VERTEX_ARRAY</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
gl.<span class="me1">glDisableClientState</span><span class="br0">&#40;</span>GL10.<span class="me1">GL_VERTEX_ARRAY</span><span class="br0">&#41;</span><span class="sy0">;</span> </pre>

<p>
6.绘制20面体
</p>
<pre class="code java"><span class="kw1">package</span> <span class="co2">com.android.opengldemo.example</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">import</span> <span class="co2">android.os.Bundle</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">import</span> <span class="co2">java.nio.ByteBuffer</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">java.nio.ByteOrder</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">java.nio.FloatBuffer</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">java.nio.ShortBuffer</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">import</span> <span class="co2">javax.microedition.khronos.opengles.GL10</span><span class="sy0">;</span>
&nbsp;
&nbsp;
<span class="co3">/**
 * 
 * 20面体有12个顶点，20个面，30条边
 */</span>
<span class="kw1">public</span> <span class="kw1">class</span> DrawTweentyFaceActivity <span class="kw1">extends</span> OpenGLDemoActivity <span class="kw1">implements</span> IOpenGLDemo <span class="br0">&#123;</span>
&nbsp;
    <span class="co1">//顶点坐标</span>
    <span class="kw1">static</span> <span class="kw1">final</span> <span class="kw4">float</span> X <span class="sy0">=</span> .525731112119133606f<span class="sy0">;</span>
    <span class="kw1">static</span> <span class="kw1">final</span> <span class="kw4">float</span> Z <span class="sy0">=</span> .850650808352039932f<span class="sy0">;</span>
    <span class="kw1">static</span> <span class="kw4">float</span> vertices<span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw4">float</span><span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#123;</span>
            <span class="sy0">-</span>X,  0.0f,  Z,  <span class="co1">//v0</span>
             X,  0.0f,  Z,  <span class="co1">//v1</span>
            <span class="sy0">-</span>X,  0.0f, <span class="sy0">-</span>Z,  <span class="co1">//v2</span>
             X,  0.0f, <span class="sy0">-</span>Z,  <span class="co1">//v3</span>
            0.0f,   Z,  X,  <span class="co1">//v4</span>
            0.0f,   Z, <span class="sy0">-</span>X,  <span class="co1">//v5</span>
            0.0f,  <span class="sy0">-</span>Z,  X,  <span class="co1">//v6</span>
            0.0f,  <span class="sy0">-</span>Z, <span class="sy0">-</span>X,  <span class="co1">//v7</span>
               Z,  X, 0.0f, <span class="co1">//v8</span>
              <span class="sy0">-</span>Z,  X, 0.0f, <span class="co1">//v9</span>
               Z, <span class="sy0">-</span>X, 0.0f, <span class="co1">//v10</span>
              <span class="sy0">-</span>Z, <span class="sy0">-</span>X, 0.0f  <span class="co1">//v11</span>
    <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
    <span class="co1">//20面坐标</span>
    <span class="kw1">static</span> <span class="kw4">short</span> indices<span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw4">short</span><span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#123;</span>
            <span class="nu0">0</span>, <span class="nu0">4</span>, <span class="nu0">1</span>,    <span class="co1">//用v0,v4,v1三个顶点构建第一个三角形</span>
            <span class="nu0">0</span>, <span class="nu0">9</span>, <span class="nu0">4</span>,    <span class="co1">//用v0,v9,v4三个顶点构建第二个三角形</span>
            <span class="nu0">9</span>, <span class="nu0">5</span>, <span class="nu0">4</span>,
            <span class="nu0">4</span>, <span class="nu0">5</span>, <span class="nu0">8</span>,
            <span class="nu0">4</span>, <span class="nu0">8</span>, <span class="nu0">1</span>,
            <span class="nu0">8</span>, <span class="nu0">10</span>, <span class="nu0">1</span>,
            <span class="nu0">8</span>, <span class="nu0">3</span>, <span class="nu0">10</span>,
            <span class="nu0">5</span>, <span class="nu0">3</span>, <span class="nu0">8</span>,
            <span class="nu0">5</span>, <span class="nu0">2</span>, <span class="nu0">3</span>,
            <span class="nu0">2</span>, <span class="nu0">7</span>, <span class="nu0">3</span>,
            <span class="nu0">7</span>, <span class="nu0">10</span>, <span class="nu0">3</span>,
            <span class="nu0">7</span>, <span class="nu0">6</span>, <span class="nu0">10</span>,
            <span class="nu0">7</span>, <span class="nu0">11</span>, <span class="nu0">6</span>,
            <span class="nu0">11</span>, <span class="nu0">0</span>, <span class="nu0">6</span>,
            <span class="nu0">0</span>, <span class="nu0">1</span>, <span class="nu0">6</span>,
            <span class="nu0">6</span>, <span class="nu0">1</span>, <span class="nu0">10</span>,
            <span class="nu0">9</span>, <span class="nu0">0</span>, <span class="nu0">11</span>,
            <span class="nu0">9</span>, <span class="nu0">11</span>, <span class="nu0">2</span>,
            <span class="nu0">9</span>, <span class="nu0">2</span>, <span class="nu0">5</span>,
            <span class="nu0">7</span>, <span class="nu0">2</span>, <span class="nu0">11</span>  <span class="co1">//用v0,v9,v4三个顶点构建第20个三角形</span>
    <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
    <span class="co1">//顶点颜色坐标</span>
    <span class="kw4">float</span><span class="br0">&#91;</span><span class="br0">&#93;</span> colors <span class="sy0">=</span> <span class="br0">&#123;</span>
            0f, 0f, 0f, 1f,
            0f, 0f, 1f, 1f,
            0f, 1f, 0f, 1f,
            0f, 1f, 1f, 1f,
            1f, 0f, 0f, 1f,
            1f, 0f, 1f, 1f,
            1f, 1f, 0f, 1f,
            1f, 1f, 1f, 1f,
            1f, 0f, 0f, 1f,
            0f, 1f, 0f, 1f,
            0f, 0f, 1f, 1f,
            1f, 0f, 1f, 1f
    <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
&nbsp;
    @Override
    <span class="kw1">protected</span> <span class="kw4">void</span> onCreate<span class="br0">&#40;</span>Bundle savedInstanceState<span class="br0">&#41;</span> <span class="br0">&#123;</span>
        <span class="kw1">super</span>.<span class="me1">onCreate</span><span class="br0">&#40;</span>savedInstanceState<span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
&nbsp;
    @Override
    <span class="kw1">public</span> <span class="kw4">void</span> drawScene<span class="br0">&#40;</span>GL10 gl<span class="br0">&#41;</span> <span class="br0">&#123;</span>
        <span class="kw1">super</span>.<span class="me1">drawScene</span><span class="br0">&#40;</span>gl<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        <span class="kw4">int</span> angle <span class="sy0">=</span> <span class="nu0">5</span><span class="sy0">;</span>
&nbsp;
        <span class="co1">//使用FloatBuffer存储顶点数据</span>
        ByteBuffer vbb <span class="sy0">=</span> ByteBuffer.<span class="me1">allocateDirect</span><span class="br0">&#40;</span>vertices.<span class="me1">length</span><span class="sy0">*</span><span class="nu0">4</span><span class="br0">&#41;</span><span class="sy0">;</span>
        vbb.<span class="me1">order</span><span class="br0">&#40;</span>ByteOrder.<span class="me1">nativeOrder</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        FloatBuffer vertex <span class="sy0">=</span> vbb.<span class="me1">asFloatBuffer</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        vertex.<span class="me1">put</span><span class="br0">&#40;</span>vertices<span class="br0">&#41;</span><span class="sy0">;</span>
        vertex.<span class="me1">position</span><span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        <span class="co1">//使用ShortBuffer存储索引数据</span>
        vbb <span class="sy0">=</span> ByteBuffer.<span class="me1">allocateDirect</span><span class="br0">&#40;</span>indices.<span class="me1">length</span><span class="sy0">*</span><span class="nu0">2</span><span class="br0">&#41;</span><span class="sy0">;</span>
        vbb.<span class="me1">order</span><span class="br0">&#40;</span>ByteOrder.<span class="me1">nativeOrder</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        ShortBuffer index <span class="sy0">=</span> vbb.<span class="me1">asShortBuffer</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        index.<span class="me1">put</span><span class="br0">&#40;</span>indices<span class="br0">&#41;</span><span class="sy0">;</span>
        index.<span class="me1">position</span><span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        <span class="co1">//使用FloatBuffer存储颜色</span>
        vbb <span class="sy0">=</span> ByteBuffer.<span class="me1">allocateDirect</span><span class="br0">&#40;</span>colors.<span class="me1">length</span><span class="sy0">*</span><span class="nu0">4</span><span class="br0">&#41;</span><span class="sy0">;</span>
        vbb.<span class="me1">order</span><span class="br0">&#40;</span>ByteOrder.<span class="me1">nativeOrder</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        FloatBuffer color <span class="sy0">=</span> vbb.<span class="me1">asFloatBuffer</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        color.<span class="me1">put</span><span class="br0">&#40;</span>colors<span class="br0">&#41;</span><span class="sy0">;</span>
        color.<span class="me1">position</span><span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        gl.<span class="me1">glColor4f</span><span class="br0">&#40;</span>1.0f,0.0f,0.0f,1.0f<span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="co1">//设置单位矩阵</span>
        gl.<span class="me1">glLoadIdentity</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        gl.<span class="me1">glTranslatef</span><span class="br0">&#40;</span><span class="nu0">0</span>,<span class="nu0">0</span>, <span class="sy0">-</span><span class="nu0">4</span><span class="br0">&#41;</span><span class="sy0">;</span>
        gl.<span class="me1">glRotatef</span><span class="br0">&#40;</span>angle, <span class="nu0">0</span>, <span class="nu0">1</span>, <span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="co1">//设置逆时针方向为正方向</span>
        gl.<span class="me1">glFrontFace</span><span class="br0">&#40;</span>GL10.<span class="me1">GL_CCW</span><span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="co1">//如下两个命令可以达到忽略背面的效果，即不渲染back face</span>
        gl.<span class="me1">glEnable</span><span class="br0">&#40;</span>GL10.<span class="me1">GL_CULL_FACE</span><span class="br0">&#41;</span><span class="sy0">;</span>
        gl.<span class="me1">glCullFace</span><span class="br0">&#40;</span>GL10.<span class="me1">GL_BACK</span><span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="co1">//打开顶点开关</span>
        gl.<span class="me1">glEnableClientState</span><span class="br0">&#40;</span>GL10.<span class="me1">GL_VERTEX_ARRAY</span><span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="co1">//将顶点坐标传给 OpenGL 管道</span>
        gl.<span class="me1">glVertexPointer</span><span class="br0">&#40;</span><span class="nu0">3</span>,GL10.<span class="me1">GL_FLOAT</span>,<span class="nu0">0</span>,vertex<span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="co1">//打开颜色开关</span>
        gl.<span class="me1">glEnableClientState</span><span class="br0">&#40;</span>GL10.<span class="me1">GL_COLOR_ARRAY</span><span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="co1">//将颜色坐标传给openGL 管道</span>
        gl.<span class="me1">glColorPointer</span><span class="br0">&#40;</span><span class="nu0">4</span>,GL10.<span class="me1">GL_FLOAT</span>, <span class="nu0">0</span>, color<span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="co1">//绘制三角形</span>
        gl.<span class="me1">glDrawElements</span><span class="br0">&#40;</span>GL10.<span class="me1">GL_TRIANGLES</span>,indices.<span class="me1">length</span>,GL10.<span class="me1">GL_UNSIGNED_SHORT</span>,index<span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="co1">//关闭顶点开关</span>
        gl.<span class="me1">glDisableClientState</span><span class="br0">&#40;</span>GL10.<span class="me1">GL_VERTEX_ARRAY</span><span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="co1">//关闭颜色开关</span>
        gl.<span class="me1">glDisableClientState</span><span class="br0">&#40;</span>GL10.<span class="me1">GL_COLOR_ARRAY</span><span class="br0">&#41;</span><span class="sy0">;</span>
        gl.<span class="me1">glDisable</span><span class="br0">&#40;</span>GL10.<span class="me1">GL_CULL_FACE</span><span class="br0">&#41;</span><span class="sy0">;</span>
        angle <span class="sy0">+=</span> <span class="nu0">5</span><span class="sy0">;</span>
&nbsp;
    <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre>
