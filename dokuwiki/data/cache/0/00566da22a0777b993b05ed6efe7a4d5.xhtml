
<p>
1.新建层使用命令yocto-layer create layer_name
</p>

<p>
yangzhiwen@yzw-kingsee:yangzhiwen@yzw-kingsee:/home/work/workspace/fsl-release-bsp$ cd sources/
</p>

<p>
yangzhiwen@yzw-kingsee:/home/work/workspace/fsl-release-bsp/sources$ ls
</p>

<p>
base  meta-browser  meta-daiane  meta-fsl-arm  meta-fsl-arm-extra  meta-fsl-bsp-release  meta-fsl-demos  meta-openembedded  meta-qt5  poky
</p>

<p>
yangzhiwen@yzw-kingsee:/home/work/workspace/fsl-release-bsp/sources$ yocto-layer create elmo
</p>
<pre class="code bash">Please enter the layer priority you<span class="st_h">'d like to use for the layer: [default: 6]                         #优先级
Would you like to have an example recipe created? (y/n) [default: n] y                                #是否包含一个样例
Please enter the name you'</span>d like to use <span class="kw1">for</span> your example recipe: <span class="br0">&#91;</span>default: example<span class="br0">&#93;</span> elmo-example    <span class="co0">#样例名字</span>
Would you like to have an example bbappend <span class="kw2">file</span> created? <span class="br0">&#40;</span>y<span class="sy0">/</span>n<span class="br0">&#41;</span> <span class="br0">&#91;</span>default: n<span class="br0">&#93;</span> y                        <span class="co0">#是否创建样例的bbappend文件</span>
Please enter the name you<span class="st_h">'d like to use for your bbappend file: [default: example] elmo-example        #样例的bbappend名字
Please enter the version number you'</span>d like to use <span class="kw1">for</span> your bbappend <span class="kw2">file</span> <span class="br0">&#40;</span>this should match the recipe you<span class="st_h">'re appending to): [default: 0.1]    #版本号
&nbsp;
New layer created in meta-elmo.
&nbsp;
Don'</span>t forget to add it to your BBLAYERS <span class="br0">&#40;</span><span class="kw1">for</span> details see meta-elmo\README<span class="br0">&#41;</span>.</pre>

<p>
yangzhiwen@yzw-kingsee:/home/work/workspace/fsl-release-bsp/sources$
</p>

<p>
2.到此为止，已经建好层了，并且已经有个Demo,先睹为快
</p>

<p>
yangzhiwen@yzw-kingsee:/home/work/workspace/fsl-release-bsp/sources$ ls
</p>

<p>
base  meta-browser  meta-daiane  meta-elmo  meta-fsl-arm  meta-fsl-arm-extra  meta-fsl-bsp-release  meta-fsl-demos  meta-openembedded  meta-qt5  poky
</p>

<p>
yangzhiwen@yzw-kingsee:/home/work/workspace/fsl-release-bsp/sources$ cd meta-elmo/
</p>

<p>
yangzhiwen@yzw-kingsee:/home/work/workspace/fsl-release-bsp/sources/meta-elmo$ ls
</p>

<p>
conf  COPYING.MIT  README  recipes-example  recipes-example-bbappend
</p>

<p>
yangzhiwen@yzw-kingsee:/home/work/workspace/fsl-release-bsp/sources/meta-elmo$ cd recipes-example/example/
</p>

<p>
yangzhiwen@yzw-kingsee:/home/work/workspace/fsl-release-bsp/sources/meta-elmo/recipes-example/example$ ls
</p>

<p>
elmo-example-0.1  elmo-example_0.1.bb
yangzhiwen@yzw-kingsee:/home/work/workspace/fsl-release-bsp/sources/meta-elmo/recipes-example/example$ ls elmo-example-0.1/
</p>

<p>
example.patch  helloworld.c
</p>

<p>
yangzhiwen@yzw-kingsee:/home/work/workspace/fsl-release-bsp/sources/meta-elmo/recipes-example/example$ cat elmo-example-0.1/helloworld.c
</p>
<pre class="code bash"><span class="co0">#include &lt;stdio.h&gt;</span>
int main<span class="br0">&#40;</span>int argc, char <span class="sy0">**</span>argv<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
    <span class="kw3">printf</span><span class="br0">&#40;</span><span class="st0">&quot;Hello World!<span class="es1">\n</span>&quot;</span><span class="br0">&#41;</span>;
    <span class="kw3">return</span> <span class="nu0">0</span>;
&nbsp;
<span class="br0">&#125;</span></pre>

<p>
yangzhiwen@yzw-kingsee:/home/work/workspace/fsl-release-bsp/sources/meta-elmo/recipes-example/example$ cat elmo-example-0.1/example.patch
</p>
<pre class="code bash"><span class="co0">#</span>
<span class="co0"># This is a non-functional placeholder file, here for example purposes</span>
<span class="co0"># only.</span>
<span class="co0">#</span>
<span class="co0"># If you had a patch for your recipe, you'd put it in this directory</span>
<span class="co0"># and reference it from your recipe's SRC_URI:</span>
<span class="co0">#</span>
<span class="co0">#  SRC_URI += &quot;file://example.patch&quot;</span>
<span class="co0">#</span>
<span class="co0"># Note that you could also rename the directory containing this patch</span>
<span class="co0"># to remove the version number or simply rename it 'files'.  Doing so</span>
<span class="co0"># allows you to use the same directory for multiple recipes.</span></pre>

<p>
yangzhiwen@yzw-kingsee:/home/work/workspace/fsl-release-bsp/sources/meta-elmo/recipes-example/example$
</p>

<p>
yangzhiwen@yzw-kingsee:/home/work/workspace/fsl-release-bsp/sources/meta-elmo/recipes-example/example$ cat elmo-example_0.1.bb
</p>
<pre class="code bash"><span class="co0">#</span>
<span class="co0"># This file was derived from the 'Hello World!' example recipe in the</span>
<span class="co0"># Yocto Project Development Manual.</span>
<span class="co0">#</span>
&nbsp;
DESCRIPTION = <span class="st0">&quot;Simple helloworld application&quot;</span>
SECTION = <span class="st0">&quot;examples&quot;</span>
LICENSE = <span class="st0">&quot;MIT&quot;</span>
LIC_FILES_CHKSUM = <span class="st0">&quot;file://<span class="es3">${COMMON_LICENSE_DIR}</span>/MIT;md5=0835ade698e0bcf8506ecda2f7b4f302&quot;</span>
PR = <span class="st0">&quot;r0&quot;</span>
&nbsp;
SRC_URI = <span class="st0">&quot;file://helloworld.c&quot;</span>
&nbsp;
S = <span class="st0">&quot;<span class="es3">${WORKDIR}</span>&quot;</span>
&nbsp;
do_compile<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
             <span class="co1">${CC}</span> helloworld.c <span class="re5">-o</span> helloworld
<span class="br0">&#125;</span>
&nbsp;
do_install<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
             <span class="kw2">install</span> <span class="re5">-d</span> <span class="co1">${D}</span><span class="co1">${bindir}</span>
             <span class="kw2">install</span> <span class="re5">-m</span> 0755 helloworld <span class="co1">${D}</span><span class="co1">${bindir}</span>
<span class="br0">&#125;</span></pre>

<p>
3.编译我们所建层的recipes,方法：bitbake bbappend_name
</p>

<p>
yangzhiwen@yzw-kingsee:/home/work/workspace/fsl-release-bsp/sources/meta-elmo/recipes-example/example$ cd ../../../../build_qt5
</p>

<p>
yangzhiwen@yzw-kingsee:/home/work/workspace/fsl-release-bsp/build_qt5$ bitbake elmo-example
</p>
<pre class="code bash">Loading cache: <span class="nu0">100</span><span class="sy0">%</span> <span class="sy0">|</span><span class="co0">###################################################################################################################################| ETA:  00:00:00</span>
Loaded <span class="nu0">2566</span> entries from dependency cache.
Parsing recipes: <span class="nu0">100</span><span class="sy0">%</span> <span class="sy0">|</span><span class="co0">#################################################################################################################################| Time: 00:00:01</span>
Parsing of <span class="nu0">2049</span> .bb files <span class="kw3">complete</span> <span class="br0">&#40;</span><span class="nu0">2028</span> cached, <span class="nu0">21</span> parsed<span class="br0">&#41;</span>. <span class="nu0">2564</span> targets, <span class="nu0">157</span> skipped, <span class="nu0">3</span> masked, <span class="nu0">0</span> errors.
ERROR: Nothing PROVIDES <span class="st_h">'elmo-example'</span>
&nbsp;
Summary: There was <span class="nu0">1</span> ERROR message shown, returning a non-zero <span class="kw3">exit</span> code.</pre>

<p>
报错找不到我们的elmo-example,原因是我们没有加进fsl-image-qt5,先加进去
</p>

<p>
yangzhiwen@yzw-kingsee:/home/work/workspace/fsl-release-bsp/build_qt5$ vi conf/bblayers.conf
</p>
<pre class="code bash">LCONF_VERSION = <span class="st0">&quot;6&quot;</span>
&nbsp;
BBPATH = <span class="st0">&quot;<span class="es3">${TOPDIR}</span>&quot;</span>
BSPDIR := <span class="st0">&quot;<span class="es3">${@os.path.abspath(os.path.dirname(d.getVar('FILE', True)) + '/../..')}</span>&quot;</span>
&nbsp;
BBFILES ?= <span class="st0">&quot;&quot;</span>
BBLAYERS = <span class="st0">&quot; <span class="es1">\
</span>  <span class="es3">${BSPDIR}</span>/sources/poky/meta <span class="es1">\
</span>  <span class="es3">${BSPDIR}</span>/sources/poky/meta-yocto <span class="es1">\
</span>  <span class="es1">\
</span>  <span class="es3">${BSPDIR}</span>/sources/meta-openembedded/meta-oe <span class="es1">\
</span>  <span class="es3">${BSPDIR}</span>/sources/meta-openembedded/meta-multimedia <span class="es1">\
</span>  <span class="es1">\
</span>  <span class="es3">${BSPDIR}</span>/sources/meta-fsl-arm <span class="es1">\
</span>  <span class="es3">${BSPDIR}</span>/sources/meta-fsl-arm-extra <span class="es1">\
</span>  <span class="es3">${BSPDIR}</span>/sources/meta-fsl-demos <span class="es1">\
</span>&quot;</span>
<span class="co0">##Freescale Yocto Release layer</span>
BBLAYERS += <span class="st0">&quot; <span class="es3">${BSPDIR}</span>/sources/meta-fsl-bsp-release/imx/meta-bsp &quot;</span>
BBLAYERS += <span class="st0">&quot; <span class="es3">${BSPDIR}</span>/sources/meta-fsl-bsp-release/imx/meta-sdk &quot;</span>
BBLAYERS += <span class="st0">&quot; <span class="es3">${BSPDIR}</span>/sources/meta-browser &quot;</span>
BBLAYERS += <span class="st0">&quot; <span class="es3">${BSPDIR}</span>/sources/meta-openembedded/meta-gnome &quot;</span>
BBLAYERS += <span class="st0">&quot; <span class="es3">${BSPDIR}</span>/sources/meta-openembedded/meta-networking &quot;</span>
BBLAYERS += <span class="st0">&quot; <span class="es3">${BSPDIR}</span>/sources/meta-openembedded/meta-python &quot;</span>
BBLAYERS += <span class="st0">&quot; <span class="es3">${BSPDIR}</span>/sources/meta-openembedded/meta-ruby &quot;</span>
BBLAYERS += <span class="st0">&quot; <span class="es3">${BSPDIR}</span>/sources/meta-openembedded/meta-filesystems &quot;</span>
BBLAYERS += <span class="st0">&quot; <span class="es3">${BSPDIR}</span>/sources/meta-qt5 &quot;</span>
BBLAYERS += <span class="st0">&quot; <span class="es3">${BSPDIR}</span>/sources/meta-elmo &quot;</span></pre>

<p>
再次编译
</p>

<p>
yangzhiwen@yzw-kingsee:/home/work/workspace/fsl-release-bsp/build_qt5$ bitbake elmo-example
</p>
<pre class="code bash">Parsing recipes: <span class="nu0">100</span><span class="sy0">%</span> <span class="sy0">|</span><span class="co0">#################################################################################################################################| Time: 00:01:06</span>
Parsing of <span class="nu0">2050</span> .bb files <span class="kw3">complete</span> <span class="br0">&#40;</span><span class="nu0">0</span> cached, <span class="nu0">2050</span> parsed<span class="br0">&#41;</span>. <span class="nu0">2565</span> targets, <span class="nu0">157</span> skipped, <span class="nu0">3</span> masked, <span class="nu0">0</span> errors.
NOTE: Resolving any missing task queue dependencies
&nbsp;
Build Configuration:
BB_VERSION        = <span class="st0">&quot;1.26.0&quot;</span>
BUILD_SYS         = <span class="st0">&quot;x86_64-linux&quot;</span>
NATIVELSBSTRING   = <span class="st0">&quot;Ubuntu-14.04&quot;</span>
TARGET_SYS        = <span class="st0">&quot;arm-poky-linux-gnueabi&quot;</span>
MACHINE           = <span class="st0">&quot;imx6ulevk&quot;</span>
DISTRO            = <span class="st0">&quot;poky&quot;</span>
DISTRO_VERSION    = <span class="st0">&quot;1.8&quot;</span>
TUNE_FEATURES     = <span class="st0">&quot;arm armv7a vfp neon callconvention-hard cortexa7&quot;</span>
TARGET_FPU        = <span class="st0">&quot;vfp-neon&quot;</span>
meta              
meta-yocto        = <span class="st0">&quot;(nobranch):83aa565d93aacae484976562ef1ae8dbbb6b2bc0&quot;</span>
meta-oe           
meta-multimedia   = <span class="st0">&quot;(nobranch):10d3c8f85280a0bf867a8e4f84bcda81c290d28e&quot;</span>
meta-fsl-arm      = <span class="st0">&quot;(nobranch):c5326c90d6754c8630504ae29244907b0841c3a9&quot;</span>
meta-fsl-arm-extra = <span class="st0">&quot;(nobranch):436b86e3421736216412bdbb21cd9cb08c758c75&quot;</span>
meta-fsl-demos    = <span class="st0">&quot;(nobranch):836bdf5a9d500ed258f1ddc07d89eca74a704098&quot;</span>
meta-bsp          
meta-sdk          = <span class="st0">&quot;(nobranch):2f59ef1080f616f391b1c488fb2204e570f90239&quot;</span>
meta-browser      = <span class="st0">&quot;(nobranch):4b27058a8275a5310161459c9bb8f4c52a77762c&quot;</span>
meta-gnome        
meta-networking   
meta-python       
meta-ruby         
meta-filesystems  = <span class="st0">&quot;(nobranch):10d3c8f85280a0bf867a8e4f84bcda81c290d28e&quot;</span>
meta-qt5          = <span class="st0">&quot;(nobranch):fc026381545650e10fdd488d5b2a3b2d78f87793&quot;</span>
meta-elmo         = <span class="st0">&quot;&lt;unknown&gt;:&lt;unknown&gt;&quot;</span>
&nbsp;
NOTE: Preparing RunQueue
NOTE: Executing SetScene Tasks
NOTE: Executing RunQueue Tasks
NOTE: Tasks Summary: Attempted <span class="nu0">371</span> tasks of <span class="kw2">which</span> <span class="nu0">358</span> didn<span class="st_h">'t need to be rerun and all succeeded.</span></pre>

<p>
编译文件在tmp/work/cortexa7hf-vfp-neon-poky-linux-gnueabi/elmo-example/0.1-r0
</p>

<p>
yangzhiwen@yzw-kingsee:/home/work/workspace/fsl-release-bsp/build_qt5$ ls tmp/work/cortexa7hf-vfp-neon-poky-linux-gnueabi/elmo-example/0.1-r0
</p>

<p>
configure.sstate   elmo-example.<abbr title="specification">spec</abbr>  image            packages-split  sstate-install-packagedata        sstate-install-populate_lic      temp
debugsources.list  helloworld         license-destdir  pkgdata         sstate-install-package_qa         sstate-install-populate_sysroot
deploy-rpms        helloworld.c       package          pseudo          sstate-install-package_write_rpm  sysroot-destdir
</p>

<p>
yangzhiwen@yzw-kingsee:/home/work/workspace/fsl-release-bsp/build_qt5$ cat tmp/work/cortexa7hf-vfp-neon-poky-linux-gnueabi/elmo-example/0.1-r0/helloworld.c
</p>
<pre class="code bash"><span class="co0">#include &lt;stdio.h&gt;</span>
int main<span class="br0">&#40;</span>int argc, char <span class="sy0">**</span>argv<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
    <span class="kw3">printf</span><span class="br0">&#40;</span><span class="st0">&quot;Hello World!<span class="es1">\n</span>&quot;</span><span class="br0">&#41;</span>;
    <span class="kw3">return</span> <span class="nu0">0</span>;
<span class="br0">&#125;</span></pre>

<p>
OK了，但此时文件系统里并没有我们的helloworld,先看看镜像中有没有Helloworld
</p>

<p>
yangzhiwen@yzw-kingsee:/home/work/workspace/fsl-release-bsp/build_qt5$ sudo mount -o loop -t ext3 tmp/deploy/images/imx6ulevk/fsl-image-qt5-imx6ulevk.ext3 /home/work/rootfs/
</p>

<p>
[sudo] password for yangzhiwen:
</p>

<p>
yangzhiwen@yzw-kingsee:/home/work/workspace/fsl-release-bsp/build_qt5$ ls /home/work/rootfs/usr/bin/helloworld
</p>

<p>
ls: cannot access /home/work/rootfs/usr/bin/helloworld: No such file or directory
</p>

<p>
yangzhiwen@yzw-kingsee:/home/work/workspace/fsl-release-bsp/build_qt5$ sudo umount /home/work/rootfs
</p>

<p>
yangzhiwen@yzw-kingsee:/home/work/workspace/fsl-release-bsp/build_qt5$
</p>

<p>
因为我们的APP没有加进系统，现在我们加进去。
</p>

<p>
yangzhiwen@yzw-kingsee:/home/work/workspace/fsl-release-bsp/build_qt5$ vi ../sources/meta-elmo/conf/layer.conf
</p>
<pre class="code bash"><span class="co0"># We have a conf and classes directory, add to BBPATH</span>
BBPATH .= <span class="st0">&quot;:<span class="es3">${LAYERDIR}</span>&quot;</span>
&nbsp;
<span class="co0"># We have recipes-* directories, add to BBFILES</span>
BBFILES += <span class="st0">&quot;<span class="es3">${LAYERDIR}</span>/recipes-*/*/*.bb <span class="es1">\
</span>        <span class="es3">${LAYERDIR}</span>/recipes-*/*/*.bbappend&quot;</span>
&nbsp;
IMAGE_INSTALL_append += <span class="st0">&quot;elmo-example&quot;</span>        <span class="co0">#添加此语句</span>
&nbsp;
BBFILE_COLLECTIONS += <span class="st0">&quot;elmo&quot;</span>
BBFILE_PATTERN_elmo = <span class="st0">&quot;^<span class="es3">${LAYERDIR}</span>/&quot;</span>
BBFILE_PRIORITY_elmo = <span class="st0">&quot;6&quot;</span>
~  </pre>

<p>
再编译,然后我们看看文件系统镜像：
</p>

<p>
yangzhiwen@yzw-kingsee:/home/work/workspace/fsl-release-bsp/build_qt5$ bitbake fsl-image-qt5
</p>

<p>
/*省略编译过程,直接看结果*/
</p>

<p>
yangzhiwen@yzw-kingsee:/home/work/workspace/fsl-release-bsp/build_qt5$ sudo mount -o loop -t ext3 tmp/deploy/images/imx6ulevk/fsl-image-qt5-imx6ulevk.ext3 /home/work/rootfs/
</p>

<p>
yangzhiwen@yzw-kingsee:/home/work/workspace/fsl-release-bsp/build_qt5$ ls /home/work/rootfs/usr/bin/helloworld
</p>

<p>
/home/work/rootfs/usr/bin/helloworld
</p>

<p>
yangzhiwen@yzw-kingsee:/home/work/workspace/fsl-release-bsp/build_qt5$
</p>

<p>
4.我们烧到板子上看看是否正确，minicom
Poky (Yocto Project Reference Distro) 1.8 imx6ulevk /dev/ttymxc0
</p>

<p>
imx6ulevk login: root
root@imx6ulevk:~# helloworld
Hello World!
root@imx6ulevk:~#
</p>

<p>
OK了。其他自己写的应用可以参照这个recipes的样板加入到文件系统。
</p>
