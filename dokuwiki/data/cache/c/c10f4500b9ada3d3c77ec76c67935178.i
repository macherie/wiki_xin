a:42:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:0;}i:2;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"---";}i:2;i:1;}i:3;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:4;}i:4;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:5;}i:5;a:3:{i:0;s:9:"emaillink";i:1;a:2:{i:0;s:19:"kemeng.yang@sim.com";i:1;s:9:"杨克猛";}i:2;i:7;}i:6;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" 2014/2/17";}i:2;i:40;}i:7;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:50;}i:8;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:52;}i:9;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:53;}i:10;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:15:"CIT设计框架";i:1;i:2;i:2;i:53;}i:2;i:53;}i:11;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:53;}i:12;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:53;}i:13;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:242:"CIT是一个工厂测试软件，测试手机的各个功能，比如测试SIM卡、SD卡读写、Camera、Mic等等。经过我的改造和设计，它变得简单、可靠、扩展性强和可复用性高，下面讲讲它的设计架构。";}i:2;i:79;}i:14;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:321;}i:15;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:321;}i:16;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:23:":android:cit_desing.jpg";i:1;s:0:"";i:2;N;i:3;s:3:"700";i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:323;}i:17;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:355;}i:18;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:355;}i:19;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:588:"上图是CIT的框架图，TestActivity是所有测试类的基类，它负责“成功”、“失败”按钮的显示以及测试结果的提示。SIM卡、SD卡、Speaker等类均继承TestActivity，负责具体的测试工作。
CITTestHelper是一个辅助类，它负责读取配置表，根据不同的项目生成测试链表，发起相应的Activity, 并能够自动判定当前是自动测试还是单项测试，并将结果写入NV。
配置表是一个XML文件，每一个项目对应一个配置表。它规定该项目测试哪些项功能，它的设计也很简单。";}i:2;i:357;}i:20;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:945;}i:21;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:160:" 示例1：
      <FunctionItem
          name="SDCard"
          auto="true"
          packageName="com.android.sim.testitem.SDCardTest">
      </FunctionItem>";}i:2;i:945;}i:22;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:945;}i:23;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:"该项表明测试一个具体功能";}i:2;i:1119;}i:24;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"---";}i:2;i:1155;}i:25;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:208:"SD卡，name决定界面上显示的名称，auto为true，表明它需要测试，否则将不会测试，packageName指定该Activity所在的路径，CITTestHelper将根据这些信息发起这个Activity,";}i:2;i:1158;}i:26;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1366;}i:27;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:143:"示例2：
      <FunctionItem
          name="PCBA Auto test"
          auto="true"
          packageName="PCB|NORMAL" >
      </FunctionItem>";}i:2;i:1366;}i:28;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1366;}i:29;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:235:"这个例子跟上个不同，它的packageName不是一个路径，它表明当前要进行PCB自动测试，它是一个普通测试，不包括sensor测试。CITTestHelper将发起一连串的Activity，测试完毕结果写入NV。";}i:2;i:1523;}i:30;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1758;}i:31;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1758;}i:32;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:460:"采用配置表，使得CIT变得非常灵活，根据不同的项目测试不同的功能，代码简单且复用性高，扩展也容易，而且不同项目的CIT互不干扰，互不影响。
CITMain是CIT的入口类，初始化的时候通过CITTestHelper载入测试链表。用户点击，CITTestHelper解析，发起PCB或整机测试Activity, PCB和整机测试一样载入相应的测试链表，解析事件，发起具体的Activity进行测试。";}i:2;i:1763;}i:33;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2223;}i:34;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2223;}i:35;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:386:"如果要增加一项新的功能测试，应该怎么做呢？只需要编写具体的Activity和添加相应的资源文件，AndroidManifest中注册，配置表中添加它就可以了。
如果要增加一个新项目的CIT测试，需要增加一个配置表，设计好各个测试项的顺序和路径就可以，如果有的测试项的Activity没有，需要重新设计它。";}i:2;i:2225;}i:36;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2611;}i:37;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2611;}i:38;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:444:"一个软件的简单性、可靠性、扩展性实际上是由你的设计框架决定的。如果设计得好，它会变得简单、可靠，易扩展，反之它会让人痛苦不堪。设计一个软件总会有许多方法和框架可用，但只有一种是最合适的，《设计模式》和《重构》提供了许多方法，但是编程中最重要的是一颗责任心，精益求精的态度才能设计出一个优秀的软件！";}i:2;i:2613;}i:39;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3057;}i:40;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3058;}i:41;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:3058;}}