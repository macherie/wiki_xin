a:74:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:10:"Git rebase";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1;}i:4;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:122:"当本地commit一个提交和远端服务器中的代码有冲突(别人也改了相同的文件)时可以在pull 中加 ";}i:2;i:27;}i:5;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:149;}i:6;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:38:"rebase。加上 rebase 的意思是：";}i:2;i:151;}i:7;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:189;}i:8;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:19:"
git pull --rebase
";i:1;s:4:"bash";i:2;N;}i:2;i:196;}i:9;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:229;}i:10;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:229;}i:11;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:229;}i:12;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:59:" 把本地 repo. 从上次 pull 之后的变更暂存起來";}i:2;i:233;}i:13;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:292;}i:14;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:292;}i:15;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:292;}i:16;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:292;}i:17;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:" 恢复到上次 pull 时的状态";}i:2;i:296;}i:18;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:330;}i:19;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:330;}i:20;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:330;}i:21;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:330;}i:22;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:" 合并远端的变更到本地";}i:2;i:334;}i:23;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:365;}i:24;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:365;}i:25;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:365;}i:26;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:365;}i:27;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:49:" 最后再合并刚刚暂存下來的本地变更";}i:2;i:369;}i:28;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:418;}i:29;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:418;}i:30;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:418;}i:31;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:418;}i:32;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:420;}i:33;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"合并前：";}i:2;i:422;}i:34;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:434;}i:35;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:436;}i:36;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:442;}i:37;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:55:"
      D---E master
     /
A---B---C---F origin/master
";i:1;N;i:2;N;}i:2;i:442;}i:38;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:442;}i:39;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:507;}i:40;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:"使用 merge 合并后：";}i:2;i:509;}i:41;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:534;}i:42;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:536;}i:43;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:542;}i:44;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:81:"
      D--------E  
     /          \
A---B---C---F----G   master, origin/master
";i:1;N;i:2;N;}i:2;i:542;}i:45;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:542;}i:46;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:633;}i:47;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:56:"如果是 rebase 的方式，就不會有 G 合并点：";}i:2;i:635;}i:48;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:691;}i:49;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:693;}i:50;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:699;}i:51;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:49:"
A---B---C---F---D'---E'   master, origin/master
";i:1;N;i:2;N;}i:2;i:699;}i:52;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:699;}i:53;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:119:"注意到，其中 D’, E’ 的 commit SHA 序号跟本來 D, E 是不同的，应为算是砍掉重新 commit 了。";}i:2;i:758;}i:54;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:877;}i:55;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:880;}i:56;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:16:"rebase vs. merge";i:1;i:2;i:2;i:880;}i:2;i:880;}i:57;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:880;}i:58;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:880;}i:59;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:526:"rebase 跟 merge 类似，出现 conflict 会暂停 rebase 动作，需要你手动修复后，然后才可以继续动作。
这也是 rebase 比 merge 复杂一点的地方：merge 如果发生 conflict，你只需要解决冲突一次，然后
commit 出去就完成了。而 rebase 的 conflict 可能会发生在上述步骤 4 的每一次重新套用上，所以可能
需要解决冲突好几次 (rebase 时所谓的解决冲突，其实是直接修改你之前的变更內容，所以上图中变成 D’ 跟 E’ )。";}i:2;i:909;}i:60;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1435;}i:61;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1439;}i:62;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:6:"配置";i:1;i:2;i:2;i:1439;}i:2;i:1439;}i:63;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1439;}i:64;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1439;}i:65;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:82:"如果想要把 rebase 当做 git pull 的默认值，可以在 .git/config 加上";}i:2;i:1458;}i:66;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1540;}i:67;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:81:"
[branch "master"]
  remote = origin
  merge = refs/heads/master
  rebase = true
";i:1;s:4:"bash";i:2;N;}i:2;i:1547;}i:68;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1547;}i:69;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:95:"也可以直接加到 ~/.gitconfig 让所有的 tracked branches 都自动套用这个设定：";}i:2;i:1644;}i:70;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1745;}i:71;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:39:"
[branch]  
  autosetuprebase = always
";i:1;s:4:"bash";i:2;N;}i:2;i:1745;}i:72;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1797;}i:73;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:1797;}}