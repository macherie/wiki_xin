
<h1 class="sectionedit1" id="scm管理">SCM管理</h1>
<div class="level1">

</div>
<!-- EDIT1 SECTION "SCM管理" [1-22] -->
<h2 class="sectionedit2" id="代码下载权限管理">代码下载权限管理</h2>
<div class="level2">

<p>
通过对 gitolite-admin 库中文件修改管理代码下载权限
</p>

<p>
下载 gitolite-admin 库：
</p>
<pre class="code">git@192.167.100.232:gitolite-admin.git</pre>

<p>
conf/gitolite.conf为管理文件，管理哪些库有哪些权限。
</p>

<p>
如需新加 ssh key，把 ssh key 的公钥放到 keydir 下并提交。
</p>

</div>
<!-- EDIT2 SECTION "代码下载权限管理" [23-356] -->
<h2 class="sectionedit3" id="新建版本库">新建版本库</h2>
<div class="level2">

</div>
<!-- EDIT3 SECTION "新建版本库" [357-382] -->
<h4 class="sectionedit4" id="在代码服务器上创建新库">1. 在代码服务器上创建新库</h4>
<div class="level4">

<p>
<strong>Gitolite+Gerrit服务器结构</strong>
</p>

<p>
在gitolite-admin库中修改conf/gitolite.conf文件，加入新的git库。例：
</p>
<pre class="code">repo    platform/vendor/qcom/i501
        R       =   @all
        RW+     =   gerrit2</pre>

<p>
<strong>Git+Gerrit服务器结构</strong>
</p>
<pre class="code">ssh -p 29418 192.167.100.232 gerrit create-project --name platform/vendor/qcom/i501.git</pre>

</div>
<!-- EDIT4 SECTION "1. 在代码服务器上创建新库" [383-785] -->
<h4 class="sectionedit5" id="修改manifest文件">2. 修改manifest文件</h4>
<div class="level4">

<p>
例：
</p>
<pre class="code">cd .repo/manifests
vim default.xml</pre>

<p>
在manifest文件中加入
</p>
<pre class="code">&lt;project name=&quot;platform/vendor/qcom/i501&quot; path=&quot;device/qcom/i501&quot;/&gt;</pre>

<p>
提交修改：
</p>
<pre class="code">git add default.xml
git commit -m &quot;Add new project i501&quot;
git push ssh://yourname@192.167.100.232:29418/platform/manifest HEAD:refs/for/QRD8939_KK</pre>

</div>
<!-- EDIT5 SECTION "2. 修改manifest文件" [786-1162] -->
<h4 class="sectionedit6" id="把manifest的修改合入代码库">3. 把manifest的修改合入代码库</h4>
<div class="level4">

<p>
登陆gerrit，review并submit修改
</p>

</div>
<!-- EDIT6 SECTION "3. 把manifest的修改合入代码库" [1163-1245] -->
<h4 class="sectionedit7" id="把代码提交到代码库">4. 把代码提交到代码库</h4>
<div class="level4">

<p>
在要提交的代码中
</p>
<pre class="code">git init
git add .
git commit -m &quot;init&quot;
git push ssh://yourname@192.167.100.232:29418/platform/vendor/qcom/i501 HEAD:refs/heads/QRD8939_KK</pre>

</div>
<!-- EDIT7 SECTION "4. 把代码提交到代码库" [1246-1462] -->
<h2 class="sectionedit8" id="gerrit服务器新建分支">gerrit服务器新建分支</h2>
<div class="level2">

<p>
<span style='color:red; '> 确认服务器同一个git库中没有同名分支</span>
</p>

</div>
<!-- EDIT8 SECTION "gerrit服务器新建分支" [1463-1572] -->
<h4 class="sectionedit9" id="在本地新建分支并提交到服务器分支">2. 在本地新建分支并提交到服务器分支</h4>
<div class="level4">
<pre class="code">新建本地分支
repo start aaa --all
新建分支别名
repo forall -c &#039;git remote add sim-ssh ssh://yourname@192.167.100.232:29418/$REPO_PROJECT.git $@&#039;
提交本地分支到服务器分支，服务器会新建不存在的分支
repo forall -c &#039;git push sim-ssh -f aaa:bbb&#039;
aaa:本地分支，bbb:gerrit新建分支</pre>

</div>
<!-- EDIT9 SECTION "2. 在本地新建分支并提交到服务器分支" [1573-1966] -->
<h2 class="sectionedit10" id="gerrit服务器新建project">gerrit服务器新建project</h2>
<div class="level2">

<p>
<span style='color:red; '> 确认服务器没有同名project</span>
</p>

</div>
<!-- EDIT10 SECTION "gerrit服务器新建project" [1967-2060] -->
<h4 class="sectionedit11" id="gitolite-admin中新建项目库并提交">1.gitolite-admin中新建项目库并提交</h4>
<div class="level4">
<pre class="code"> 在gitolite-admin库中修改conf/gitolite.conf文件，加入新的git库。例：
 repo   aaa/bbb
        R       =   @all
        RW+     =   gerrit2</pre>

<p>
<span style='color:red; '>提交后会在服务器上git用户目录repositories下新建一个aaa/bbb.git库</span>
</p>

</div>
<!-- EDIT11 SECTION "1.gitolite-admin中新建项目库并提交" [2061-2383] -->
<h4 class="sectionedit12" id="gerrit2上创建软链接到bbbgit库">2.gerrit2上创建软链接到bbb.git库</h4>
<div class="level4">
<pre class="code">1.切换到gerrit2账户到review_site/git/目录
2.创建链接到bbb.git
ln -s /home/git/repositories/aaa/bbb.git</pre>

</div>
<!-- EDIT12 SECTION "2.gerrit2上创建软链接到bbb.git库" [2384-2562] -->
<h4 class="sectionedit13" id="重启gerrit服务器">3.重启gerrit服务器</h4>
<div class="level4">
<pre class="code">cd /etc/init.d
./gerrit.sh restart</pre>

</div>
<!-- EDIT13 SECTION "3.重启gerrit服务器" [2563-2643] -->
<h2 class="sectionedit14" id="创建远程库别名">创建远程库别名</h2>
<div class="level2">
<pre class="code">repo forall -c &#039;git remote add sim-ssh ssh://yourname@192.167.100.232:29418/$REPO_PROJECT.git $@&#039;</pre>

<p>
<strong>只需修改<span style='color:red; '>yourname</span>为自己的名字</strong>
</p>

</div>
<!-- EDIT14 SECTION "创建远程库别名" [2644-2850] -->
<h2 class="sectionedit15" id="生成及应用patch">生成及应用patch</h2>
<div class="level2">

</div>
<!-- EDIT15 SECTION "生成及应用patch" [2851-2881] -->
<h4 class="sectionedit16" id="git_format-patch">git format-patch</h4>
<div class="level4">

<p>
用 git format-patch 生成 patch
</p>

<p>
某次提交以后的所有patch:
</p>
<pre class="code">git format-patch 4e16                --4e16指的是commit名</pre>

<p>
某两次提交之间的所有patch:
</p>
<pre class="code">git format-patch 365a..4e16      --365a和4e16分别对应两次提交的名称</pre>

</div>
<!-- EDIT16 SECTION "git format-patch" [2882-3185] -->
<h4 class="sectionedit17" id="git_am">git am</h4>
<div class="level4">

<p>
用 git am 应用 patch。
</p>

<p>
在使用 git am 之前， 你要首先 git am –abort 一次，来放弃掉以前的am信息，这样才可以进行一次全新的am。
不然会遇到这样的错误。
</p>

<p>
.git/rebase-apply still exists but mbox given.
</p>

<p>
git-am 可以一次合并一个文件，或者一个目录下所有的patch
例：
</p>
<pre class="code">git-am ~/patch/0001-trival-patch.patch</pre>
<pre class="code">git am ~/patch-set/*.patch</pre>

<p>
如果 git am 失败，可能是这样的：
</p>
<pre class="code">$ git am PATCH
Applying: PACTH DESCRIPTION
error: patch failed: file.c:137
error: file.c: patch does not apply
error: patch failed: Makefile:24
error: libavfilter/Makefile: patch does not apply
Patch failed at 0001 PATCH DESCRIPTION
When you have resolved this problem run &quot;git am --resolved&quot;.
If you would prefer to skip this patch, instead run &quot;git am --skip&quot;.
To restore the original branch and stop patching run &quot;git am --abort&quot;.</pre>

<p>
可以使用 git apply 命令打冲突的patch
</p>
<pre class="code">$ git apply PATCH --reject
$ （注：根据.rej文件手动解决所有冲突）
$ git add FIXED_FILES
$ git am --resolved</pre>

<p>
或者尝试另一种方法，三方合并（强制合并有冲突的patch文件，类似git stash apply）
</p>
<pre class="code">$ git am -3 *.patch
$ git status
$ git diff （查看红色文件的冲突部分）
$ （修改里面的冲突符号包含的部分即可）
$ git add FIXED_FILES
$ git am --continue</pre>

</div>
<!-- EDIT17 SECTION "git am" [3186-4618] -->
<h2 class="sectionedit18" id="高通代码下载">高通代码下载</h2>
<div class="level2">

<p>
高通相关网址：
Createpoint: <a href="https://createpoint.qti.qualcomm.com" class="urlextern" title="https://createpoint.qti.qualcomm.com"  rel="nofollow">https://createpoint.qti.qualcomm.com</a>（可下载文档，Release Note等）
</p>

<p>
Chipcode: <a href="https://chipcode.qti.qualcomm.com" class="urlextern" title="https://chipcode.qti.qualcomm.com"  rel="nofollow">https://chipcode.qti.qualcomm.com</a>（下载私有代码）
</p>

<p>
开源代码: <a href="https://www.codeaurora.org/xwiki/bin/QAEP/release" class="urlextern" title="https://www.codeaurora.org/xwiki/bin/QAEP/release"  rel="nofollow">https://www.codeaurora.org/xwiki/bin/QAEP/release</a>（下载开源代码）
</p>

<p>
Case和文档: <a href="https://support.cdmatech.com" class="urlextern" title="https://support.cdmatech.com"  rel="nofollow">https://support.cdmatech.com</a>（Case，文档，工具等）
</p>

</div>
<!-- EDIT18 SECTION "高通代码下载" [4619-4993] -->
<h4 class="sectionedit19" id="下载私有代码">下载私有代码</h4>
<div class="level4">

<p>
Chipcode上下载私有代码，根据Release Note或Non-HLOS下的contents.xml下载对应的开源代码
</p>

<p>
1. 下载私有代码需要升级 git 到 1.8.1.2 以上，并用 openSSL 代替 gnuTLS
</p>

<p>
<a href="/dokuwiki/doku.php/git;upgrading_git_on_linux" class="wikilink1" title="git:upgrading_git_on_linux"> Linux 下升级 git</a>
</p>

<p>
2. 在 Chipcode 上找到要下载代码的链接，用 git clone 下载代码
</p>

<p>
3. 根据 Release Note 或 Non-HLOS 中的 contents.xml 文件里 apps 的 build id 下载开源代码
</p>

</div>
<!-- EDIT19 SECTION "下载私有代码" [4994-5453] -->
<h4 class="sectionedit20" id="下载开源代码">下载开源代码</h4>
<div class="level4">

<p>
<strong>1.没有下载过高通开源代码。由于代码数据大(几十G)，根据网络情况需要几天</strong>
</p>

<p>
1. 根据私有代码content.xml查看apps项对应的build-id，如：LA.BR64.1.1-04610-8&times;16.0
</p>

<p>
2. repo 指定需要下载的manifest.xml
</p>

<p>
<del>
   repo init -u git:<em>codeaurora.org/platform/manifest.git -b release -m LA.BR64.1.1-04610-8&times;16.0.xml –repo-url=git:</em>codeaurora.org/tools/repo.git –repo-branch=caf-stable
</del>
</p>
<pre class="code">   repo init -u git://codeaurora.org/platform/manifest.git -b release -m LA.BR64.1.1-04610-8x16.0.xml 
   repo sync</pre>

<p>
<strong>2.在已有的高通源码的基础上同步。会节省很多时间</strong>
</p>

<p>
1. 更新manifest。在 .repo/manifest/目录 git pull
</p>

<p>
<span style='color:red; '>2.没有下载过高通开源代码步骤</span>
</p>

</div>
<!-- EDIT20 SECTION "下载开源代码" [5454-6237] -->
<h4 class="sectionedit21" id="新建项目代码">新建项目代码</h4>
<div class="level4">

<p>
<strong>开源代码可直接上传到代码库，根据新项目的分支名（例：QRD8936_KK）</strong>
</p>

<p>
创建远程库别名：
</p>
<pre class="code">repo forall -c &#039;git remote add sim-ssh ssh://yourname@192.167.100.232:29418/$REPO_PROJECT.git $@&#039;</pre>

<p>
<strong>只需修改<span style='color:red; '>yourname</span>为自己的名字</strong>
</p>

<p>
上传所有开源代码：
</p>
<pre class="code">repo forall -c git push sim-ssh HEAD:refs/heads/QRD8936_KK</pre>

<p>
HEAD:refs/heads/QRD8936_KK 会直接提交到代码库，不需要review
</p>

<p>
<strong>ChipCode上下载的代码包括Non-HLOS及vendor/qcom/proprietary，需要将代码分离出两个库。</strong>
</p>

<p>
即将 LINUX/android/vendor/qcom/proprietary 下的所有代码提交到 vendor/qcom/proprietary 库里，除去 LINUX 文件夹其他代码提交到 Non-HLOS 库里。
</p>

<p>
Non-HLOS 库提交：
</p>
<pre class="code">git push ssh://yourname@192.167.100.232:29418/Non-HLOS HEAD:refs/heads/QRD8939_KK</pre>

<p>
<strong>需修改<span style='color:red; '>yourname</span>为自己的名字，修改<span style='color:red; '>QRD8939_KK</span>为要提交的分支名</strong>
</p>

<p>
vendor/qcom/proprietary 库提交：
</p>
<pre class="code">git push ssh://yourname@192.167.100.232:29418/platform/vendor/qcom/proprietary_4.4.4 HEAD:refs/heads/QRD8939_KK</pre>

<p>
<strong>需修改<span style='color:red; '>yourname</span>为自己的名字，修改<span style='color:red; '>QRD8939_KK</span>为要提交的分支名，QRD8939_KK在<span style='color:red; '>platform/vendor/qcom/proprietary_4.4.4</span>下，其他项目在<span style='color:red; '>platform/vendor/qcom/proprietary</span>下</strong>
</p>

<p>
<strong>创建新项目的manifest文件</strong>
</p>

<p>
1. 新建目录 manifests
</p>

<p>
2. 可以根据开源代码 .repo/manifests 下的default_<span style='color:red; '>apps_build_id</span>.xml 创建 default.xml 文件，将 &lt;remote&gt; 及 &lt;default&gt; 修改为我们代码服务器的 ip 及对应的项目分支。例：
</p>
<pre class="code">&lt;remote fetch=&quot;git@192.167.100.232:/&quot; name=&quot;sim&quot; review=&quot;http://192.167.100.232:8080&quot;/&gt;
&lt;default remote=&quot;sim&quot; revision=&quot;QRD8939_KK&quot;/&gt;</pre>

<p>
并在default.xml加入 Non-HLOS 及 vendor/qcom/proprietary 库
</p>
<pre class="code">&lt;project name=&quot;platform/vendor/qcom/proprietary_4.4.4&quot; path=&quot;vendor/qcom/proprietary&quot;/&gt;
&lt;project name=&quot;Non-HLOS&quot; path=&quot;Non-HLOS&quot;/&gt;</pre>

<p>
3. 提交 manifest 文件
</p>
<pre class="code">git init
git add default.xml
git commit -m &quot;Add default manifest&quot;
git push ssh://yourname@192.167.100.232:29418/platform/manifest HEAD:refs/heads/QRD8939_KK</pre>

<p>
<strong>需修改<span style='color:red; '>yourname</span>为自己的名字，修改<span style='color:red; '>QRD8939_KK</span>为要提交的分支名</strong>
</p>

<p>
<strong><span style='color:red; '>为了方便升级，可保留一份完整的高通原始代码在代码库，例：QAULCOMM_8939，高通代码更新时更新此代码库 开源代码 及 私有代码。可借助此高通原始代码用 git merge 升级 开源代码; 用此原始代码 生成 Non-HLOS 库 及 vendor/qcom/proprietary 库的 patch。每次提交高通原始代码到代码库是，也把.repo/manifests下的对应高通版本的manifest文件提交到我们自己代码库中，例：LNX.LA.3.7.3.1-02710-8939.0.xml</span></strong>
</p>

</div>
<!-- EDIT21 SECTION "新建项目代码" [6238-9187] -->
<h2 class="sectionedit22" id="高通代码升级">高通代码升级</h2>
<div class="level2">

<p>
ChipCode 里 Profile settings → Notifications 可以配置接收高通代码的通知，可以设置 Global setting 为 Watch，或只设置 Favorites 关注的代码为 Watch。设置此通知后，高通有代码更新会发邮件通知。
</p>

<p>
升级代码前先更新我们代码库里的高通原始代码，例：<span style='color:red; '>QAULCOMM_8939</span>
</p>

<p>
<strong>开源代码：</strong>
</p>
<pre class="code">repo forall -c git push sim-ssh HEAD:refs/heads/QAULCOMM_8939</pre>

<p>
将 .repo/manifests 下对应版本的manifest文件（例：LNX.LA.3.7.3.1-02710-8939.0.xml）提交到 QAULCOMM_8939 中的.repo/manifests 下。
</p>

<p>
<strong>私有代码：</strong>
</p>

<p>
1. 将私有代码中 LINUX/android/vendor/qcom/proprietary 下的所有代码提交到 vendor/qcom/proprietary 库里：
</p>
<pre class="code">cd QAULCOMM_8939/vendor/qcom/proprietary
rm -fr *
cp -R 私有代码/LINUX/android/vendor/qcom/proprietary/* .
git add .
git commit -m &quot;Commit label build_id&quot;
git push sim-ssh HEAD:QAULCOMM_8939</pre>

<p>
2. 将私有代码中除 LINUX 目录的所有其他内容替换到 QAULCOMM_8939 下的 Non-HLOS 并提交。同步骤1。
</p>

</div>
<!-- EDIT22 SECTION "高通代码升级" [9188-10293] -->
<h4 class="sectionedit23" id="开源代码升级">开源代码升级</h4>
<div class="level4">

<p>
<strong>比较开源代码有哪些库有修改</strong>
</p>

<p>
可以通过两个版本的manifest文件比较。到 .repo manifests 目录下，用 bcompare <span style='color:red; '>apps_build_id_old</span>.xml <span style='color:red; '>apps_build_id_new</span>.xml，查看哪些库的 revision 不一样，不一样的库代码有更新。
</p>

<p>
<strong>用 patch 的方式更新代码</strong>
</p>

<p>
用 git format-patch 生成更新库的 patch，例：git format-patch <span style='color:red; '>apps_build_id_old</span>..<span style='color:red; '>apps_build_id_new</span>
</p>

<p>
用 git am 打更新库的patch。
</p>

<p>
<strong>如果要更新的库我们没有修改过代码，可直接push到代码库</strong>
</p>
<pre class="code">git push sim-ssh HEAD:QRD8939_KK</pre>

<p>
<strong>如果要更新的库高通修改很多，打 patch 冲突很多，可用 git merge 合并代码</strong>
将高通代码分支<span style='color:red; '>QAULCOMM_8939</span> merge 到本地代码：
在我们自己代码环境下
</p>
<pre class="code">repo sync .
repo start merge_qaulcomm_code .
git merge sim/QAULCOMM_8939</pre>

<p>
如遇到冲突，解好冲突后 git commit。
</p>

</div>
<!-- EDIT23 SECTION "开源代码升级" [10294-11315] -->
<h4 class="sectionedit24" id="私有代码升级">私有代码升级</h4>
<div class="level4">

<p>
私有代码可通过 patch 的方式升级。
</p>

<p>
Non-HLOS 库可根据 高通原始代码 <span style='color:red; '>QAULCOMM_8939</span> 生成两个版本间的 patch，用此 patch 打到 Non-HLOS 库下，解决冲突后提交代码。
</p>

<p>
vendor/qcom/proprietary 库代码也根据 高通原始代码 <span style='color:red; '>QAULCOMM_8939</span> 生成两个版本间的 patch，用此 patch 打到 vendor/qcom/proprietary 库下，解决冲突后提交代码。
</p>

</div>
<!-- EDIT24 SECTION "私有代码升级" [11316-11777] -->
<h2 class="sectionedit25" id="d508_客户共享代码更新">D508 客户共享代码更新</h2>
<div class="level2">

<p>
1. 编译 D508 开发版本 eng 版
</p>

<p>
2. 用 copy-prebuilt.sh 脚本生成 prebuilt_simcom
</p>
<pre class="code">cd build/scm_tools
./copy-prebuilt.sh</pre>

<p>
3. 将生成的 prebuilt_simcom 覆盖到 D508 客户版本的 vendor/qcom/proprietary 下，并提交修改。
</p>

<p>
用比较工具比较 D508 开发版本 和 D508 客户版本 中 vendor/qcom/proprietary  下的 llvm-rs， prebuilt_HY11， qrdplus/globalization，qrdplus/Extension/res-overlay 几个文件夹中内容是否一样，如不一样请用 D508 开发版本 下的内容替换到 D508 客户版本 中。（此步只需在升级高通代码后做，不用每次发版本都做。）
</p>

<p>
4. 用 D508 客户版本 编译并发布 user 版本
</p>

<p>
5. 在 D508 客户版本 下生成 patch
</p>
<pre class="code">cd build/scm_tools
./make-all-patch.sh</pre>

<p>
先输入上一次patch的tag，再输入此次patch的tag。
</p>

<p>
生成 patch 后，用 git tag 标记此次成的 patch 的位置
</p>
<pre class="code">forall -c git tag -a D508-patch-日期 -m &quot;D508-patch-日期&quot;
forall -c git push sim-ssh D508-patch-日期</pre>

</div>
<!-- EDIT25 SECTION "D508 客户共享代码更新" [11778-12859] -->
<h2 class="sectionedit26" id="s100d_指端_客户共享代码更新">S100D（指端） 客户共享代码更新</h2>
<div class="level2">

<p>
1. 编译 S100D 开发版本 指端 eng 版
</p>

<p>
2. 用 copy-prebuilt.sh 脚本生成 prebuilt_simcom
</p>
<pre class="code">cd build/scm_tools
./copy-prebuilt.sh</pre>

<p>
3. 将生成的 prebuilt_simcom 覆盖到 S100D 客户版本的 vendor/qcom/proprietary 下，并提交修改。
</p>

<p>
4. 用 S100D 客户版本 编译并发布 user 版本
</p>

<p>
5. 在 S100D 客户版本 下生成 patch
</p>
<pre class="code">cd build/scm_tools
./make-all-patch.sh</pre>

<p>
先输入上一次patch的tag，再输入此次patch的tag。
</p>

<p>
生成 patch 后，用 git tag 标记此次成的 patch 的位置
</p>
<pre class="code">forall -c git tag -a S100D-patch-日期 -m &quot;S100D-patch-日期&quot;
forall -c git push sim-ssh S100D-patch-日期</pre>

</div>
<!-- EDIT26 SECTION "S100D（指端） 客户共享代码更新" [12860-13586] -->
<h2 class="sectionedit27" id="s300p_新大陆_客户共享代码更新">S300P（新大陆） 客户共享代码更新</h2>
<div class="level2">

<p>
1. 编译 S300P 开发版本 新大陆 eng 版
</p>

<p>
2. 用 copy-prebuilt.sh 脚本生成 prebuilt_simcom
</p>
<pre class="code">cd build/scm_tools
./copy-prebuilt.sh</pre>

<p>
3. 将生成的 prebuilt_simcom 覆盖到 S300P 客户版本的 vendor/qcom/proprietary 下，并提交修改。
</p>

<p>
4. 用 S300P 客户版本 编译并发布 user 版本
</p>

<p>
5. 在 S300P 客户版本 下生成 patch
</p>
<pre class="code">cd build/scm_tools
./make-all-patch.sh</pre>

<p>
先输入上一次patch的tag，再输入此次patch的tag。
</p>

<p>
生成 patch 后，用 git tag 标记此次成的 patch 的位置
</p>
<pre class="code">forall -c git tag -a S300P-patch-日期 -m &quot;S300P-patch-日期&quot;
forall -c git push sim-ssh S300P-patch-日期</pre>

</div>
<!-- EDIT27 SECTION "S300P（新大陆） 客户共享代码更新" [13587-14319] -->
<h2 class="sectionedit28" id="mysql_数据库备份及恢复">Mysql 数据库备份及恢复</h2>
<div class="level2">

<p>
备份：mysqldump -u gerrit2 -p reviewdb &gt; reviewdb.sql
恢复：mysql -u gerrit2 -p reviewdb &lt; reviewdb.sql
</p>

</div>
<!-- EDIT28 SECTION "Mysql 数据库备份及恢复" [14320-14472] -->
<h2 class="sectionedit29" id="客户镜像制作方法_以d801代码为例">客户镜像制作方法(以D801代码为例)</h2>
<div class="level2">

<p>
1.首先下载裸镜像git库，下载位置为：\\192.167.100.225\share\个人共享\y.liu@sim.com\kk1.tar.gz 或 在下载高通代码时加–mirror选项，下载裸镜像库。
</p>

<p>
2.解压该压缩包，可见下有platform,device,kernel,tools四个文件夹，其中tools中只包含repo.git库，其他三个目录中分别存放的是Android所用的所有git库，以.git结尾。
</p>

<p>
3.进入D801代码的目录，repo status查看当前所有库的状态，根据提示进行处理，无提示表示所有库正常，或repo prune 删掉所有以和master分支合并过的分支，根据提示进行处理，无提示表示所有分支已删除。
</p>

<p>
4.repo start –all master 为D801代码中的所有库，新建名为master的分支。
</p>

<p>
5.repo forall -c &#039;git remote add sim-ssh /home/liuyang/kk1/$REPO_PROJECT.git $@&#039; 为D801代码的所有库建立对应到/home/liuyang/kk1/下所有裸版本库的远程别名sim-ssh。
</p>

<p>
6.repo forall -c git push sim-ssh master:master 2&gt;&amp;1 | tee log 把D801代码中所有库上的master分支推送到sim-ssh即/home/liuyang/kk1/$REPO_PROJECT.git $@上去，查看log，确认那些库传输失败，然后单独传输，即如果提示没有a.git库，则从服务器上git clone下a库文件，然后删除分支，新建名为master分支，然后git remote add sim-ssh /home/liuyang/kk1/a.git即可。
</p>

<p>
7.关于manifest.git库的推送：
(1).新建一个manifest目录。
(2).把D801目录下.repo目录下的D801.xml放到该目录下，并改名为default.xml
(3).git init 初始化该目录。
(4).git add ; commit default.xml文件
(5).git checkout -b D801 新建D801分支。
(6).git push sim-ssh D801:D801 把D801分支推送到sim-ssh的manifest.git库上。
</p>

<p>
8.上述已新建完成一个完整的项目裸版本镜像。
</p>

<p>
9.关于如果下载该裸版本库。
(1).新建一个名为D801-repo-sync的目录，用于存放代码。
(2).在该目录下执行 
repo init -u &lt;mirror_path&gt;/platform/manifest.git -b D801 –repo-url=&lt;mirror_path&gt;/tools/repo.git 命令。
(3).vim .repo/manifest.xml 修改下载完成的manifest.xml
&lt;remote fetch=“&lt;mirror_path&gt;” name=“sim” review=“<a href="http://192.167.100.232:8080" class="urlextern" title="http://192.167.100.232:8080"  rel="nofollow">http://192.167.100.232:8080</a>”/&gt;
&lt;default remote=“sim” revision=“master”/&gt;
(4)然后执行repo sync即可。
</p>

</div>
<!-- EDIT29 SECTION "客户镜像制作方法(以D801代码为例)" [14473-] -->