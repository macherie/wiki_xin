
<h1 class="sectionedit1" id="充电和电池驱动简介">充电和电池驱动简介</h1>
<div class="level1">

<p>
席芳清   2013-11-25
</p>

</div>
<!-- EDIT1 SECTION "充电和电池驱动简介" [1-66] -->
<h2 class="sectionedit2" id="一_modem侧主要代码文件">一，Modem侧主要代码文件：</h2>
<div class="level2">

<p>
1，充电：电池电压小于开机电压（一般为3400mV）时,调用osbl层：
</p>

<p>
<strong>oemsbl_usb_chg_fast.c</strong>
</p>

<p>
<strong>hsu_chg_boot.c</strong>
</p>
<pre class="code">  void oemsbl_usb_chg_init(void)
  {
      err = (hsu_chg_boot_err_type) hsu_chg_boot(&amp;param);
  }</pre>

<p>
2，充电：设备开机后，流程在AMSS层;
</p>

<p>
<strong>chg_task.cpp</strong> 与kernel文件<strong>rpc_hsusb.c</strong>RPC对应，四个重要函数，插拔充电器会被调用 。 
</p>
<pre class="code">  void chg_usb_i_is_available(uint32 i_ma){}
  void chg_usb_i_is_not_available(void){}
  void chg_usb_charger_connected(pm_app_otg_a_dev_type otg_dev){}
  void chg_usb_charger_disconnected(void){ }</pre>

<p>
<strong>chg_config.h</strong>  配置充电电流，截止电压等；
</p>

<p>
<strong>chg_common.cpp</strong>  定义了很多充电结构体和变量，比较重要比如，
</p>
<pre class="code">  pm_app_otg_a_dev_type    chg_usb_otg_dev = PM_APP_OTG_A_DEV_TYPE__USB_UNKNOWN;
  void chg_get_general_status(chg_general_status_type* status)
  {
      ASSERT(NULL != status);
      *status = ChargingFactory::GetAutoChargingManager()-&gt;GetGeneralStatus();
      return;
  }</pre>

<p>
<strong>chg_autocharging_pulse_topoff.cpp</strong> 充电轮询，充电状态监测
</p>
<pre class="code">  void AutoChargingManagerPulseTopoff::EventFired(ChargingEvent *event)</pre>

<p>
<strong>charger_svc.c</strong> 通过RPC对应Kernel文件<strong>rpc_hsusb.c</strong>
</p>

<p>
3,电池驱动
</p>

<p>
<strong>XoAdcBsp.c</strong>  可配置电池温度-电压表格
</p>
<pre class="code">  static const AdcMapPtInt32toInt32Type adcMap_BattTherm_SKUD[]</pre>

<p>
<strong>vbatt.c</strong> 每15秒更新PMIC ADC参数
</p>
<pre class="code">  vbatt_update_adc_battery_params ( void )</pre>

<p>
<strong>vbatt_task.c</strong>  设置信号和定时器
</p>
<pre class="code">  rex_def_timer ( &amp;vbatt_rpt_timer , &amp;vbatt_tcb, VBATT_RPT_TIMER_SIG ) ; /* Dog Report */
  rex_def_timer ( &amp;vbatt_hys_timer , &amp;vbatt_tcb, VBATT_TIME_HYS_SIG  ) ;
  void vbatt_notify_chg_event ( void ) 
  {
      vbatt_set_chg_event ( ) ;
      ( void ) rex_set_sigs ( &amp;vbatt_tcb , VBATT_CHG_EVT_SIG ) ;
  }</pre>

<p>
<strong>vbatt_remote_svc.c</strong> 通过RPC对应kernel文件<strong>msm_battery.c</strong>
</p>

<p>
<strong>board_8x25_skud.c</strong>  配置电压-电量对应表，开机电压等
</p>
<pre class="code">  static uint32 skud_voltage_2_capacity[101][2]
  board_oemsbl_weakly_charging_setting.vbatt_weak_thresh = 3400;</pre>

</div>
<!-- EDIT2 SECTION "一，Modem侧主要代码文件：" [67-2227] -->
<h2 class="sectionedit3" id="二_ap侧主要代码文件">二，AP侧主要代码文件：</h2>
<div class="level2">

<p>
<strong>msm_battery.c</strong>
</p>
<pre class="code">  void msm_battery_update_psy_status(void) {};
  static int __devinit msm_battery_probe(struct platform_device *pdev)
  {
      power_supply_register(&amp;pdev-&gt;dev, &amp;msm_psy_ac);
      ...
  }</pre>

<p>
<strong>rpc_hsusb.c</strong>  对应modem文件 <strong>chg_task.cpp</strong>
</p>
<pre class="code">  void hsusb_chg_connected(enum chg_type chgtype){}</pre>

<p>
<strong>msm72k_udc.c</strong>
</p>
<pre class="code">  static inline enum chg_type usb_get_chg_type(struct usb_info *ui){ }</pre>

<p>
<strong>msm72k_otg.c</strong>
</p>
<pre class="code">  static int msm_otg_set_power(struct usb_phy *xceiv, unsigned mA)</pre>

</div>
<!-- EDIT3 SECTION "二，AP侧主要代码文件：" [2228-2781] -->
<h2 class="sectionedit4" id="三_关于充电管理芯片bq24196">三，关于充电管理芯片BQ24196</h2>
<div class="level2">

<p>
I2C驱动,最好用kernel中现成的i2c-gpio，使用modem侧gpio模拟,容易出现一些意想不到的问题，比如，概率性的出现I2C_CLK一直拉不高。
</p>

<p>
在kernel中添加<strong>bq24196_charger.c</strong>，
主要功能有：根据充电器类型设置充电电流，充电截至电压，电池过温禁止充电，满电指示灯打开等。
</p>

</div>
<!-- EDIT4 SECTION "三，关于充电管理芯片BQ24196" [2782-3181] -->
<h2 class="sectionedit5" id="四_关于bq27510库伦计">四，关于BQ27510库伦计</h2>
<div class="level2">

<p>
在kernel中添加<strong>bq27510_fuelgauger.c</strong>，烧写该芯片ROM的应用程序代码为<strong>bq27510_flash.c</strong>
</p>

</div>
<!-- EDIT5 SECTION "四，关于BQ27510库伦计" [3182-] -->