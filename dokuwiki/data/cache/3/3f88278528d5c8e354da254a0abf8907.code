<span class="kw1">public</span> <span class="kw1">class</span> DirectDrawer <span class="br0">&#123;</span>
&nbsp;
    <span class="kw1">private</span> <span class="kw1">final</span> <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+string"><span class="kw3">String</span></a> vertexShaderCode <span class="sy0">=</span>
            <span class="st0">&quot;attribute vec4 vPosition;&quot;</span> <span class="sy0">+</span>
                    <span class="st0">&quot;attribute vec2 inputTextureCoordinate;&quot;</span> <span class="sy0">+</span>
                    <span class="st0">&quot;varying vec2 textureCoordinate;&quot;</span> <span class="sy0">+</span>
                    <span class="st0">&quot;void main()&quot;</span> <span class="sy0">+</span>
                    <span class="st0">&quot;{&quot;</span> <span class="sy0">+</span>
                    <span class="st0">&quot;gl_Position = vPosition;&quot;</span> <span class="sy0">+</span>
                    <span class="st0">&quot;textureCoordinate = inputTextureCoordinate;&quot;</span> <span class="sy0">+</span>
                    <span class="st0">&quot;}&quot;</span><span class="sy0">;</span>
&nbsp;
    <span class="kw1">private</span> <span class="kw1">final</span> <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+string"><span class="kw3">String</span></a> fragmentShaderCode <span class="sy0">=</span>
            <span class="st0">&quot;#extension GL_OES_EGL_image_external : require<span class="es0">\n</span>&quot;</span> <span class="sy0">+</span>
                    <span class="st0">&quot;precision mediump float;&quot;</span> <span class="sy0">+</span>
                    <span class="st0">&quot;varying vec2 textureCoordinate;<span class="es0">\n</span>&quot;</span> <span class="sy0">+</span>
                    <span class="st0">&quot;uniform samplerExternalOES s_texture;<span class="es0">\n</span>&quot;</span> <span class="sy0">+</span>
                    <span class="st0">&quot;void main() {&quot;</span> <span class="sy0">+</span>
                    <span class="st0">&quot;  gl_FragColor = texture2D( s_texture, textureCoordinate );<span class="es0">\n</span>&quot;</span> <span class="sy0">+</span>
                    <span class="st0">&quot;}&quot;</span><span class="sy0">;</span>
&nbsp;
    <span class="kw1">private</span> FloatBuffer vertexBuffer, textureVerticesBuffer<span class="sy0">;</span>
    <span class="kw1">private</span> ShortBuffer drawListBuffer<span class="sy0">;</span>
    <span class="kw1">private</span> <span class="kw1">final</span> <span class="kw4">int</span> mProgram<span class="sy0">;</span>
    <span class="kw1">private</span> <span class="kw4">int</span> mPositionHandle<span class="sy0">;</span>
    <span class="kw1">private</span> <span class="kw4">int</span> mTextureCoordHandle<span class="sy0">;</span>
&nbsp;
    <span class="kw1">private</span> <span class="kw4">short</span> drawOrder<span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#123;</span>
            <span class="nu0">0</span>, <span class="nu0">1</span>, <span class="nu0">2</span>, <span class="nu0">0</span>, <span class="nu0">2</span>, <span class="nu0">3</span>
    <span class="br0">&#125;</span><span class="sy0">;</span> <span class="co1">// order to draw vertices</span>
&nbsp;
    <span class="co1">// number of coordinates per vertex in this array</span>
    <span class="kw1">private</span> <span class="kw1">static</span> <span class="kw1">final</span> <span class="kw4">int</span> COORDS_PER_VERTEX <span class="sy0">=</span> <span class="nu0">2</span><span class="sy0">;</span>
&nbsp;
    <span class="kw1">private</span> <span class="kw1">final</span> <span class="kw4">int</span> vertexStride <span class="sy0">=</span> COORDS_PER_VERTEX <span class="sy0">*</span> <span class="nu0">4</span><span class="sy0">;</span> <span class="co1">// 4 bytes per vertex</span>
&nbsp;
    <span class="kw1">static</span> <span class="kw4">float</span> squareCoords<span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#123;</span>
            <span class="sy0">-</span>1.0f, 1.0f,
            <span class="sy0">-</span>1.0f, <span class="sy0">-</span>1.0f,
            1.0f, <span class="sy0">-</span>1.0f,
            1.0f, 1.0f,
    <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
    <span class="kw1">static</span> <span class="kw4">float</span> textureVertices<span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#123;</span>
            0.0f, 1.0f,
            1.0f, 1.0f,
            1.0f, 0.0f,
            0.0f, 0.0f,
    <span class="br0">&#125;</span><span class="sy0">;</span>
&nbsp;
    <span class="kw1">private</span> <span class="kw4">int</span> texture<span class="sy0">;</span>
&nbsp;
    <span class="kw1">public</span> DirectDrawer<span class="br0">&#40;</span><span class="kw4">int</span> texture<span class="br0">&#41;</span>
    <span class="br0">&#123;</span>
        <span class="kw1">this</span>.<span class="me1">texture</span> <span class="sy0">=</span> texture<span class="sy0">;</span>
        <span class="co1">// initialize vertex byte buffer for shape coordinates</span>
        ByteBuffer bb <span class="sy0">=</span> ByteBuffer.<span class="me1">allocateDirect</span><span class="br0">&#40;</span>squareCoords.<span class="me1">length</span> <span class="sy0">*</span> <span class="nu0">4</span><span class="br0">&#41;</span><span class="sy0">;</span>
        bb.<span class="me1">order</span><span class="br0">&#40;</span>ByteOrder.<span class="me1">nativeOrder</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        vertexBuffer <span class="sy0">=</span> bb.<span class="me1">asFloatBuffer</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        vertexBuffer.<span class="me1">put</span><span class="br0">&#40;</span>squareCoords<span class="br0">&#41;</span><span class="sy0">;</span>
        vertexBuffer.<span class="me1">position</span><span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        <span class="co1">// initialize byte buffer for the draw list</span>
        ByteBuffer dlb <span class="sy0">=</span> ByteBuffer.<span class="me1">allocateDirect</span><span class="br0">&#40;</span>drawOrder.<span class="me1">length</span> <span class="sy0">*</span> <span class="nu0">2</span><span class="br0">&#41;</span><span class="sy0">;</span>
        dlb.<span class="me1">order</span><span class="br0">&#40;</span>ByteOrder.<span class="me1">nativeOrder</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        drawListBuffer <span class="sy0">=</span> dlb.<span class="me1">asShortBuffer</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        drawListBuffer.<span class="me1">put</span><span class="br0">&#40;</span>drawOrder<span class="br0">&#41;</span><span class="sy0">;</span>
        drawListBuffer.<span class="me1">position</span><span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        ByteBuffer bb2 <span class="sy0">=</span> ByteBuffer.<span class="me1">allocateDirect</span><span class="br0">&#40;</span>textureVertices.<span class="me1">length</span> <span class="sy0">*</span> <span class="nu0">4</span><span class="br0">&#41;</span><span class="sy0">;</span>
        bb2.<span class="me1">order</span><span class="br0">&#40;</span>ByteOrder.<span class="me1">nativeOrder</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        textureVerticesBuffer <span class="sy0">=</span> bb2.<span class="me1">asFloatBuffer</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        textureVerticesBuffer.<span class="me1">put</span><span class="br0">&#40;</span>textureVertices<span class="br0">&#41;</span><span class="sy0">;</span>
        textureVerticesBuffer.<span class="me1">position</span><span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        <span class="kw4">int</span> vertexShader <span class="sy0">=</span> loadShader<span class="br0">&#40;</span>GLES20.<span class="me1">GL_VERTEX_SHADER</span>, vertexShaderCode<span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="kw4">int</span> fragmentShader <span class="sy0">=</span> loadShader<span class="br0">&#40;</span>GLES20.<span class="me1">GL_FRAGMENT_SHADER</span>, fragmentShaderCode<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        mProgram <span class="sy0">=</span> GLES20.<span class="me1">glCreateProgram</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">// create empty OpenGL ES Program</span>
        GLES20.<span class="me1">glAttachShader</span><span class="br0">&#40;</span>mProgram, vertexShader<span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">// add the vertex shader to program</span>
        GLES20.<span class="me1">glAttachShader</span><span class="br0">&#40;</span>mProgram, fragmentShader<span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">// add the fragment shader to program</span>
        GLES20.<span class="me1">glLinkProgram</span><span class="br0">&#40;</span>mProgram<span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">// creates OpenGL ES program executables</span>
    <span class="br0">&#125;</span>
&nbsp;
    <span class="kw1">public</span> <span class="kw4">void</span> draw<span class="br0">&#40;</span><span class="kw4">float</span><span class="br0">&#91;</span><span class="br0">&#93;</span> mtx<span class="br0">&#41;</span>
    <span class="br0">&#123;</span>
        GLES20.<span class="me1">glUseProgram</span><span class="br0">&#40;</span>mProgram<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        GLES20.<span class="me1">glActiveTexture</span><span class="br0">&#40;</span>GLES20.<span class="me1">GL_TEXTURE0</span><span class="br0">&#41;</span><span class="sy0">;</span>
        GLES20.<span class="me1">glBindTexture</span><span class="br0">&#40;</span>GLES11Ext.<span class="me1">GL_TEXTURE_EXTERNAL_OES</span>, texture<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        <span class="co1">// get handle to vertex shader's vPosition member</span>
        mPositionHandle <span class="sy0">=</span> GLES20.<span class="me1">glGetAttribLocation</span><span class="br0">&#40;</span>mProgram, <span class="st0">&quot;vPosition&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        <span class="co1">// Enable a handle to the triangle vertices</span>
        GLES20.<span class="me1">glEnableVertexAttribArray</span><span class="br0">&#40;</span>mPositionHandle<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        <span class="co1">// Prepare the &lt;insert shape here&gt; coordinate data</span>
        GLES20.<span class="me1">glVertexAttribPointer</span><span class="br0">&#40;</span>mPositionHandle, COORDS_PER_VERTEX, GLES20.<span class="me1">GL_FLOAT</span>, <span class="kw2">false</span>,
                vertexStride, vertexBuffer<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        mTextureCoordHandle <span class="sy0">=</span> GLES20.<span class="me1">glGetAttribLocation</span><span class="br0">&#40;</span>mProgram, <span class="st0">&quot;inputTextureCoordinate&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
        GLES20.<span class="me1">glEnableVertexAttribArray</span><span class="br0">&#40;</span>mTextureCoordHandle<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        GLES20.<span class="me1">glVertexAttribPointer</span><span class="br0">&#40;</span>mTextureCoordHandle, COORDS_PER_VERTEX, GLES20.<span class="me1">GL_FLOAT</span>,
                <span class="kw2">false</span>, vertexStride, textureVerticesBuffer<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        GLES20.<span class="me1">glDrawElements</span><span class="br0">&#40;</span>GLES20.<span class="me1">GL_TRIANGLES</span>, drawOrder.<span class="me1">length</span>, GLES20.<span class="me1">GL_UNSIGNED_SHORT</span>,
                drawListBuffer<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        <span class="co1">// Disable vertex array</span>
        GLES20.<span class="me1">glDisableVertexAttribArray</span><span class="br0">&#40;</span>mPositionHandle<span class="br0">&#41;</span><span class="sy0">;</span>
        GLES20.<span class="me1">glDisableVertexAttribArray</span><span class="br0">&#40;</span>mTextureCoordHandle<span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
&nbsp;
    <span class="kw1">private</span> <span class="kw4">int</span> loadShader<span class="br0">&#40;</span><span class="kw4">int</span> type, <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+string"><span class="kw3">String</span></a> shaderCode<span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp;
        <span class="co1">// create a vertex shader type (GLES20.GL_VERTEX_SHADER)</span>
        <span class="co1">// or a fragment shader type (GLES20.GL_FRAGMENT_SHADER)</span>
        <span class="kw4">int</span> shader <span class="sy0">=</span> GLES20.<span class="me1">glCreateShader</span><span class="br0">&#40;</span>type<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        <span class="co1">// add the source code to the shader and compile it</span>
        GLES20.<span class="me1">glShaderSource</span><span class="br0">&#40;</span>shader, shaderCode<span class="br0">&#41;</span><span class="sy0">;</span>
        GLES20.<span class="me1">glCompileShader</span><span class="br0">&#40;</span>shader<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
        <span class="kw1">return</span> shader<span class="sy0">;</span>
    <span class="br0">&#125;</span>
<span class="br0">&#125;</span>