a:141:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:0;}i:2;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:99:"目前所有的SELinux check 失败，在kernel log 或者android log(L版本后)中都有对应的";}i:2;i:3;}i:3;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:102;}i:4;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"avc:  denied";}i:2;i:103;}i:5;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:115;}i:6;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:" 或者 ";}i:2;i:116;}i:7;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:124;}i:8;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"avc: denied";}i:2;i:125;}i:9;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:136;}i:10;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:423:"的LOG 与之对应。反过来，有此LOG，并非就会直接失败，还需要确认当时SELinux 的模式, 是enforcing mode 还是 permissve mode.
首先, 务必确认对应进程访问系统资源是否正常， 是否有必要 ？如果本身是异常非法访问，那么就要自行消除访问。
其次, 如果确认访问是必要，并且正常的，那么就要对对应的process/domain 增加新的policy.";}i:2;i:137;}i:11;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:560;}i:12;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:560;}i:13;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:62:"1). 简化方法
 1.1 提取所有的avc LOG.   如 adb shell ";}i:2;i:562;}i:14;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:624;}i:15;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:"cat /proc/kmsg | grep avc";}i:2;i:625;}i:16;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:650;}i:17;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:317:" > avc_log.txt
 1.2 使用 audit2allow tool 直接生成policy. audit2allow -i avc_log.txt  即可自动输出生成的policy
 1.3 将对应的policy 添加到selinux policy 规则中，对应MTK Solution, 您可以将它们添加在KK: mediatek/custom/common/sepolicy, L: device/mediatek/common/sepolicy 下面，如";}i:2;i:651;}i:18;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:968;}i:19;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:220:"allow zygote resource_cache_data_file:dir rw_dir_perms;
allow zygote resource_cache_data_file:file create_file_perms;
===> mediatek/custom/common/sepolicy/zygote.te (KK)
===> device/mediatek/common/sepolicy/zygote.te (L)";}i:2;i:968;}i:20;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:968;}i:21;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:145:" 注意audit2allow 它自动机械的帮您将LOG 转换成policy, 而无法知道你操作的真实意图，有可能出现权限放大问题。";}i:2;i:1198;}i:22;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1343;}i:23;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1343;}i:24;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:438:"2). 按需确认方法
 此方法需要工程人员对SELinux 基本原理，以及SELinux Policy Language 有了解. 
 2.1 确认是哪个进程访问哪个资源，具体需要哪些访问权限，read ? write ? exec ? create ? search ?
 2.2 当前进程是否已经创建了policy 文件？ 通常是process 的执行档.te，如果没有，并且它的父进程即source context 无须访问对应的资源，则创建新的te 文件.";}i:2;i:1346;}i:25;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1784;}i:26;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:192:"   在L 版本上, Google 要求维护关键 security context 的唯一性, 比如严禁zygote, netd, installd, vold, ueventd 等关键process 与其它process 共享同一个security context.";}i:2;i:1784;}i:27;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1784;}i:28;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:94:" 2.3 创建文件后，关联它的执行档，在file_contexts 中, 关联相关的执行档.";}i:2;i:1980;}i:29;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2074;}i:30;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:74:"比如 /system/bin/idmap 则是 /system/bin/idmap u:object_r:idmap_exec:s0";}i:2;i:2074;}i:31;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2074;}i:32;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:42:" 2.4 填写policy 到相关的te 文件中";}i:2;i:2152;}i:33;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2194;}i:34;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:601:"如果沿用原来父进程的te 文件，则直接添加.
如果是新的文件，那么首先：
#==============================================
# Type Declaration
#==============================================
type idmap, domain;
type idmap_exec, file_type;

#==============================================
# Android Policy Rule
#==============================================
#permissive idmap;
domain_auto_trans(zygote, idmap_exec, idmap);

然后添加新的policy

# new policy
allow idmap resource_cache_data_file:dir rw_dir_perms;
allow idmap resource_cache_data_file:file create_file_perms;";}i:2;i:2194;}i:35;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2194;}i:36;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:"3). 权限放大情况处理";}i:2;i:2837;}i:37;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2865;}i:38;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:1318:"如果直接按照avc: denied 的LOG 转换出SELinux Policy, 往往会产生权限放大问题. 比如因为要访问某个device, 在这个device 没有细化SELinux Label 的情况下, 可能出现:
<7>[11281.586780] avc:  denied { read write } for pid=1217 comm="mediaserver" name="tfa9897" dev="tmpfs" ino=4385 scontext=u:r:mediaserver:s0 tcontext=u:object_r:device:s0 tclass=chr_file permissive=0
如果直接按照此LOG 转换出SELinux Policy:  allow mediaserver device:chr_file {read write};  那么就会放开mediaserver 读写所有device 的权限. 而Google 为了防止这样的情况, 使用了neverallow 语句来约束, 这样你编译sepolicy 时就无法编译通过.
为了规避这种权限放大情况, 我们需要细化访问目标(Object) 的SELinux Label, 做到按需申请. 通常会由三步构成
3.1 定义相关的SELinux type.
 比如上述案例, 在 device/mediatek/common/sepolicy/device.te 添加
 type tfa9897_device, dev_type;
3.2 绑定文件与SELinux type.
 比如上述案例, 在 device/mediatek/common/sepolicy/file_contexts 添加
 /dev/tfa9897(/.*)? u:object_r:tfa9897_device:s0
3.3 添加对应process/domain 的访问权限.
 比如上述案例, 在 device/mediatek/common/sepolicy/mediaserver.te 添加
 allow mediaserver tfa9897_device:chr_file { open read write };";}i:2;i:2865;}i:39;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2865;}i:40;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:72:"  那么哪些访问对象通常会遇到此类呢？(以L 版本为例)";}i:2;i:4213;}i:41;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4285;}i:42;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:4285;}i:43;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4285;}i:44;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4285;}i:45;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" device  ";}i:2;i:4291;}i:46;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4300;}i:47;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4300;}i:48;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:4300;}i:49;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:4300;}i:50;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:4300;}i:51;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4300;}i:52;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:86:"- 类型定义: external/sepolicy/device.te;device/mediatek/common/sepolicy/device.te ";}i:2;i:4304;}i:53;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4390;}i:54;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4390;}i:55;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:4390;}i:56;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4390;}i:57;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:93:"- 类型绑定: external/sepolicy/file_contexts;device/mediatek/common/sepolicy/file_contexts";}i:2;i:4394;}i:58;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4487;}i:59;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4487;}i:60;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:4487;}i:61;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:4488;}i:62;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4488;}i:63;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4488;}i:64;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:" File 类型: ";}i:2;i:4494;}i:65;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4508;}i:66;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4508;}i:67;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:4508;}i:68;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:4508;}i:69;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:4508;}i:70;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4508;}i:71;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:81:"- 类型定义: external/sepolicy/file.te;device/mediatek/common/sepolicy/file.te";}i:2;i:4512;}i:72;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4593;}i:73;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4593;}i:74;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:4593;}i:75;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4593;}i:76;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:93:"- 绑定类型: external/sepolicy/file_contexts;device/mediatek/common/sepolicy/file_contexts";}i:2;i:4597;}i:77;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4690;}i:78;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4690;}i:79;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:4690;}i:80;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:4691;}i:81;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4691;}i:82;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4691;}i:83;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:" 虚拟File 类型: ";}i:2;i:4696;}i:84;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4716;}i:85;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4716;}i:86;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:4716;}i:87;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:4716;}i:88;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4716;}i:89;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4716;}i:90;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:81:"- 类型定义: external/sepolicy/file.te;device/mediatek/common/sepolicy/file.te";}i:2;i:4720;}i:91;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4801;}i:92;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4801;}i:93;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4801;}i:94;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4801;}i:95;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:95:"- 绑定类型: external/sepolicy/genfs_contexts;device/mediatek/common/sepolicy/genfs_contexts";}i:2;i:4805;}i:96;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4900;}i:97;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4900;}i:98;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:4900;}i:99;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:4901;}i:100;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4901;}i:101;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4901;}i:102;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:" Service 类型:";}i:2;i:4906;}i:103;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4922;}i:104;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4922;}i:105;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:4922;}i:106;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:4922;}i:107;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4922;}i:108;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4922;}i:109;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:88:"- 类型定义: external/sepolicy/service.te; device/mediatek/common/sepolicy/service.te";}i:2;i:4926;}i:110;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:5014;}i:111;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:5014;}i:112;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:5014;}i:113;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:5014;}i:114;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:99:"- 绑定类型：external/sepolicyservice_contexts;device/mediatek/common/sepolicy/service_contexts";}i:2;i:5018;}i:115;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:5117;}i:116;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:5117;}i:117;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:5117;}i:118;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:5118;}i:119;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:5118;}i:120;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:5118;}i:121;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:" Property 类型:";}i:2;i:5123;}i:122;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:5140;}i:123;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:5140;}i:124;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:5140;}i:125;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:5140;}i:126;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:5140;}i:127;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:5140;}i:128;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:89:"- 类型定义: external/sepolicy/property.te;device/mediatek/common/sepolicy/property.te";}i:2;i:5144;}i:129;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:5233;}i:130;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:5233;}i:131;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:5233;}i:132;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:5233;}i:133;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:102:"- 绑定类型: external/sepolicy/property_contexts;device/mediatek/common/sepolicy/property_contexts;";}i:2;i:5237;}i:134;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:5339;}i:135;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:5339;}i:136;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:5339;}i:137;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5339;}i:138;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:110:"  通常我们强烈反对更新google default 的policy, 大家可以更新mediatek 下面的相关的policy.";}i:2;i:5342;}i:139;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5452;}i:140;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:5452;}}