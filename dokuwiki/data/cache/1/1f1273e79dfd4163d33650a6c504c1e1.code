precision mediump <span class="kw4">float</span><span class="sy0">;</span>       	<span class="co1">// Set the default precision to medium. We don't need as high of a </span>
								<span class="co1">// precision in the fragment shader.</span>
uniform vec3 u_LightPos<span class="sy0">;</span>       	<span class="co1">// The position of the light in eye space.</span>
uniform sampler2D u_Texture<span class="sy0">;</span>    <span class="co1">// The input texture.</span>
&nbsp;
varying vec3 v_Position<span class="sy0">;</span>		<span class="co1">// Interpolated position for this fragment.</span>
varying vec4 v_Color<span class="sy0">;</span>          	<span class="co1">// This is the color from the vertex shader interpolated across the </span>
  								<span class="co1">// triangle per fragment.</span>
varying vec3 v_Normal<span class="sy0">;</span>         	<span class="co1">// Interpolated normal for this fragment.</span>
varying vec2 v_TexCoordinate<span class="sy0">;</span>   <span class="co1">// Interpolated texture coordinate per fragment.</span>
&nbsp;
<span class="co1">// The entry point for our fragment shader.</span>
<span class="kw4">void</span> main<span class="br0">&#40;</span><span class="br0">&#41;</span>                    		
<span class="br0">&#123;</span>                              
    <span class="co1">// Will be used for attenuation.</span>
    <span class="kw4">float</span> distance <span class="sy0">=</span> length<span class="br0">&#40;</span>u_LightPos <span class="sy0">-</span> v_Position<span class="br0">&#41;</span><span class="sy0">;</span>                  
&nbsp;
    <span class="co1">// Get a lighting direction vector from the light to the vertex.</span>
    vec3 lightVector <span class="sy0">=</span> normalize<span class="br0">&#40;</span>u_LightPos <span class="sy0">-</span> v_Position<span class="br0">&#41;</span><span class="sy0">;</span>              	
&nbsp;
    <span class="co1">// Calculate the dot product of the light vector and vertex normal. If the normal and light vector are</span>
    <span class="co1">// pointing in the same direction then it will get max illumination.</span>
    <span class="kw4">float</span> diffuse <span class="sy0">=</span> max<span class="br0">&#40;</span>dot<span class="br0">&#40;</span>v_Normal, lightVector<span class="br0">&#41;</span>, <span class="nu0">0.0</span><span class="br0">&#41;</span><span class="sy0">;</span>               	  		  													  
&nbsp;
    <span class="co1">// Add attenuation. </span>
    diffuse <span class="sy0">=</span> diffuse <span class="sy0">*</span> <span class="br0">&#40;</span><span class="nu0">1.0</span> <span class="sy0">/</span> <span class="br0">&#40;</span><span class="nu0">1.0</span> <span class="sy0">+</span> <span class="br0">&#40;</span><span class="nu0">0.10</span> <span class="sy0">*</span> distance<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
    <span class="co1">// Add ambient lighting</span>
    diffuse <span class="sy0">=</span> diffuse <span class="sy0">+</span> <span class="nu0">0.3</span><span class="sy0">;</span>  
    <span class="co1">// Multiply the color by the diffuse illumination level and texture value to get final output color.</span>
    gl_FragColor <span class="sy0">=</span> <span class="br0">&#40;</span>v_Color <span class="sy0">*</span> diffuse <span class="sy0">*</span> texture2D<span class="br0">&#40;</span>u_Texture, v_TexCoordinate<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>                                  		
<span class="br0">&#125;</span>                                                                     	