<span class="co1">//The vertex shader</span>
<span class="co1">//world space (model matrix) or eye space (model/view matrix) </span>
&nbsp;
  <span class="kw1">final</span> <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+string"><span class="kw3">String</span></a> vertexShader <span class="sy0">=</span>
    <span class="st0">&quot;uniform mat4 u_MVPMatrix;      <span class="es0">\n</span>&quot;</span>     <span class="co1">// A constant representing the combined model/view/projection matrix.</span>
  <span class="sy0">+</span> <span class="st0">&quot;uniform mat4 u_MVMatrix;       <span class="es0">\n</span>&quot;</span>     <span class="co1">// A constant representing the combined model/view matrix.</span>
  <span class="sy0">+</span> <span class="st0">&quot;uniform vec3 u_LightPos;       <span class="es0">\n</span>&quot;</span>     <span class="co1">// The position of the light in eye space.</span>
&nbsp;
  <span class="sy0">+</span> <span class="st0">&quot;attribute vec4 a_Position;     <span class="es0">\n</span>&quot;</span>     <span class="co1">// Per-vertex position information we will pass in.</span>
  <span class="sy0">+</span> <span class="st0">&quot;attribute vec4 a_Color;        <span class="es0">\n</span>&quot;</span>     <span class="co1">// Per-vertex color information we will pass in.</span>
  <span class="sy0">+</span> <span class="st0">&quot;attribute vec3 a_Normal;       <span class="es0">\n</span>&quot;</span>     <span class="co1">// Per-vertex normal information we will pass in.</span>
&nbsp;
  <span class="sy0">+</span> <span class="st0">&quot;varying vec4 v_Color;          <span class="es0">\n</span>&quot;</span>     <span class="co1">// This will be passed into the fragment shader.</span>
&nbsp;
  <span class="sy0">+</span> <span class="st0">&quot;void main()                    <span class="es0">\n</span>&quot;</span>     <span class="co1">// The entry point for our vertex shader.</span>
  <span class="sy0">+</span> <span class="st0">&quot;{                              <span class="es0">\n</span>&quot;</span>
<span class="co1">// Transform the vertex into eye space.</span>
  <span class="sy0">+</span> <span class="st0">&quot;   vec3 modelViewVertex = vec3(u_MVMatrix * a_Position);              <span class="es0">\n</span>&quot;</span>
<span class="co1">// Transform the normal's orientation into eye space.</span>
  <span class="sy0">+</span> <span class="st0">&quot;   vec3 modelViewNormal = vec3(u_MVMatrix * vec4(a_Normal, 0.0));     <span class="es0">\n</span>&quot;</span>
<span class="co1">// Will be used for attenuation.</span>
  <span class="sy0">+</span> <span class="st0">&quot;   float distance = length(u_LightPos - modelViewVertex);             <span class="es0">\n</span>&quot;</span>
<span class="co1">// Get a lighting direction vector from the light to the vertex.</span>
  <span class="sy0">+</span> <span class="st0">&quot;   vec3 lightVector = normalize(u_LightPos - modelViewVertex);        <span class="es0">\n</span>&quot;</span>
<span class="co1">// Calculate the dot product of the light vector and vertex normal. If the normal and light vector are</span>
<span class="co1">// pointing in the same direction then it will get max illumination.</span>
  <span class="sy0">+</span> <span class="st0">&quot;   float diffuse = max(dot(modelViewNormal, lightVector), 0.1);       <span class="es0">\n</span>&quot;</span>
<span class="co1">// Attenuate the light based on distance.</span>
  <span class="sy0">+</span> <span class="st0">&quot;   diffuse = diffuse * (1.0 / (1.0 + (0.25 * distance * distance)));  <span class="es0">\n</span>&quot;</span>
<span class="co1">// Multiply the color by the illumination level. It will be interpolated across the triangle.</span>
  <span class="sy0">+</span> <span class="st0">&quot;   v_Color = a_Color * diffuse;                                       <span class="es0">\n</span>&quot;</span>
<span class="co1">// gl_Position is a special variable used to store the final position.</span>
<span class="co1">// Multiply the vertex by the matrix to get the final point in normalized screen coordinates.</span>
  <span class="sy0">+</span> <span class="st0">&quot;   gl_Position = u_MVPMatrix * a_Position;                            <span class="es0">\n</span>&quot;</span>
  <span class="sy0">+</span> <span class="st0">&quot;}                          </span>