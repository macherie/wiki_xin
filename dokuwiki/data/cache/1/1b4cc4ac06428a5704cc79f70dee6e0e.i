a:327:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:0;}i:2;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:"1.参考网址：
";}i:2;i:1;}i:3;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:60:"http://wiki.jikexueyuan.com/project/opengl-es-guide/api.html";i:1;N;}i:2;i:19;}i:4;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:79;}i:5;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:79;}i:6;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:127:"2.简介
Opengl es是适用于嵌入式系统的一个免费的二维和三维图形库，在android中主要在如下包中：";}i:2;i:81;}i:7;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:208;}i:8;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:208;}i:9;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:208;}i:10;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:208;}i:11;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:" android.opengl ";}i:2;i:212;}i:12;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:228;}i:13;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:228;}i:14;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:228;}i:15;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:228;}i:16;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:" javax.microedition.khronos.egl  ";}i:2;i:232;}i:17;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:265;}i:18;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:265;}i:19;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:265;}i:20;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:265;}i:21;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:" javax.microedition.khronos.opengles";}i:2;i:269;}i:22;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:305;}i:23;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:305;}i:24;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:305;}i:25;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:305;}i:26;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"3.Opengl ES ";}i:2;i:307;}i:27;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:319;}i:28;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:253:" 的命名规范
定义的常量都以 GL_开头，如GL_DEPTH_BUFFER_BIT
定义的方法都以gl开头，如glClear()，其中有些指令以3f,4f,3i,3x等结尾，以3f为例，3表示指令所带的参数是3个，f表示所带参数的类型为float";}i:2;i:322;}i:29;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:575;}i:30;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:575;}i:31;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:60:"4.核心类GLSurfaceView.java,它所起到的作用如下：";}i:2;i:577;}i:32;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:637;}i:33;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:637;}i:34;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:637;}i:35;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:637;}i:36;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:78:" 起到连接 OpenGL ES 与 Android 的 View 层次结构之间的桥梁作用";}i:2;i:641;}i:37;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:719;}i:38;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:719;}i:39;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:719;}i:40;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:719;}i:41;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:72:" 使得 Open GL ES 库适应于 Anndroid 系统的 Activity 生命周期";}i:2;i:723;}i:42;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:795;}i:43;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:795;}i:44;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:795;}i:45;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:795;}i:46;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:60:" 使得选择合适的 Frame buffer 像素格式变得容易";}i:2;i:799;}i:47;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:859;}i:48;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:859;}i:49;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:859;}i:50;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:859;}i:51;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:61:" 创建和管理单独绘图线程以达到平滑动画效果";}i:2;i:863;}i:52;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:924;}i:53;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:924;}i:54;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:924;}i:55;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:924;}i:56;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:90:" 提供了方便使用的调试工具来跟踪 OpenGL ES 函数调用以帮助检查错误";}i:2;i:928;}i:57;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1018;}i:58;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1018;}i:59;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:1018;}i:60;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1018;}i:61;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:142:"5.GLSurfaceView类的内部类Renderer，GLSurfaceView.Renderer 定义了一个统一图形绘制的接口，主要提供了如下三个接口";}i:2;i:1020;}i:62;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1162;}i:63;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:1162;}i:64;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1162;}i:65;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1162;}i:66;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:140:" onSurfaceCreated：在这个方法中主要用来设置一些绘制时不常变化的参数，比如：背景色，是否打开 z-buffer等";}i:2;i:1166;}i:67;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1306;}i:68;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1306;}i:69;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1306;}i:70;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1306;}i:71;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:42:" onDrawFrame：定义实际的绘图操作";}i:2;i:1310;}i:72;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1352;}i:73;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1352;}i:74;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1352;}i:75;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1352;}i:76;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:98:" onSurfaceChanged：如果设备支持屏幕横向和纵向切换，这个方法将发生在横向";}i:2;i:1356;}i:77;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"<->";}i:2;i:1454;}i:78;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:63:"纵向互换时。此时可以重新设置绘制的纵横比率";}i:2;i:1457;}i:79;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1520;}i:80;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1520;}i:81;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:1520;}i:82;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1520;}i:83;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:216:"    GLSurfaceView 的渲染模式有两种，一种是连续不断的更新屏幕，另一种为 on-demand ，只有在调用 requestRender() 在更新屏幕。 缺省为 RENDERMODE_CONTINUOUSLY 持续刷新屏幕。";}i:2;i:1523;}i:84;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1739;}i:85;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1739;}i:86;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:183:"6.Opengl ES 支持绘制的基本几何图形分为3类，分别是点， 线， 三角形。其他任何复杂的图行都是由这三类组成的。Opengl ES定义了几种模式：";}i:2;i:1741;}i:87;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1924;}i:88;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:613:"GL_POINTS:绘制独立的点
GL_LINE_STRIP:绘制一系列线段，从顶点v0开始，依次连接v1, v2, v3,....,vn构成的线段
GL_LINE_LOOP:绘制一系列线段，构成一个封闭的曲线，从顶点v0开始，依次连接v1, v2, v3,...,vn,vn再连接v1从而构成闭合曲线
GL_LINES：顶点两两连接，为多条线段构成
GL_TRIANGLES：每隔三个顶点构成一个三角形，为多个三角形组成
GL_TRIANGLE_STRIP：每相邻三个顶点组成一个三角形，为一系列相接三角形构成
GL_TRIANGLE_FAN：以一个点为三角形公共顶点，组成一系列相邻的三角形";}i:2;i:1924;}i:89;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1924;}i:90;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:105:"7.坐标变换，Opengl es库完成了将3D模型显示到2D屏幕上，这个过程主要分为三部分";}i:2;i:2555;}i:91;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2660;}i:92;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:2660;}i:93;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2660;}i:94;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2660;}i:95;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:335:" 坐标变换，坐标变换通过使用变换矩阵来描述，因此学习 3D 绘图需要了解一些空间几何，矩阵运算的知识。三维坐标通常使用齐次坐标来定义。变换矩阵操作可以分为视角，模型和投影操作，這些操作可以有选择，平移，缩放，正侧投影，透视投影等。";}i:2;i:2664;}i:96;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2999;}i:97;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2999;}i:98;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2999;}i:99;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2999;}i:100;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:210:" 由于最終的 3D 模型需要在一个矩形窗口中显示，因此在这个窗口之外的部分需要裁剪掉以提高绘图效率，对应3D 图形，裁剪是将处在剪切面之外的部分扔掉。 ";}i:2;i:3003;}i:101;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3213;}i:102;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3213;}i:103;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3213;}i:104;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3213;}i:105;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:142:" 在最终绘制到显示器，需要建立起变换后的坐标和屏幕像素之间的对应关系，这通常称为「视窗」坐标变换";}i:2;i:3217;}i:106;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3359;}i:107;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3359;}i:108;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:3359;}i:109;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3359;}i:110;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:59:"8.可以将整个过程理解为照相机拍照的过程：";}i:2;i:3366;}i:111;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3425;}i:112;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:3425;}i:113;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3425;}i:114;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3425;}i:115;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:166:" 拍照时第一步是架起三角架並把相机的镜头指向需要拍摄的场景，对应到 3D 变换为 viewing transformation （平移或是选择 Camera ）";}i:2;i:3429;}i:116;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3595;}i:117;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3595;}i:118;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3595;}i:119;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3595;}i:120;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:296:"然后摄影师可能需要调整被拍場景中某個物体的角度，位置，比如摄影师給架好三角架后給你拍照时，可以要让你调整站立姿势或是位置。對應到 3D 繪製就是 Modeling transformation （調整所繪模型的位置，角度或是縮放比例）。";}i:2;i:3599;}i:121;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:3895;}i:122;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:3895;}i:123;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:3895;}i:124;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:3895;}i:125;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:223:"之后摄影师可以需要調整镜头取景（拉近或是拍攝遠景），相机取景框所能拍攝的場景會隨鏡頭的伸縮而變換，對應到 3D 繪图則為 Projection transformation(裁剪投影場景）。";}i:2;i:3899;}i:126;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4122;}i:127;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4122;}i:128;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4122;}i:129;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4122;}i:130;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:333:"按下快門後，对于數碼相机可以直接在屏幕上显示當前拍攝的照片，一般可以充满整個屏幕（相当于将坐标做規範化處理 NDC），此時你可以使用縮放放大功能显示照片的部分。对应到 3D 绘图相当于 viewport transformation （可以對最終的图像縮放显示等）   ";}i:2;i:4126;}i:131;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4459;}i:132;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4459;}i:133;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:4459;}i:134;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4459;}i:135;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:"9.坐标的变换过程涉及到坐标系，整个过程会涉及如下坐标系";}i:2;i:4461;}i:136;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4541;}i:137;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:4541;}i:138;a:3:{i:0;s:13:"listitem_open";i:1;a:2:{i:0;i:1;i:1;i:1;}i:2;i:4541;}i:139;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4541;}i:140;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:4545;}i:141;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:4546;}i:142;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:"Object Coordinate";}i:2;i:4548;}i:143;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:4565;}i:144;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:4567;}i:145;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:4568;}i:146;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:">Model matrix ";}i:2;i:4570;}i:147;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:4584;}i:148;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:">";}i:2;i:4586;}i:149;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:4587;}i:150;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"World Coordinate";}i:2;i:4589;}i:151;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:4605;}i:152;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:4607;}i:153;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:">view matrix";}i:2;i:4609;}i:154;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:4621;}i:155;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:">";}i:2;i:4623;}i:156;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:4624;}i:157;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"View Coordinate";}i:2;i:4626;}i:158;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:4641;}i:159;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:4643;}i:160;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:">projection matrix";}i:2;i:4645;}i:161;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4663;}i:162;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:4663;}i:163;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:4663;}i:164;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4663;}i:165;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:4669;}i:166;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:4671;}i:167;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"Clip Coordinate";}i:2;i:4673;}i:168;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:4688;}i:169;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:4690;}i:170;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:">Perspective division";}i:2;i:4692;}i:171;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:4713;}i:172;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:">";}i:2;i:4715;}i:173;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:4716;}i:174;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:"Normalized device coordinate";}i:2;i:4718;}i:175;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:4746;}i:176;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:4748;}i:177;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:">viewport transform";}i:2;i:4750;}i:178;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:4769;}i:179;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:">";}i:2;i:4771;}i:180;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:4772;}i:181;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:"Windows Coordinate";}i:2;i:4774;}i:182;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:4792;}i:183;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:4794;}i:184;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4795;}i:185;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4795;}i:186;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:4795;}i:187;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4795;}i:188;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:4795;}i:189;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:4796;}i:190;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4796;}i:191;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4796;}i:192;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:107:" Object Coordinate System: 也称作Local coordinate System，用來定义一個模型本身的坐標系。";}i:2;i:4801;}i:193;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4908;}i:194;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4908;}i:195;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4908;}i:196;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4908;}i:197;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:183:" World Coordinate System: 3d 虚拟世界中的绝对坐标系，定义好這個坐标系的原点就可以用来描述模型的实现的位置，Camera 的位置，光源的位置。";}i:2;i:4912;}i:198;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:5095;}i:199;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:5095;}i:200;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:5095;}i:201;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:5095;}i:202;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:" View Coordinate System: 一般使用用来计算光照效果。";}i:2;i:5099;}i:203;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:5163;}i:204;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:5163;}i:205;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:5163;}i:206;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:5163;}i:207;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:68:" Clip Coordinate System: 对 3D 场景使用投影机换裁剪視角";}i:2;i:5167;}i:208;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:5235;}i:209;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:5235;}i:210;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:5235;}i:211;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:5235;}i:212;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:62:" Normalized device coordinate System (NDC): 规范后坐标系";}i:2;i:5239;}i:213;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:5301;}i:214;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:5301;}i:215;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:5301;}i:216;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:5301;}i:217;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:107:" Windows Coordinate System: 最后屏幕显示的 2D 坐标系統，一般原点定义在屏幕左上角。";}i:2;i:5305;}i:218;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:5412;}i:219;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:5412;}i:220;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:5412;}i:221;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5412;}i:222;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:140:"10.FrameBuffer介绍
OpenGL ES 中的 FrameBuffer 指的是存储像素的内存空间。对应一个二维图像，如果屏幕分辨率为";}i:2;i:5414;}i:223;a:3:{i:0;s:14:"multiplyentity";i:1;a:2:{i:0;s:4:"1280";i:1;s:4:"1024";}i:2;i:5554;}i:224;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:501:" ，如果屏幕支持 24 位真彩色 (RGB)，
则存储这个屏幕区域的内存至少需要 1024X1280X3 个字节。此外如果需要支持透明度（Alpha），则一个像素需要 4 个字节。
对应 3D 图像来说，上面存储显示颜色的 Buffer 称为 Color Buffer，除 Color Buffer 之外，还需要存储每个像素和 View Point 之间的距离，
OpenGL ES 中使用 Depth Buffer 存储像素与眼睛（eye 或是 view point) 的距离，Depth Buffer 也可称为 z Buffer.";}i:2;i:5563;}i:225;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6064;}i:226;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6064;}i:227;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:128:"在 OpenGL ES 允许配置 Color Buffer 中 R,G,B,A 的颜色位数，Depth Buffer 的位数，以及 Stencil Buffer的位数：";}i:2;i:6066;}i:228;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6194;}i:229;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:6194;}i:230;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:6194;}i:231;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:6194;}i:232;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:113:" GL_RED_BITS,GL_GREEN_BITS,GL_BLUE_BITS, GL_ALPHA_BITS表示每个R，G，B，A在color buffers中所占的位数";}i:2;i:6198;}i:233;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:6311;}i:234;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:6311;}i:235;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:6311;}i:236;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:6311;}i:237;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:66:" GL_DEPTH_BITS 表示每个像素在depth buffer中所占的位数";}i:2;i:6315;}i:238;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:6381;}i:239;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:6381;}i:240;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:6381;}i:241;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:6381;}i:242;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:74:" GL_STENCIL_BITS 表示每个像素在stencil buffer中所占的位数   	";}i:2;i:6385;}i:243;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:6459;}i:244;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:6459;}i:245;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:6459;}i:246;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6459;}i:247;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:436:"在最终 OpenGL ES 写入这些 Buffer 时，OpenGL ES 提供一些 Mask 函数可以控制 Color Buffer 中 RGBA 通道，是否允许写入 Depth Buffer 等，
这些 Mask 函数可以打开或是关闭某个通道，只有通道打开后，对应的分量才会写入指定 Buffer,比如你可以关闭红色通道，这样最后写道 Color Buffer 中
就不含有红色。这些函数有 glColorMask, glDepthMask, glStencilMask。";}i:2;i:6461;}i:248;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6897;}i:249;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6897;}i:250;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:271:"11.Depth Buffer
OpenGL ES 中 Depth Buffer 保存了像素与观测点之间的距离信息，在绘制3D图形时，将只绘制可见的面而不去绘制隐藏的面，这个过程叫”Hidden surface removal” ，采用的算法为”The depth buffer algorithm”。";}i:2;i:6900;}i:251;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7171;}i:252;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7171;}i:253;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:388:"一般来说，填充的物体的顺序和其顺序是一致的，而要准确的显示绘制物体在Z轴的前后关系，就需要先绘制距离观测点(ViewPoint)最远的物体，再绘制离观测点较远的物体，最后绘制离观测点最近的物体，因此需要对应所绘制物体进行排序。OpenGL ES 中使用 Depth Buffer 存放需绘制物体的相对距离。 ";}i:2;i:7173;}i:254;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7561;}i:255;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7561;}i:256;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"深度测试过程：";}i:2;i:7563;}i:257;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7584;}i:258;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:7584;}i:259;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:7584;}i:260;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:7584;}i:261;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:382:" 将 Depth Buffer 中的值使用最大值清空整个 Depth Buffer，这个最大值缺省为1.0 ，为距离 viewPoint 最远的裁剪的距离。最小值为 0，表示距离 viewPoint 最近的裁剪面的距离。距离大小为相对值而非实际距离，这个值越大表示与 Viewpoint 之间的距离越大。因此将初值这设为 1.0 相当于清空 Depth Buffer。";}i:2;i:7588;}i:262;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:7970;}i:263;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:7970;}i:264;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:7970;}i:265;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:7970;}i:266;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:140:" 当 OpenGL 栅格化所绘制基本图形(Primitive)，将计算该 Primitive 与 viewpoint 之间的距离，保存在 Depth Buffer 中。";}i:2;i:7974;}i:267;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:8114;}i:268;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:8114;}i:269;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8114;}i:270;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8114;}i:271;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:367:" 然后比较所要绘制的图形的距离和当前 Depth Buffer 中的值，如果这个距离比 Depth Buffer 中的值小，表示这个物体离 viewPoint 较近，Open GL 则更新相应的 Color Buffer 并使用这个距离更新 Depth Buffer，否则，表示当前要绘制的图形在已绘制的部分物体后面，则无需绘制该图形（删除）。 ";}i:2;i:8118;}i:272;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:8485;}i:273;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:8485;}i:274;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:8485;}i:275;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:358:"  gl.Clear(GL10.GL_DEPTH_BUFFER_BIT) 清空 Depth Buffer (赋值为 1.0)通常清空 Depth Buffer 和 Color Buffer 同时进行。
  gl.glClearDepthf(float depth) 指定清空 Depth Buffer 是使用的值，缺省为 1.0，通常无需改变这个值，
  gl.glEnable(GL10.GL_DEPTH_TEST) 打开 depth Test
  gl.glDisable(GL10.GL_DEPTH_TEST) 关闭 depth Test";}i:2;i:8486;}i:276;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8486;}i:277;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"12.Opengl 光照模型";}i:2;i:8855;}i:278;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8877;}i:279;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:8877;}i:280;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:8877;}i:281;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:8877;}i:282;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:337:" 在 OpenGL 光照模型中光源和光照效果可以细分为红，绿，蓝三个部分，光源由红，绿，蓝强度来定义，而物体表面材料由其反射红，绿，蓝的程度和方向来定义。OpenGL 光照模型使用的计算公式是对于现实世界光照的一个近似但效果非常好并适合快速计算。";}i:2;i:8881;}i:283;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:9218;}i:284;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:9218;}i:285;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:9218;}i:286;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:9218;}i:287;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:113:" OpenGL 光照模型中定义的光源可以分别控制，打开或关闭，OpenGL ES支持最多八个光源。";}i:2;i:9222;}i:288;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:9335;}i:289;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:9335;}i:290;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:9335;}i:291;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:9335;}i:292;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:214:" OpenGL 光照模型中最终的光照效果可以分为四个组成部分：Emitted(光源）, ambient(环境光）,diffuse(漫射光）和specular（镜面反射光），最终结果由这四种光叠加而成。";}i:2;i:9339;}i:293;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:9553;}i:294;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:9553;}i:295;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:9553;}i:296;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:9553;}i:297;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:88:" Emitted ： 一般只发光物体或者光源，这种光不受其它光源的影响。";}i:2;i:9557;}i:298;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:9645;}i:299;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:9645;}i:300;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:9645;}i:301;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:9645;}i:302;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:235:" ambient: 指光线经过多次反射后已经无法得知其方向（可以看作来自所有方向），可以成为环境光，该光源如果射到某个平面，其反射方向为所有方向。Ambient 不依赖于光源的方向.";}i:2;i:9649;}i:303;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:9884;}i:304;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:9884;}i:305;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:9884;}i:306;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:9884;}i:307;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:440:" diffuse:当一束平行的入射光线射到粗糙的表面时，因面上凹凸不平，所以入射线虽然互相平行，由于各点的法线方向不一致，造成反射光线向不同的方向无规则地反射，这种反射称之为“漫反射”或“漫射”。这个反射的光则称为漫射光。漫射光射到某个平面时，其反射方向也为所有方向。diffuse 只依赖于光源的方向和法线的方向。";}i:2;i:9888;}i:308;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:10328;}i:309;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:10328;}i:310;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:10328;}i:311;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:10328;}i:312;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:179:" specular ： 一般指物体被光源直射的高亮区域，也可以成为镜面反射区，如金属。specular 依赖于光源的方向，法线的方向和视角的方向。";}i:2;i:10332;}i:313;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:10511;}i:314;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:10511;}i:315;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:10511;}i:316;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:10511;}i:317;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:244:" 尽管光源可能只发送某一频率的光线，但 ambient，diffuse 和 specular 可能不同。比如使用白光照射一堵红墙，散射的光线可能为红色。OpenGL 允许为光源分别设置红，绿，蓝三个元素的值。";}i:2;i:10515;}i:318;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:10759;}i:319;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:10759;}i:320;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:10759;}i:321;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:10759;}i:322;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:656:" 最终决定所看到物体的颜色除了光源的颜色和方向外，还取决于物体本身的颜色，比如红色的光照在红色的物体和蓝色的物体，最终看到的物体一个还是红色，一个为黑色。OpenGL 中对物体材料(Material)的颜色是通过其反射红，绿，蓝的比例来定义的。 和光源一样，物体的颜色也可以有不同的 ambient,diffuse 和 specular，表现为反射这些光的比例。ambient,diffuse 反射通常为同样的颜色，而 specular 常常表现为白色或灰色光，如使用白光照射一个红色的球，球的大部分区域显示为红色，而高亮区域为白色";}i:2;i:10763;}i:323;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:11419;}i:324;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:11419;}i:325;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:11419;}i:326;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:11419;}}