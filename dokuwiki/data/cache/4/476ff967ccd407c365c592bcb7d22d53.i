a:1491:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:19:"Android开发规范";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:33;}i:4;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:8:"1	介绍";i:1;i:2;i:2;i:33;}i:2;i:33;}i:5;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:33;}i:6;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:52;}i:7;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:10:"1.1	目的";i:1;i:3;i:2;i:52;}i:2;i:52;}i:8;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:52;}i:9;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:70;}i:10;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:70;}i:11;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:70;}i:12;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" 减少维护花费。";}i:2;i:74;}i:13;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:96;}i:14;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:96;}i:15;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:96;}i:16;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:96;}i:17;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:" 提高可读性。";}i:2;i:100;}i:18;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:119;}i:19;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:119;}i:20;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:119;}i:21;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:119;}i:22;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" 加快工作交接。";}i:2;i:123;}i:23;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:145;}i:24;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:145;}i:25;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:145;}i:26;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:145;}i:27;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" 减少名字增生。";}i:2;i:149;}i:28;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:171;}i:29;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:171;}i:30;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:171;}i:31;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:171;}i:32;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:" 降低缺陷引入的机会。";}i:2;i:175;}i:33;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:206;}i:34;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:206;}i:35;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:206;}i:36;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:208;}i:37;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:19:"1.2	术语和定义";i:1;i:3;i:2;i:208;}i:2;i:208;}i:38;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:208;}i:39;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:208;}i:40;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:72:"强制：编程时必须遵守的规定，含有强制字样或字体用";}i:2;i:236;}i:41;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:308;}i:42;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"加粗";}i:2;i:310;}i:43;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:316;}i:44;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"式样标注。";}i:2;i:318;}i:45;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:333;}i:46;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:333;}i:47;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:72:"推荐：编程时推荐遵守的规定，字体用普通式样标注。";}i:2;i:335;}i:48;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:407;}i:49;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:409;}i:50;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:14:"2	文件组织";i:1;i:2;i:2;i:409;}i:2;i:409;}i:51;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:409;}i:52;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:409;}i:53;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:"避免超过 2000 行的源文件。";}i:2;i:434;}i:54;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:470;}i:55;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:472;}i:56;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:24:"2.1	Java 包和源文件";i:1;i:3;i:2;i:472;}i:2;i:472;}i:57;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:472;}i:58;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:472;}i:59;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:171:"每个 Java 源文件都包含一个单一的公共类或接口。若私有类和接口与一个公共类相关联，可以将它们和公共类放入同一个源文件。";}i:2;i:505;}i:60;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:676;}i:61;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:57:"公共类必须是这个文件中的第一个类或接口";}i:2;i:678;}i:62;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:735;}i:63;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"。";}i:2;i:737;}i:64;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:740;}i:65;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:740;}i:66;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:38:"Java 源文件还遵循以下规则：";}i:2;i:742;}i:67;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:781;}i:68;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:781;}i:69;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:781;}i:70;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:781;}i:71;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:" 开头注释";}i:2;i:785;}i:72;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:798;}i:73;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:798;}i:74;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:798;}i:75;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:798;}i:76;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:" 包和引入语句";}i:2;i:802;}i:77;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:821;}i:78;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:821;}i:79;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:821;}i:80;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:821;}i:81;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:" 类和接口声明";}i:2;i:825;}i:82;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:844;}i:83;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:844;}i:84;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:844;}i:85;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:845;}i:86;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:18:"2.1.1	开头注释";i:1;i:4;i:2;i:845;}i:2;i:845;}i:87;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:845;}i:88;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:845;}i:89;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:108:"所有的源文件都应该在开头有一个的注释，其中列出版本信息、日期和版权声明。";}i:2;i:870;}i:90;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:984;}i:91;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:107:"
/*
 * Copyright (c) 2014 SIMCOM, Inc.
 * All Rights Reserved.
 * SIMCOM Proprietary and Confidential.
 */
";i:1;s:4:"java";i:2;N;}i:2;i:984;}i:92;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1106;}i:93;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:24:"2.1.2	包和引入语句";i:1;i:4;i:2;i:1106;}i:2;i:1106;}i:94;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:1106;}i:95;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1106;}i:96;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:30:"在多数 Java 源文件中，";}i:2;i:1137;}i:97;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:1167;}i:98;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:"第一个非注释行是包语句";}i:2;i:1169;}i:99;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:1202;}i:100;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:"，在它之后可以跟引入语句。";}i:2;i:1204;}i:101;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1249;}i:102;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:55:"
package com.android.sim;

import java.io.IOException;
";i:1;s:4:"java";i:2;N;}i:2;i:1249;}i:103;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1249;}i:104;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:69:"在导入包时当完全限制代码所使用的类的名字，尽量";}i:2;i:1318;}i:105;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:1387;}i:106;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"少用通配符";}i:2;i:1389;}i:107;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:1404;}i:108;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:210:"的方式，但导入一些通用包，或用到一个包下大部分类时，则可是使用通配符方式。同一包中的类在导入时应声明在一起，无效的未使用到的引用要即时删除。";}i:2;i:1406;}i:109;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1616;}i:110;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1618;}i:111;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:24:"2.1.3	类和接口声明";i:1;i:4;i:2;i:1618;}i:2;i:1618;}i:112;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:1618;}i:113;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1618;}i:114;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:96:"下表（强制）描述了类和接口声明的各个部分以及它们出现的先后次序。";}i:2;i:1649;}i:115;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1745;}i:116;a:3:{i:0;s:10:"table_open";i:1;a:3:{i:0;i:2;i:1;i:8;i:2;i:1746;}i:2;i:1745;}i:117;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:1745;}i:118;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:1745;}i:119;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:46:" 类/接口声明的各部分	                ";}i:2;i:1747;}i:120;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:1793;}i:121;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:1793;}i:122;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:78:" 说明                                                                       ";}i:2;i:1794;}i:123;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:1872;}i:124;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:1873;}i:125;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:1873;}i:126;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:1873;}i:127;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:" 类/接口文档注释(/";}i:2;i:1875;}i:128;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:2:"**";}i:2;i:1908;}i:129;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"……*/)           ";}i:2;i:1919;}i:130;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:1939;}i:131;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:1939;}i:132;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:" 类和接口应该有标准 Javadoc 注释。                                  ";}i:2;i:1940;}i:133;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:2020;}i:134;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:2021;}i:135;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:2021;}i:136;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:2021;}i:137;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:49:" 类或接口的声明                           ";}i:2;i:2023;}i:138;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:2072;}i:139;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:2072;}i:140;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:103:" 类名和接口的第一个字符大写，每个单词的首字母大写，中间可以有下划线。";}i:2;i:2073;}i:141;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:2176;}i:142;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:2177;}i:143;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:2177;}i:144;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:2177;}i:145;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:52:" 类/接口实现的长度限制                    ";}i:2;i:2179;}i:146;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:2231;}i:147;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:2231;}i:148;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:59:" 限制一个匿名内部类的长度不要超过 80 行。";}i:2;i:2232;}i:149;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:2291;}i:150;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:2292;}i:151;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:2292;}i:152;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:2292;}i:153;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:48:" 类的(静态)变量                           ";}i:2;i:2294;}i:154;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:2342;}i:155;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:2342;}i:156;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:221:" 首先是类的公共变量，随后是保护变量，再后是包一级别的变量（没有访问修饰符，access modifier），最后是私有变量。静态 final 变量应全部大写，中间可以有下划线。";}i:2;i:2343;}i:157;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:2564;}i:158;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:2565;}i:159;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:2565;}i:160;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:2565;}i:161;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:46:" 实例变量                                 ";}i:2;i:2567;}i:162;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:2613;}i:163;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:2819;}i:164;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:2819;}i:165;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:2819;}i:166;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:2819;}i:167;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:2819;}i:168;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:2819;}i:169;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:" 构造器                                   ";}i:2;i:2821;}i:170;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:2866;}i:171;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:2866;}i:172;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:69:" 构造器的代码长度（不计空行），不应超过 200 行。";}i:2;i:2867;}i:173;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:2936;}i:174;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:2937;}i:175;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:2937;}i:176;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:2937;}i:177;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:" 方法                                     ";}i:2;i:2939;}i:178;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:2983;}i:179;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:2983;}i:180;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:473:" 方法名应为动词或动宾短语，首字母小写，其后每个单词首字母大写，方法的参数不要超过 8个，参数名字必须和变量的命名规范一致，public 的方法之前应该有 Javadoc 注释，方法之后的大括号位于行尾。方法应该保持简短和重点突出，对方法的代码长度并没有硬性的限制。如果方法代码超过了 40 行，就该考虑是否可以在不损害程序结构的前提下进行分拆。";}i:2;i:2984;}i:181;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:3457;}i:182;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:3458;}i:183;a:3:{i:0;s:11:"table_close";i:1;a:1:{i:0;i:3458;}i:2;i:3458;}i:184;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3461;}i:185;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:14:"3	缩进排版";i:1;i:2;i:2;i:3461;}i:2;i:3461;}i:186;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:3461;}i:187;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3461;}i:188;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:3486;}i:189;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"4 个空格";}i:2;i:3488;}i:190;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:3499;}i:191;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:61:"作为缩进排版的一个单位，不使用制表符 tab。";}i:2;i:3501;}i:192;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3562;}i:193;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3562;}i:194;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:3564;}i:195;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"8 个空格";}i:2;i:3566;}i:196;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:3577;}i:197;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:57:"作为换行后的缩进，包括函数调用和赋值。";}i:2;i:3579;}i:198;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3642;}i:199;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:176:"
Instrument i =
        someLongexpression_r(that, NotFit, on, one, line);    // 推荐

Instrument i =
    someLongexpression_r(that, NotFit, on, one, line);        // 避免
";i:1;s:4:"java";i:2;N;}i:2;i:3642;}i:200;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3833;}i:201;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:13:"3.1	行长度";i:1;i:3;i:2;i:3833;}i:2;i:3833;}i:202;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:3833;}i:203;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3833;}i:204;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:"尽量避免一行的长度超过 100 个字符。";}i:2;i:3855;}i:205;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3905;}i:206;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3905;}i:207;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:156:"例外：如果注释行包含了超过 100 个字符的命令示例或者 url 文字，为了便于剪切和复制，其长度可以超过 100 个字符。";}i:2;i:3907;}i:208;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4063;}i:209;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4063;}i:210;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:121:"例外：import 行可以超过限制，因为很少有人会去阅读它。这也简化了编程工具的写入操作。";}i:2;i:4065;}i:211;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4186;}i:212;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4188;}i:213;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:10:"3.2	括号";i:1;i:3;i:2;i:4188;}i:2;i:4188;}i:214;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:4188;}i:215;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4188;}i:216;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:4207;}i:217;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:30:"大括号不单独占用一行";}i:2;i:4209;}i:218;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:4239;}i:219;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:"，应紧接着上一行书写。";}i:2;i:4241;}i:220;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4280;}i:221;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:187:"
class MyClass {
    int func() {
        if (something) {
            // ...
        } else if (somethingElse) {
            // ...
        } else {
            // ...
        }
    }
}
";i:1;s:4:"java";i:2;N;}i:2;i:4280;}i:222;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4280;}i:223;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:246:"我们需要用大括号来包裹条件语句块。不过也有例外，如果整个条件语句块（条件和语句本身）都能容纳在一行内，也可以（但不是必须）把它们放入同一行中。也就是说，这是合法的：";}i:2;i:4481;}i:224;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4733;}i:225;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:149:"
if (condition) {
    body();
}                    	  // 推荐
if (condition) body();    // 避免
if (condition)
    body();          	  // 错误
";i:1;s:4:"java";i:2;N;}i:2;i:4733;}i:226;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4897;}i:227;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:10:"3.3	换行";i:1;i:3;i:2;i:4897;}i:2;i:4897;}i:228;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:4897;}i:229;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4897;}i:230;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:87:"当一个表达式无法容纳在一行内时，可以依据如下一般规则断开：";}i:2;i:4916;}i:231;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5003;}i:232;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:5003;}i:233;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:5003;}i:234;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:5003;}i:235;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:" 在一个逗号后面断开。";}i:2;i:5007;}i:236;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:5038;}i:237;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:5038;}i:238;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:5038;}i:239;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:5038;}i:240;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:" 在一个操作符前面断开。";}i:2;i:5042;}i:241;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:5076;}i:242;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:5076;}i:243;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:5076;}i:244;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:5076;}i:245;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:67:" 宁可选择较高级别的断开，而非较低级别的断开。";}i:2;i:5080;}i:246;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:5147;}i:247;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:5147;}i:248;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:5147;}i:249;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:5147;}i:250;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:73:" 新的一行应该与上一行同一级别表达式的开头处对齐。";}i:2;i:5151;}i:251;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:5224;}i:252;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:5224;}i:253;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:5224;}i:254;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:5224;}i:255;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:120:" 如果以上规则导致你的代码混乱或者使你的代码都堆挤在右边，那就代之以缩进 8个空格。";}i:2;i:5228;}i:256;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:5348;}i:257;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:5348;}i:258;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:5348;}i:259;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5348;}i:260;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:"以下是断开方法调用的一些例子：";}i:2;i:5351;}i:261;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5402;}i:262;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:248:"
someMethod(longExpression1, longExpression2, longExpression3,
        longExpression4, longExpression5);

var = someMethod1(longExpression1,
                      someMethod2(longExpression2,
                                    longExpression3));
";i:1;s:4:"java";i:2;N;}i:2;i:5402;}i:263;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5402;}i:264;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:144:"以下是两个断开算术表达式的例子。前者更好，因为断开处位于括号表达式的外边，这是个较高级别的断开。";}i:2;i:5664;}i:265;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5814;}i:266;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:167:"
long1 = long2 * (long3 + long4 - long5)
        + 4 * longname6;             // 推荐

long1 = long2 * (long3 + long4
               - long5) + 4 * long6; // 避免
";i:1;s:4:"java";i:2;N;}i:2;i:5814;}i:267;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5814;}i:268;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:189:"以下是两个缩进方法声明的例子。前者是常规情形。后者若使用常规的缩进方式将会使第二行和第三行移得很靠右，所以代之以缩进 8 个空格。";}i:2;i:5995;}i:269;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6190;}i:270;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:318:"
// 常规缩进
someMethod(int anArg, Object anotherArg, String yetAnotherArg,
            Object andStillAnother) {
...
}
// 为避免太靠右，用8个空格缩进
private static synchronized	horkingLongMethodName(int anArg,
        Object anotherArg, String yetAnotherArg,
        Object andStillAnother) {
...
}
";i:1;s:4:"java";i:2;N;}i:2;i:6190;}i:271;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6190;}i:272;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:137:"if 语句的换行通常使用 8 个空格的规则，因为常规缩进（4 个空格）会使语句体看起来比较费劲。比如：";}i:2;i:6522;}i:273;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6665;}i:274;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:683:"
// 请不要使用这种缩进
if ((condition1 && condition2)
    || (condition3 && condition4)
    ||!(condition5 && condition6)) {    // 不好的缩进
    doSomethingAboutIt();               // 该行和if条件处于同一级
}                                       // 避免

// 使用这种缩进
if ((condition1 && condition2)
        || (condition3 && condition4)
        ||!(condition5 && condition6)) {
    doSomethingAboutIt();
}                                       // 推荐

// 或这种
if ((condition1 && condition2) || (condition3 && condition4)
        ||!(condition5 && condition6)) {
    doSomethingAboutIt();
}                                       // 推荐
";i:1;s:4:"java";i:2;N;}i:2;i:6665;}i:275;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6665;}i:276;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:66:"这里有三种可行的方法用于处理三元运算表达式：";}i:2;i:7362;}i:277;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7434;}i:278;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:198:"
alpha = (aLongBooleanExpression) ? beta : gamma;
alpha = (aLongBooleanExpression) ? beta
                                 : gamma;

alpha = (aLongBooleanExpression)
        ? beta
        : gamma;
";i:1;s:4:"java";i:2;N;}i:2;i:7434;}i:279;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:7647;}i:280;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:8:"4	注释";i:1;i:2;i:2;i:7647;}i:2;i:7647;}i:281;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:7647;}i:282;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7647;}i:283;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:52:"Java 程序有两类注释：实现注释（使用/*";}i:2;i:7667;}i:284;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:7719;}i:285;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"*/和";}i:2;i:7722;}i:286;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:2:"//";}i:2;i:7735;}i:287;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:"界定的注释）和文档注释（由/";}i:2;i:7746;}i:288;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:2:"**";}i:2;i:7794;}i:289;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:7805;}i:290;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:62:"*/界定，可通过 javadoc 工具转换成 html 文件）。";}i:2;i:7808;}i:291;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7870;}i:292;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7870;}i:293;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:171:"实现注释用以注释代码或者实现细节。文档注释从实现自由的角度描述代码的规范。它可以被那些手头没有源码的开发人员读懂。";}i:2;i:7872;}i:294;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8043;}i:295;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8043;}i:296;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:258:"注释应被用来给出代码的总括，并提供代码自身没有提供的附加信息。注释应该仅包含与阅读和理解程序有关的信息。例如，相应的包如何被建立或位于哪个目录下之类的信息不应包括在注释中。";}i:2;i:8045;}i:297;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8303;}i:298;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8303;}i:299;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:168:"在注释里，对设计决策中重要的或者不是显而易见的地方进行说明是可以的，但应避免提供代码中己清晰表达出来的重复信息。";}i:2;i:8305;}i:300;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8473;}i:301;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8473;}i:302;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:135:"注释不应写在用星号或其他字符画出来的大框里。注释不应包括诸如制表符和回退符之类的特殊字符。";}i:2;i:8475;}i:303;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8610;}i:304;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8610;}i:305;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:69:"使用 Javadoc 标准注释，每个文件的开头都应该有一句";}i:2;i:8612;}i:306;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8681;}i:307;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"版权说明";}i:2;i:8683;}i:308;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8695;}i:309;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:61:"。然后下面应该是package 包语句和 import 语句，";}i:2;i:8697;}i:310;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8758;}i:311;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:"每个语句块之间用空行分隔";}i:2;i:8760;}i:312;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8796;}i:313;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:92:"。然后是类或接口的定义。在Javadoc 注释中，应描述类或接口的用途。";}i:2;i:8798;}i:314;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8896;}i:315;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:377:"
/*
 * Copyright (c) 2014 SIMCOM, Inc.
 * All Rights Reserved.
 * SIMCOM Proprietary and Confidential.
 */

package com.android.internal.foo;

import android.os.Blah;
import android.view.Yada;

import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * 一句话功能描述
 * 功能详细描述
 * @see 相关类/方法
 * @deprecated
 */

public class Foo {
    ...
}
";i:1;s:4:"java";i:2;N;}i:2;i:8896;}i:316;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8896;}i:317;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:35:"每个类和自建的 public 方法";}i:2;i:9287;}i:318;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:9322;}i:319;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:"必须包含 Javadoc 注释";}i:2;i:9324;}i:320;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:9351;}i:321;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:84:"，注释至少要包含描述该类或方法用途的语句。并且该语句应该";}i:2;i:9353;}i:322;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:9437;}i:323;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:"用第三人称的动词形式来开头";}i:2;i:9439;}i:324;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:9478;}i:325;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"。";}i:2;i:9480;}i:326;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9489;}i:327;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:295:"
/** Returns the correctly rounded positive square root of a double
value. */
static double sqrt(double a) {
    ...
}

or

/**
 * Constructs a new String by converting the specified array of 
 * bytes using the platform's default character encoding.
 */
public String(byte[] bytes) {
    ...
}
";i:1;s:4:"java";i:2;N;}i:2;i:9489;}i:328;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9489;}i:329;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:353:"如果所有的 Javadoc 都会写成“sets Foo”，对于那些无关紧要的类似 setFoo()的 get和 set 语句是不必撰写 Javadoc 的。如果方法执行了比较复杂的操作（比如执行强制约束或者产生很重要的副作用），那就必须进行注释。如果“Foo”属性的意义不容易理解，也应该进行注释。";}i:2;i:9798;}i:330;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10151;}i:331;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10151;}i:332;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:111:"无论是 public 的还是其它类型的，所有自建的方法都将受益于 Javadoc。public 的方法是 ";}i:2;i:10153;}i:333;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"API";}i:2;i:10264;}i:334;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:" 的组成部分，因此更需要 Javadoc。";}i:2;i:10267;}i:335;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10312;}i:336;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:10314;}i:337;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:25:"4.1	实现注释的格式";i:1;i:3;i:2;i:10314;}i:2;i:10314;}i:338;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:10314;}i:339;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10314;}i:340;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:78:"程序可以有 4 种实现注释的风格：块、单行、尾端和行末。";}i:2;i:10348;}i:341;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10426;}i:342;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:10428;}i:343;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:15:"4.1.1	块注释";i:1;i:4;i:2;i:10428;}i:2;i:10428;}i:344;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:10428;}i:345;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10428;}i:346;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:306:"块注释通常用于提供对文件，方法，数据结构和算法的描述。块注释被置于每个文件的开始处以及每个方法之前。它们也可以用于其他地方，比如方法内部。在功能和方法内部的块注释应该和它们所描述的代码具有一样的缩进格式。";}i:2;i:10450;}i:347;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10756;}i:348;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10756;}i:349;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:87:"块注释之首应该有一个空行，用于块注释和代码分割开来，比如：";}i:2;i:10758;}i:350;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10851;}i:351;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:36:"
/*
 * Here is a block comment.
 */
";i:1;s:4:"java";i:2;N;}i:2;i:10851;}i:352;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10851;}i:353;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:117:"块注释可以以/*-开头，这样indent(1)就可以将之识别为一个代码块的开始，而不是重排它。";}i:2;i:10901;}i:354;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:11024;}i:355;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:160:"
/*-
  * Here is a block comment with some very special
  * formatting that I want indent(1) to ignore.
  *
  *    one
  *        two
  *            three
  */
";i:1;s:4:"java";i:2;N;}i:2;i:11024;}i:356;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:11199;}i:357;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:18:"4.1.2	单行注释";i:1;i:4;i:2;i:11199;}i:2;i:11199;}i:358;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:11199;}i:359;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:11199;}i:360;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:277:"短注释可以显示在一行内，并与其后的代码具有一样的缩进层级。如果一个注释不能在一行内写完，就该采用块注释（参见“块注释”）。单行注释之前应该有一个空行。以下是一个Java代码中单行注释的例子：";}i:2;i:11224;}i:361;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:11507;}i:362;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:92:"
        if (condition) {
            /* Handle the condition. */
            …
        }
";i:1;s:4:"java";i:2;N;}i:2;i:11507;}i:363;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:11614;}i:364;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:18:"4.1.3	尾端注释";i:1;i:4;i:2;i:11614;}i:2;i:11614;}i:365;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:11614;}i:366;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:11614;}i:367;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:210:"极短的注释可以与它们所要描述的代码位于同一行，但是应该有足够的空白来分开代码和注释。若有多个短注释出现于大量代码中，它们应该具有相同的缩进。";}i:2;i:11639;}i:368;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:11849;}i:369;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:11849;}i:370;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:52:"以下是一个Java代码中尾端注释的例子：";}i:2;i:11851;}i:371;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:11909;}i:372;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:155:"
        if (a == 2) {
            return true; 			/* special case */
        } else {
            return isPrime(a);	/* works only for odd a */
        }
";i:1;s:4:"java";i:2;N;}i:2;i:11909;}i:373;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:12080;}i:374;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:18:"4.1.4	行末注释";i:1;i:4;i:2;i:12080;}i:2;i:12080;}i:375;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:12080;}i:376;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12080;}i:377;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:"注释界定符“";}i:2;i:12105;}i:378;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:2:"//";}i:2;i:12131;}i:379;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:204:"”，可以注释掉整行或者一行中的一部分。它一般不用于连续多行的注释文本；然而，它可以用来注释掉连续多行的代码段。以下是所有三种风格的例子：";}i:2;i:12142;}i:380;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12352;}i:381;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:297:"
        if (foo > 1) {
            // Do a double-flip.
            ...
        } else {
            return false;		// Explain why here.
        }

        //if (bar > 1) {
        //
        //    // Do a triple-flip.
        //    ...
        //} else {
        //    return false;
        //}
";i:1;s:4:"java";i:2;N;}i:2;i:12352;}i:382;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:12664;}i:383;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:16:"4.2	文档注释";i:1;i:4;i:2;i:12664;}i:2;i:12664;}i:384;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:12664;}i:385;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12664;}i:386;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:127:"文档注释描述 Java 的类、接口、构造器，方法，以及字段。每个文档注释都会被置于注释定界符/";}i:2;i:12687;}i:387;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:2:"**";}i:2;i:12822;}i:388;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:12833;}i:389;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:59:"*/之中，一个注释对应一个类、接口或成员。";}i:2;i:12836;}i:390;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12895;}i:391;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12895;}i:392;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:"该注释应位于声明之前：";}i:2;i:12897;}i:393;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12936;}i:394;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:77:"
/**
 * The Example class providers ...
 */
public class Example {
    ...
}
";i:1;s:4:"java";i:2;N;}i:2;i:12936;}i:395;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:12936;}i:396;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:121:"注意顶层的类和接口是不缩进的，而其成员是缩进的。描述类和接口的文档注释的第一行（/";}i:2;i:13027;}i:397;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:2:"**";}i:2;i:13156;}i:398;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:198:"）不需缩进，随后的文档注释每行都缩进 1 格（使星号纵向对齐）。成员，包括构造函数在内，其文档注释的第一行缩进 4 格，随后每行都缩进 5 格。";}i:2;i:13167;}i:399;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13365;}i:400;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13365;}i:401;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:309:"若你想给出有关类、接口、变量或方法的信息，而这些信息又不适合写在文档中，则可使用实现块注释或紧跟在声明后面的单行注释。例如，有关一个类实现的细节，应放入紧跟在类声明后面的实现块注释中，而不是放在文档注释中。";}i:2;i:13367;}i:402;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13676;}i:403;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13676;}i:404;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:144:"文档注释不能放在一个方法或构造器的定义块中，因为 Java 会将位于文档注释之后的第一个声明与其相关联。";}i:2;i:13678;}i:405;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13822;}i:406;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:13824;}i:407;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:15:"4.2.1	类注释";i:1;i:4;i:2;i:13824;}i:2;i:13824;}i:408;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:13824;}i:409;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13824;}i:410;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:193:"在类、接口定义之前当对其进行注释，包括类、接口的目的、作用、功能、继承于何种
父类，实现的接口、实现的算法、使用方法、示例程序等。";}i:2;i:13846;}i:411;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:14045;}i:412;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:96:"
/**
 * 一句话功能描述
 * 功能详细描述
 * @see 相关类/方法
 * @deprecated
 */
";i:1;s:4:"java";i:2;N;}i:2;i:14045;}i:413;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:14156;}i:414;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:18:"4.2.2	方法注释";i:1;i:4;i:2;i:14156;}i:2;i:14156;}i:415;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:14156;}i:416;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:14156;}i:417;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:137:"据标准Javadoc规范对方法进行注释，以明确该方法功能、作用、各参数含义以及返回值等。复杂的算法用/";}i:2;i:14181;}i:418;a:3:{i:0;s:11:"unformatted";i:1;a:1:{i:0;s:2:"**";}i:2;i:14326;}i:419;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:"/在方法内注解出。";}i:2;i:14337;}i:420;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:14362;}i:421;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:14362;}i:422;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:14362;}i:423;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:14362;}i:424;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:46:" 参数注释时当注明其取值范围等。";}i:2;i:14366;}i:425;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:14412;}i:426;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:14412;}i:427;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:14412;}i:428;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:14412;}i:429;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:67:" 返回值当注释出失败、错误、异常时的返回情况。";}i:2;i:14416;}i:430;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:14483;}i:431;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:14483;}i:432;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:14483;}i:433;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:14483;}i:434;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:94:" 异常当注释出什么情况、什么时候、什么条件下会引发什么样的异常。";}i:2;i:14487;}i:435;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:14581;}i:436;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:14581;}i:437;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:14581;}i:438;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:215:"
/**
 * 一句话方法描述
 * 方法详细描述
 * @param 参数名 参数描述
 * @param 参数名2 参数描述
 * @return 返回值类型说明
 * @throws Exception 异常说明
 * @see 类/方法/成员
*/
";i:1;s:4:"java";i:2;N;}i:2;i:14587;}i:439;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:14817;}i:440;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:36:"4.2.3	类成员变量和常量注释";i:1;i:4;i:2;i:14817;}i:2;i:14817;}i:441;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:14817;}i:442;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:14817;}i:443;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:100:"成员变量和常量需要使用javadoc形式的注释，以说明当前变量或常量的含义。";}i:2;i:14860;}i:444;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:14966;}i:445;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:98:"
/**
 * 成员变量描述
 */
private String test;

/** 成员变量描述 */
private int hello;
";i:1;s:4:"java";i:2;N;}i:2;i:14966;}i:446;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:15080;}i:447;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:8:"5	声明";i:1;i:2;i:2;i:15080;}i:2;i:15080;}i:448;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:15080;}i:449;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:15099;}i:450;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:31:"5.1	每行声明变量的数量";i:1;i:3;i:2;i:15099;}i:2;i:15099;}i:451;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:15099;}i:452;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:15099;}i:453;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:15139;}i:454;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:"推荐一行一个声明";}i:2;i:15141;}i:455;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:15165;}i:456;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:"，因为这样以利于写注释。";}i:2;i:15167;}i:457;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:15209;}i:458;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:68:"
int level;	 // indentation level
int size;        // size of table
";i:1;s:4:"java";i:2;N;}i:2;i:15209;}i:459;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:15209;}i:460;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:132:"注意：上面的例子中，在类型和标识符之间放了一个空格，另一种被允许的替代方式是使用制表符。";}i:2;i:15291;}i:461;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:15429;}i:462;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:92:"
int		level;		// indentation level
int		size;		// size of table
char		username;	// username
";i:1;s:4:"java";i:2;N;}i:2;i:15429;}i:463;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:15536;}i:464;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:13:"5.2	初始化";i:1;i:4;i:2;i:15536;}i:2;i:15536;}i:465;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:15536;}i:466;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:15536;}i:467;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:135:"尽量在声明局部变量的同时初始化。唯一不这么做的理由是变量的初始值依赖于某些先前发生的计算。";}i:2;i:15556;}i:468;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:15691;}i:469;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:15693;}i:470;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:10:"5.3	布局";i:1;i:4;i:2;i:15693;}i:2;i:15693;}i:471;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:15693;}i:472;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:15693;}i:473;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:84:"只在代码块的开始处声明变量（一个块是指任何被包含在大括号";}i:2;i:15710;}i:474;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:15794;}i:475;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"{";}i:2;i:15795;}i:476;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:15796;}i:477;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"和";}i:2;i:15797;}i:478;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:15800;}i:479;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"}";}i:2;i:15801;}i:480;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:15802;}i:481;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:177:"中间的代码）。不要在首次用到该变量时才声明之。这会把注意力不集中的程序员搞糊涂，同时会妨碍代码在该作用域内的可移植性。";}i:2;i:15803;}i:482;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:15986;}i:483;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:158:"
void myMethod() {
int int1 = 0;		// beginning of method block

    if (condition) {
        int int2 = 0;	// beginning of “if” block
        ...
    }
}
";i:1;s:4:"java";i:2;N;}i:2;i:15986;}i:484;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:15986;}i:485;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:123:"避免声明的局部变量覆盖上一级声明的变量。例如，不要在内部代码块中声明相同的变量名：";}i:2;i:16158;}i:486;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:16287;}i:487;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:113:"
int count;
...
myMethod() {
    if (condition) {
        int count = 0;     // 避免
        ...
   }
   ...
}
";i:1;s:4:"java";i:2;N;}i:2;i:16287;}i:488;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:16415;}i:489;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:25:"5.4	类和接口的声明";i:1;i:3;i:2;i:16415;}i:2;i:16415;}i:490;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:16415;}i:491;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:16415;}i:492;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:72:"当编写类和接口是，应该（强制）遵守以下格式规则：";}i:2;i:16449;}i:493;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:16521;}i:494;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:16521;}i:495;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:16521;}i:496;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:16521;}i:497;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:49:" 在方法名与其参数列表之前的左括号";}i:2;i:16525;}i:498;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:16574;}i:499;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"(";}i:2;i:16575;}i:500;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:16576;}i:501;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"间不要有空格。";}i:2;i:16577;}i:502;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:16598;}i:503;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:16598;}i:504;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:16598;}i:505;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:16598;}i:506;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:" 左大括号";}i:2;i:16602;}i:507;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:16615;}i:508;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"{";}i:2;i:16616;}i:509;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:16617;}i:510;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:"位于声明语句同行的末尾。";}i:2;i:16618;}i:511;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:16654;}i:512;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:16654;}i:513;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:16654;}i:514;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:16654;}i:515;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:" 右大括号";}i:2;i:16658;}i:516;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:16671;}i:517;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"}";}i:2;i:16672;}i:518;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:16673;}i:519;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:75:"另起一行，与相应的声明语句对齐。除非是一个空语句，";}i:2;i:16674;}i:520;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:16749;}i:521;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"}";}i:2;i:16750;}i:522;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:16751;}i:523;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"应紧跟在";}i:2;i:16752;}i:524;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:16764;}i:525;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"{";}i:2;i:16765;}i:526;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:16766;}i:527;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"之后。";}i:2;i:16767;}i:528;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:16776;}i:529;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:16776;}i:530;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:16776;}i:531;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:16776;}i:532;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:" 方法与方法之间以空行分隔。";}i:2;i:16780;}i:533;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:16820;}i:534;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:16820;}i:535;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:16820;}i:536;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:169:"
class Sample extends Object {
    int ivar1;
    int ivar2;

    Sample(int i,	int j) {
        ivar1 = i;
        ivar2 = j;
    }

    int emptyMethod() {}
    ...
}
";i:1;s:4:"java";i:2;N;}i:2;i:16826;}i:537;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:17010;}i:538;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:8:"6	语句";i:1;i:2;i:2;i:17010;}i:2;i:17010;}i:539;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:17010;}i:540;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:17029;}i:541;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:16:"6.1	简单语句";i:1;i:3;i:2;i:17029;}i:2;i:17029;}i:542;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:17029;}i:543;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:17029;}i:544;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:42:"每行之多包含一条语句，例如：";}i:2;i:17054;}i:545;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:17102;}i:546;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:86:"
    argv++;     	// 推荐
    argc--;     	// 推荐
    argv++; argc--; 	// 避免
";i:1;s:4:"java";i:2;N;}i:2;i:17102;}i:547;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:17204;}i:548;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:16:"6.2	复合语句";i:1;i:3;i:2;i:17204;}i:2;i:17204;}i:549;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:17204;}i:550;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:17204;}i:551;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:60:"复合语句是包含在大括号中的语句序列，形如";}i:2;i:17229;}i:552;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:17289;}i:553;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"{	语句  }";}i:2;i:17290;}i:554;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:17301;}i:555;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:"。例如下面各段。";}i:2;i:17302;}i:556;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:17326;}i:557;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:17326;}i:558;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:17326;}i:559;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:17326;}i:560;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:67:" 被括其中的语句应该较之复合语句缩进一个层次。";}i:2;i:17330;}i:561;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:17397;}i:562;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:17397;}i:563;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:17397;}i:564;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:17397;}i:565;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:" 左大括号";}i:2;i:17401;}i:566;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:17414;}i:567;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"{";}i:2;i:17415;}i:568;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:17416;}i:569;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:54:"应位于复合语句起始行的行尾，右大括号";}i:2;i:17417;}i:570;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:17471;}i:571;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"}";}i:2;i:17472;}i:572;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:17473;}i:573;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:48:"应另起一行并与复合语句首行对齐。";}i:2;i:17474;}i:574;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:17522;}i:575;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:17522;}i:576;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:17522;}i:577;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:17522;}i:578;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:208:" 大括号可以被用于所有语句，包括单个语句，只要这些语句是诸如 if-else 或 for 控制结构的一部分。这样便于添加语句而无需担心由于忘了加括号而引入 bug。";}i:2;i:17526;}i:579;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:17734;}i:580;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:17734;}i:581;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:17734;}i:582;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:17736;}i:583;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:16:"6.3	返回语句";i:1;i:3;i:2;i:17736;}i:2;i:17736;}i:584;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:17736;}i:585;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:17736;}i:586;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:51:"一个带返回值的return语句不使用小括号";}i:2;i:17761;}i:587;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:17812;}i:588;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"()";}i:2;i:17813;}i:589;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:17815;}i:590;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:68:"，除非它们以某种方式使返回值更为显
见。
例如：";}i:2;i:17816;}i:591;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:17890;}i:592;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:109:"
return;

return myDisk.size();                  // 避免

return (size ? size : defaultSize);    // 避免
";i:1;s:4:"java";i:2;N;}i:2;i:17890;}i:593;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:18014;}i:594;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:39:"6.4	if, if-else, if else-if else 语句";i:1;i:3;i:2;i:18014;}i:2;i:18014;}i:595;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:18014;}i:596;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:18014;}i:597;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:"if-else语句应该具有如下格式：";}i:2;i:18062;}i:598;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:18108;}i:599;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:197:"
if (condition) {
    statements;
}

if (condition) {
    statements;
} else {
    statements;
}

if (condition) {
    statements;
} else if (condition) {
    statements;
} else{
    statements;
}
";i:1;s:4:"java";i:2;N;}i:2;i:18108;}i:600;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:18108;}i:601;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:"注意：if语句总是用";}i:2;i:18319;}i:602;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:18345;}i:603;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"{";}i:2;i:18346;}i:604;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:18347;}i:605;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"和";}i:2;i:18348;}i:606;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:18351;}i:607;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"}";}i:2;i:18352;}i:608;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:18353;}i:609;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:60:"括起来，避免使用如下容易引起错误的格式：";}i:2;i:18354;}i:610;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:18420;}i:611;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:42:"
if (condition)  // 避免
    statement;
";i:1;s:4:"java";i:2;N;}i:2;i:18420;}i:612;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:18477;}i:613;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:14:"6.5	for 语句";i:1;i:3;i:2;i:18477;}i:2;i:18477;}i:614;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:18477;}i:615;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:18477;}i:616;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:42:"一个for语句应该具有如下格式：";}i:2;i:18500;}i:617;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:18548;}i:618;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:61:"
for (initialization; condition; update) {
    statements;
}
";i:1;s:4:"java";i:2;N;}i:2;i:18548;}i:619;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:18548;}i:620;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:243:"当在for语句的初始化或更新子句中使用逗号时，避免因使用三个以上变量，而导致复杂度提高。若需要，可以在for循环之前(为初始化子句)或for循环末尾(为更新子句）使用单独的语句。";}i:2;i:18623;}i:621;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:18866;}i:622;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:18868;}i:623;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:16:"6.6	while 语句";i:1;i:3;i:2;i:18868;}i:2;i:18868;}i:624;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:18868;}i:625;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:18868;}i:626;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:"一个while语句应该具有如下格式：";}i:2;i:18893;}i:627;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:18943;}i:628;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:39:"
while (condition) {
    statements;
}
";i:1;s:4:"java";i:2;N;}i:2;i:18943;}i:629;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:18997;}i:630;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:19:"6.7	do-while 语句";i:1;i:3;i:2;i:18997;}i:2;i:18997;}i:631;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:18997;}i:632;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:43:"
do {
    statements;
} while (condition);
";i:1;s:4:"java";i:2;N;}i:2;i:19030;}i:633;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:19088;}i:634;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"6.8	switch 语句";i:1;i:3;i:2;i:19088;}i:2;i:19088;}i:635;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:19088;}i:636;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:19088;}i:637;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:"一个switch语句应该具有如下格式：";}i:2;i:19114;}i:638;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:19165;}i:639;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:234:"
switch (condition) {
    case ABC:
        statements;
        /* falls through */
    case DEF:
        statements;
        break;

    case XYZ:
        statements;
        break;

    default:
        statements;
        break;
}
";i:1;s:4:"java";i:2;N;}i:2;i:19165;}i:640;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:19165;}i:641;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:177:"每当一个case顺着往下执行时（因为没有break语句），通常应在break语句的位置添加注释。上面的示例代码中就包含注释/* falls through */。";}i:2;i:19413;}i:642;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:19590;}i:643;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:19592;}i:644;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:20:"6.9	try-catch 语句";i:1;i:3;i:2;i:19592;}i:2;i:19592;}i:645;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:19592;}i:646;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:19592;}i:647;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:48:"一个try-catch语句应该具有如下格式：";}i:2;i:19622;}i:648;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:19676;}i:649;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:168:"
try {
    statements;
} catch (ExceptionClass	e) {
    statements;
}

try {
    statements;
} catch (ExceptionClass	e) {
    statements;
} finally {
    statements;
}
";i:1;s:4:"java";i:2;N;}i:2;i:19676;}i:650;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:19859;}i:651;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:8:"7	空白";i:1;i:2;i:2;i:19859;}i:2;i:19859;}i:652;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:19859;}i:653;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:19878;}i:654;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:10:"7.1	空行";i:1;i:3;i:2;i:19878;}i:2;i:19878;}i:655;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:19878;}i:656;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:19878;}i:657;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:105:"空行将逻辑相关的代码段分隔开，以提高可读性。下列情况应该总是使用空行：";}i:2;i:19897;}i:658;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:20002;}i:659;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:20002;}i:660;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:20002;}i:661;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:20002;}i:662;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:53:" 一个源文件的两个片段（section）之间。";}i:2;i:20006;}i:663;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:20059;}i:664;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:20059;}i:665;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:20059;}i:666;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:20059;}i:667;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:" 类声明和接口声明之间。";}i:2;i:20063;}i:668;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:20097;}i:669;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:20097;}i:670;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:20097;}i:671;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:20097;}i:672;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" 两个方法之间。";}i:2;i:20101;}i:673;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:20123;}i:674;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:20123;}i:675;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:20123;}i:676;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:20123;}i:677;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:61:" 方法内的局部变量和方法的第一条语句之间。";}i:2;i:20127;}i:678;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:20188;}i:679;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:20188;}i:680;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:20188;}i:681;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:20188;}i:682;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:" 块注释或单行注释之前。";}i:2;i:20192;}i:683;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:20226;}i:684;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:20226;}i:685;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:20226;}i:686;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:20226;}i:687;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:67:" 一个方法内的两个逻辑段之间，用以提高可读性。";}i:2;i:20230;}i:688;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:20297;}i:689;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:20297;}i:690;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:20297;}i:691;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:20298;}i:692;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:10:"7.2	空格";i:1;i:3;i:2;i:20298;}i:2;i:20298;}i:693;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:20298;}i:694;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:20298;}i:695;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:"下列情况应该使用空格：";}i:2;i:20317;}i:696;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:20350;}i:697;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:20350;}i:698;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:20350;}i:699;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:20350;}i:700;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:67:" 一个紧跟着括号的关键字应该被空格分开。例如：";}i:2;i:20354;}i:701;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:20421;}i:702;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:20421;}i:703;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:20421;}i:704;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:26:"
while (true) {
    ...
}
";i:1;s:4:"java";i:2;N;}i:2;i:20427;}i:705;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:20466;}i:706;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:20466;}i:707;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:20466;}i:708;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:52:" 空白应该位于参数列表中逗号的后面。";}i:2;i:20470;}i:709;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:20522;}i:710;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:20522;}i:711;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:20522;}i:712;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:20522;}i:713;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:" 所有的二元运算符，除了";}i:2;i:20526;}i:714;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:20560;}i:715;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:20561;}i:716;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:20562;}i:717;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:121:"，都应该使用空格将之与操作数分开。一元操作符和操作数之间不应该加空格，比如：负号(";}i:2;i:20563;}i:718;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:20684;}i:719;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"-";}i:2;i:20685;}i:720;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:20686;}i:721;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:")、自增(";}i:2;i:20687;}i:722;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:20698;}i:723;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"++";}i:2;i:20699;}i:724;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:20701;}i:725;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:")和自减(";}i:2;i:20702;}i:726;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:20713;}i:727;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:20714;}i:728;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:20716;}i:729;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:")。例如：";}i:2;i:20717;}i:730;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:20730;}i:731;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:20730;}i:732;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:20730;}i:733;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:68:"
a += c + d;
a = (a + b) / (c * d);

while (d++ = s++) {
    n++;
}
";i:1;s:4:"java";i:2;N;}i:2;i:20736;}i:734;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:20817;}i:735;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:20817;}i:736;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:20817;}i:737;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:49:" for语句中的表达式应该被空格分开。";}i:2;i:20821;}i:738;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:20870;}i:739;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:20870;}i:740;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:20870;}i:741;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:27:"
for (expr1; expr2; expr3)
";i:1;s:4:"java";i:2;N;}i:2;i:20876;}i:742;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:20916;}i:743;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:20916;}i:744;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:20916;}i:745;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:" 强制转型后应该跟一个空格。";}i:2;i:20920;}i:746;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:20960;}i:747;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:20960;}i:748;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:20960;}i:749;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:83:"
myMethod((byte) aNum, (Object) x);
myMethod((int) (cp + 5), ((int) (i + 3)) + 1);
";i:1;s:4:"java";i:2;N;}i:2;i:20966;}i:750;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:21064;}i:751;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:14:"8	命名规范";i:1;i:2;i:2;i:21064;}i:2;i:21064;}i:752;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:21064;}i:753;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:21064;}i:754;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:141:"命名规范使程序更易读，从而更易于理解。它们也可以提供一些有关标识符功能的信息，以助于理解代码。";}i:2;i:21089;}i:755;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:21231;}i:756;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:21231;}i:757;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:13:"8.1	包命名";i:1;i:3;i:2;i:21231;}i:2;i:21231;}i:758;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:21231;}i:759;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:21231;}i:760;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:99:"包名由全部小写字母组成，包名的前缀以com开头，包名后续部分的格式为：";}i:2;i:21253;}i:761;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:21352;}i:762;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:21352;}i:763;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:53:"[域名反转].[项目名].[模块名].[子模块名]";}i:2;i:21354;}i:764;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:3:"...";}i:2;i:21407;}i:765;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:21410;}i:766;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:21410;}i:767;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:"例如：com.android.sim.message.sms";}i:2;i:21412;}i:768;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:21448;}i:769;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:21450;}i:770;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:22:"8.2	类和接口命名";i:1;i:3;i:2;i:21450;}i:2;i:21450;}i:771;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:21450;}i:772;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:21450;}i:773;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:269:"类名是个一名词，采用大小写混合的方式，每个单词的首字母大写。尽量使你的类名简洁而富于描述。使用完整单词，或约定成俗并且使用广泛的缩写词，如url，html，接口和类名规则一至但要使用I前缀。";}i:2;i:21481;}i:774;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:21750;}i:775;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:21750;}i:776;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:228:"继承自系统组件类的命名，后缀必须明确表示出系统组件的类别，Activity类后缀使用Activity，Service类后缀使用Service，BroadcaseReceiver类后缀使用Receiver，ContentProvider使用Provider。";}i:2;i:21752;}i:777;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:21980;}i:778;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:21982;}i:779;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:16:"8.3	方法命名";i:1;i:3;i:2;i:21982;}i:2;i:21982;}i:780;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:21982;}i:781;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:21982;}i:782;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:174:"方法名是一个动词或者动名词结构，采用大小写混合的方式，第一个单词的首字母小写，其后单词的首字母大写，即驼峰命名规则。";}i:2;i:22007;}i:783;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:22181;}i:784;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:22181;}i:785;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:89:"以它做什么来命名，而不是以它怎样做命名。如doUpdate()，isNumber()。";}i:2;i:22183;}i:786;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:22272;}i:787;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:22274;}i:788;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:16:"8.4	变量命名";i:1;i:3;i:2;i:22274;}i:2;i:22274;}i:789;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:22274;}i:790;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:22274;}i:791;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:423:"第一个单词的首字母小写，其后单词的首字母大写。变量名不应以下划线或美元符号开头，尽管这在语法上是允许的。变量名的选用应该易于记忆，即，能够指出其用途。尽量避免单个字符的变量名，除非是一次性的临时变量。临时变量通常被取名为  i，j，k，m 和 n，它们一般用于整型；c，d，e，它们一般用于字符型。";}i:2;i:22299;}i:792;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:22722;}i:793;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:22722;}i:794;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:69:"其中系统控件中在后缀中体现控件类型，如下所示：";}i:2;i:22724;}i:795;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:22793;}i:796;a:3:{i:0;s:10:"table_open";i:1;a:3:{i:0;i:4;i:1;i:9;i:2;i:22794;}i:2;i:22793;}i:797;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:22793;}i:798;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:22793;}i:799;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:"      组件名称       ";}i:2;i:22795;}i:800;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:22820;}i:801;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:22820;}i:802;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"    简写    ";}i:2;i:22821;}i:803;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:22835;}i:804;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:22835;}i:805;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:"       组件名称       ";}i:2;i:22836;}i:806;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:22862;}i:807;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:22862;}i:808;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"    简写     ";}i:2;i:22863;}i:809;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:22878;}i:810;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:22879;}i:811;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:22879;}i:812;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:22879;}i:813;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"       Button      ";}i:2;i:22881;}i:814;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:22900;}i:815;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:22900;}i:816;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"    Btn     ";}i:2;i:22901;}i:817;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:22913;}i:818;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:22913;}i:819;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"     RadioButton    ";}i:2;i:22914;}i:820;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:22934;}i:821;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:22934;}i:822;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"    Rbtn   ";}i:2;i:22935;}i:823;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:22946;}i:824;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:22947;}i:825;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:22947;}i:826;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:22947;}i:827;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"    ImageButton    ";}i:2;i:22949;}i:828;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:22968;}i:829;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:22968;}i:830;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"    Ibtn    ";}i:2;i:22969;}i:831;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:22981;}i:832;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:22981;}i:833;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"      TextView      ";}i:2;i:22982;}i:834;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:23002;}i:835;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:23002;}i:836;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"    Tv     ";}i:2;i:23003;}i:837;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:23014;}i:838;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:23015;}i:839;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:23015;}i:840;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:23015;}i:841;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"    ImageView      ";}i:2;i:23017;}i:842;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:23036;}i:843;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:23036;}i:844;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"     Iv     ";}i:2;i:23037;}i:845;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:23049;}i:846;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:23049;}i:847;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"       ListView     ";}i:2;i:23050;}i:848;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:23070;}i:849;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:23070;}i:850;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"    Lv     ";}i:2;i:23071;}i:851;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:23082;}i:852;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:23083;}i:853;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:23083;}i:854;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:23083;}i:855;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"    ProgressBar    ";}i:2;i:23085;}i:856;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:23104;}i:857;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:23104;}i:858;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"    Pbar    ";}i:2;i:23105;}i:859;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:23117;}i:860;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:23117;}i:861;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"      EditText      ";}i:2;i:23118;}i:862;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:23138;}i:863;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:23138;}i:864;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"    Et     ";}i:2;i:23139;}i:865;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:23150;}i:866;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:23154;}i:867;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:23154;}i:868;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:23154;}i:869;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"    ScrollView     ";}i:2;i:23156;}i:870;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:23175;}i:871;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:23175;}i:872;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"      Sv    ";}i:2;i:23176;}i:873;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:23188;}i:874;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:23188;}i:875;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"      CheckBox      ";}i:2;i:23189;}i:876;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:23209;}i:877;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:23209;}i:878;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"    Cb     ";}i:2;i:23210;}i:879;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:23221;}i:880;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:23222;}i:881;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:23222;}i:882;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:23222;}i:883;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"   RelativeLayout  ";}i:2;i:23224;}i:884;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:23243;}i:885;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:23243;}i:886;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"    Rly     ";}i:2;i:23244;}i:887;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:23256;}i:888;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:23256;}i:889;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"    LinearLayout    ";}i:2;i:23257;}i:890;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:23277;}i:891;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:23277;}i:892;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"    Lly    ";}i:2;i:23278;}i:893;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:23289;}i:894;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:23290;}i:895;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:23290;}i:896;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:23290;}i:897;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"    TableLayout    ";}i:2;i:23292;}i:898;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:23311;}i:899;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:23311;}i:900;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"     Tly    ";}i:2;i:23312;}i:901;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:23324;}i:902;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:23324;}i:903;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"    LinearLayout    ";}i:2;i:23325;}i:904;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:23345;}i:905;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:23345;}i:906;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"    Aly    ";}i:2;i:23346;}i:907;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:23357;}i:908;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:23358;}i:909;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:23358;}i:910;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:23358;}i:911;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"    FrameLayout    ";}i:2;i:23360;}i:912;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:23379;}i:913;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:23379;}i:914;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"    Fly	 ";}i:2;i:23380;}i:915;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:23389;}i:916;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:23390;}i:917;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:23390;}i:918;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:23390;}i:919;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:23390;}i:920;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:23390;}i:921;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:23390;}i:922;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:23390;}i:923;a:3:{i:0;s:11:"table_close";i:1;a:1:{i:0;i:23390;}i:2;i:23390;}i:924;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:23390;}i:925;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:58:"非 public 的、非 static 的字段名称以 m 开头。";}i:2;i:23392;}i:926;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:23450;}i:927;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:23450;}i:928;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:"static 字段名称以 s 开头。";}i:2;i:23452;}i:929;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:23486;}i:930;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:23486;}i:931;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:"其它字段以小写字母开头。";}i:2;i:23488;}i:932;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:23530;}i:933;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:174:"
public	class MyClass {
    public int publicField;
    private static MyClass sSingleton;
    int mPackagePrivate;
    private int mPrivate;
    protected int mProtected;
}
";i:1;s:4:"java";i:2;N;}i:2;i:23530;}i:934;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:23719;}i:935;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:16:"8.5	常量命名";i:1;i:3;i:2;i:23719;}i:2;i:23719;}i:936;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:23719;}i:937;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:23719;}i:938;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:72:"类常量的声明，应该全部大写，单词间用下划线隔开。";}i:2;i:23744;}i:939;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:23822;}i:940;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:101:"
static final int MIN_WIDTH = 4;
static final int MAX_WIDTH = 999;
static final int GET_THE_CPU = 1;
";i:1;s:4:"java";i:2;N;}i:2;i:23822;}i:941;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:23938;}i:942;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:16:"8.6	异常命名";i:1;i:3;i:2;i:23938;}i:2;i:23938;}i:943;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:23938;}i:944;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:23938;}i:945;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:87:"自定义异常的命名必须以Exception为结尾，已明确标示为一个异常。";}i:2;i:23963;}i:946;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:24050;}i:947;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:24050;}i:948;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:127:"异常实例一般使用e、ex等，在多个异常时使用该异常名或简写加E，Ex等组成，如：SQLEx，ActionEx。";}i:2;i:24052;}i:949;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:24179;}i:950;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:24181;}i:951;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"8.7	Layout 命名";i:1;i:3;i:2;i:24181;}i:2;i:24181;}i:952;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:24181;}i:953;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:24181;}i:954;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:156:"命名必须以全部单词小写，单词间以下划线分割，并且尽可能的使用名词或名词组，即使用 模块名_功能名称 来命名。";}i:2;i:24207;}i:955;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:24369;}i:956;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:63:"
addressbook_list.xml	// 推荐
list_addressbook.xml	// 避免
";i:1;s:4:"java";i:2;N;}i:2;i:24369;}i:957;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:24447;}i:958;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:20:"8.8	资源 ID 命名";i:1;i:3;i:2;i:24447;}i:2;i:24447;}i:959;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:24447;}i:960;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:24447;}i:961;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:205:"layout中所使用的id命名必须以全部单词小写，单词间以下划线分割，并且尽可能的使用名词或名词组，并且要求能够通过id直接理解当前组件要实现的功能。";}i:2;i:24476;}i:962;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:24687;}i:963;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:83:"
EditText名 @+id/book_name_edit	// 推荐
EditText名 @+id/textbookname	// 避免
";i:1;s:4:"java";i:2;N;}i:2;i:24687;}i:964;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:24785;}i:965;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:28:"8.9	Activity 中 View 命名";i:1;i:3;i:2;i:24785;}i:2;i:24785;}i:966;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:24785;}i:967;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:24785;}i:968;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:150:"采用大小写混合模式，第一个单词首字母小写，其余单词首字母大写最后一个单词为该View 类型的缩写,格式如下：";}i:2;i:24822;}i:969;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:24972;}i:970;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:24972;}i:971;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:79:"逻辑名+View 类型缩写（View 缩写参照 8.4 组件名称缩写表）。";}i:2;i:24974;}i:972;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:25053;}i:973;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:25053;}i:974;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"Button homeBtn";}i:2;i:25055;}i:975;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:25069;}i:976;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:25071;}i:977;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:30:"8.10	strings.xml 中 ID 命名";i:1;i:3;i:2;i:25071;}i:2;i:25071;}i:978;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:25071;}i:979;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:25071;}i:980;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:126:"命名必须以全部单词小写，单词间以下划线分割，并且尽可能的使用名词或名词组，格式如下：";}i:2;i:25110;}i:981;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:25236;}i:982;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:25236;}i:983;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:25236;}i:984;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:25236;}i:985;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:51:" activity名称_功能模块名称_逻辑名称	或";}i:2;i:25240;}i:986;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:25291;}i:987;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:25291;}i:988;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:25291;}i:989;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:25291;}i:990;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:" activity名称_逻辑名称	或";}i:2;i:25295;}i:991;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:25327;}i:992;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:25327;}i:993;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:25327;}i:994;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:25327;}i:995;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:" common_逻辑名称";}i:2;i:25331;}i:996;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:25351;}i:997;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:25351;}i:998;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:25351;}i:999;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:25351;}i:1000;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:"逻辑名称多个单词用下划线连接，同时使用activity名称注释。";}i:2;i:25352;}i:1001;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:25438;}i:1002;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:56:"
main_menu_about
main_title
common_exit
common_app_name
";i:1;s:4:"java";i:2;N;}i:2;i:25438;}i:1003;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:25509;}i:1004;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"8.11	资源命名";i:1;i:3;i:2;i:25509;}i:2;i:25509;}i:1005;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:25509;}i:1006;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:25509;}i:1007;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:58:"layout中使用的所有资源（如drawable，style等）";}i:2;i:25535;}i:1008;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:25593;}i:1009;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:"命名必须以全部单词小写";}i:2;i:25595;}i:1010;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:25628;}i:1011;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:215:"，单词间以下划线分割，并且尽可能的使用名词或名词组，即使用模块名_用途来命名。如果为公共资源，如分割线等，则直接用用途来命名。如：menu_icon_navigate.png";}i:2;i:25630;}i:1012;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:25845;}i:1013;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:25847;}i:1014;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:14:"9	编程规范";i:1;i:2;i:2;i:25847;}i:2;i:25847;}i:1015;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:25847;}i:1016;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:25872;}i:1017;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:16:"9.1	单位规范";i:1;i:3;i:2;i:25872;}i:2;i:25872;}i:1018;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:25872;}i:1019;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:25872;}i:1020;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:420:"在使用单位时，如果没有特殊情况，一律使用 sp 作为文字大小的单位,将 dip 作为其他元素的单位。因为这两个单位是与设备分辨率无关的，能够解决在不同分辨率的设备上显示效果不同的问题。另外，在编码中定义控件的 margin 或 padding 属性时，SDK 里面并没有提供 dip 单位的 api 设置接口，而是提供了默认的 px 设置。";}i:2;i:25897;}i:1021;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:26323;}i:1022;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:208:"
Button btn = new Button(context);
LayoutParams lp = new
        LayoutParams(LayoutParams.FILL_PARENT,LayoutParams.FILL_PARENT);
lp.setMargins(0, 0, 0, 0); 
btn.setTextSize(12); 
btn.setPadding(0, 0, 0, 0);
";i:1;s:4:"java";i:2;N;}i:2;i:26323;}i:1023;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:26323;}i:1024;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:246:"这个时候，一般在设置 margin 和 padding 时，应该对要设置的 dip 值转换为 px 单位，而字体的大小设置中，系统默认给出了 sp 的单位，所以可以不用进行转换。转换的方法参考下面的代码：";}i:2;i:26545;}i:1025;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:26797;}i:1026;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:376:"
/**
 * 把dip单位转成px单位
 * @param context context对象
 * @param dip dip数值
 * @return dip对应的px值
 */
public static int formatDipToPx(Context context, int dip) {
    DisplayMetrics dm = new DisplayMetrics();
    ((Activity)context).getWindowManager().getDefaultDisplay().getMetrics(dm);
    int dip = (int) Math.ceil(dip * dm.density);
    return dip;
}
";i:1;s:4:"java";i:2;N;}i:2;i:26797;}i:1027;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:27188;}i:1028;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:31:"9.2	引用类变量和类方法";i:1;i:3;i:2;i:27188;}i:2;i:27188;}i:1029;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:27188;}i:1030;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:27188;}i:1031;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:87:"避免用一个对象访问一个类的静态变量和方法。应该用类名替代。";}i:2;i:27228;}i:1032;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:27321;}i:1033;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:118:"
classMethod();               // 推荐
AClass.classMethod();        // 推荐
anObject.classMethod();      // 避免
";i:1;s:4:"java";i:2;N;}i:2;i:27321;}i:1034;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:27454;}i:1035;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:10:"9.3	常量";i:1;i:3;i:2;i:27454;}i:2;i:27454;}i:1036;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:27454;}i:1037;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:27454;}i:1038;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:112:"位于 for 循环中作为计数器值的数字常量，除了-1,0 和 1 之外，不应被直接写入代码。";}i:2;i:27473;}i:1039;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:27585;}i:1040;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:27587;}i:1041;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:16:"9.4	变量赋值";i:1;i:3;i:2;i:27587;}i:2;i:27587;}i:1042;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:27587;}i:1043;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:27587;}i:1044;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:75:"避免在一个语句中给多个变量赋相同的值，它很难读懂。";}i:2;i:27612;}i:1045;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:27687;}i:1046;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:27689;}i:1047;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:13:"9.5	信令类";i:1;i:3;i:2;i:27689;}i:2;i:27689;}i:1048;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:27689;}i:1049;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:27689;}i:1050;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:157:"如果类只是用来作为信息传递的中间变量，则应该声明为信令类，即所有的全局变量都是 final 类型，在初始化时赋值。";}i:2;i:27711;}i:1051;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:27874;}i:1052;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:181:"
private final String name;
public Foo(String str) {
    name = str;
}
public Foo(String str ) {
    this.str = str;                   // 避免在构造函数中出现this引用
}
";i:1;s:4:"java";i:2;N;}i:2;i:27874;}i:1053;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:28070;}i:1054;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:22:"9.6	不要忽略异常";i:1;i:3;i:2;i:28070;}i:2;i:28070;}i:1055;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:28070;}i:1056;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:28070;}i:1057;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:48:"有时，完全忽略异常是非常诱人的。";}i:2;i:28101;}i:1058;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:28155;}i:1059;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:149:"
void setServerPort(String value) {
    try {
        serverPort = Integer.parseInt(value);
    } catch (NumberFormatException e) { }    // 错误
}
";i:1;s:4:"java";i:2;N;}i:2;i:28155;}i:1060;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:28155;}i:1061;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:28318;}i:1062;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"绝对不要这么做";}i:2;i:28320;}i:1063;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:28341;}i:1064;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:446:"。也许你会认为：你的代码永远不会碰到这种出错的情况，或者处理异常并不重要，可类似上述忽略异常的代码将会在代码中埋下一颗地雷，说不定哪天它就会炸到某个人了。你必须在代码中以某种规矩来处理所有的异常。根据情况的不同，处理的方式也会不一样。
可接受的替代方案包括（按照推荐顺序）：
向方法的调用者抛出异常。";}i:2;i:28343;}i:1065;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:28795;}i:1066;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:109:"
void setServerPort(String value) throws NumberFormatException {
    serverPort = Integer.parseInt(value);
}
";i:1;s:4:"java";i:2;N;}i:2;i:28795;}i:1067;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:28795;}i:1068;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:"根据抽象级别抛出新的异常。";}i:2;i:28918;}i:1069;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:28963;}i:1070;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:248:"
void setServerPort(String value) throws ConfigurationException {
    try {
        serverPort = Integer.parseInt(value);
    } catch (NumberFormatException e) {
        throw new ConfigurationException("Port " + value + " is not valid.");
    }
}
";i:1;s:4:"java";i:2;N;}i:2;i:28963;}i:1071;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:28963;}i:1072;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:73:"默默地处理错误并在 catch {} 语句块中替换为合适的值。";}i:2;i:29225;}i:1073;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:29304;}i:1074;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:246:"
/**	设置端口。假如值不是数字则用80代替 */
void setServerPort(String value) {
    try {
        serverPort = Integer.parseInt(value);
    }	catch (NumberFormatException e) {
        serverPort = 80; 	// 服务默认端口
    }
}
";i:1;s:4:"java";i:2;N;}i:2;i:29304;}i:1075;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:29304;}i:1076;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:161:"捕获异常并抛出一个新的 RuntimeException。这种做法比较危险：只有确信发生该错误时最合适的做法就是崩溃，才会这么做。";}i:2;i:29564;}i:1077;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:29731;}i:1078;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:274:"
/**	设置端口，假如值不是数字则程序终止。 */
void setServerPort(String value) {
    try {
        serverPort = Integer.parseInt(value);
    } catch (NumberFormatException e) {
        throw new RuntimeException("port " + value " is invalid, ", e);
    }
}
";i:1;s:4:"java";i:2;N;}i:2;i:29731;}i:1079;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:29731;}i:1080;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:262:"请记住，最初的异常是传递给构造方法的 RuntimeException。如果代码必须在 Java 1.3 版本下编译，需要忽略该异常。
最后一招：如果确信忽略异常比较合适，那就忽略吧，但必须把理想的原因注释出来。";}i:2;i:30019;}i:1081;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:30287;}i:1082;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:298:"
/**	假如值不是数字则使用原来的端口号。 */
void setServerPort(String value) {
    try {
        serverPort = Integer.parseInt(value);
    } catch (NumberFormatException e) {
        // 方法记录：无视无效的用户输入。
        // 服务端口不会被改变。
    }
}
";i:1;s:4:"java";i:2;N;}i:2;i:30287;}i:1083;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:30600;}i:1084;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:35:"9.7	不要捕获顶级的 Exception";i:1;i:3;i:2;i:30600;}i:2;i:30600;}i:1085;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:30600;}i:1086;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:30600;}i:1087;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:89:"有时在捕获 Exception 时偷懒也是很吸引人的，类似如下的处理方式：";}i:2;i:30644;}i:1088;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:30739;}i:1089;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:418:"
try {
    someComplicatedIOFunction();       	// 可能抛出IOException
    someComplicatedParsingFunction();  	// 可能抛出ParsingException
    someComplicatedSecurityFunction(); 	// 可能抛出SecurityException
    // 其他可以抛出Exception的代码
} catch (Exception e) {                	// 一次性捕获所有exceptions
    handleError();                     	// 只有一个通用的处理方法!
}
";i:1;s:4:"java";i:2;N;}i:2;i:30739;}i:1090;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:30739;}i:1091;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:31171;}i:1092;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"不要这么做";}i:2;i:31173;}i:1093;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:31188;}i:1094;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:629:"。绝大部分情况下，捕获顶级的 Exception 或 Throwable 都是不合适的，Throwable 更不合适，因为它还包含了 Error 异常。这种捕获非常危险。这意味着本来不必考虑的 Exception（包括类似 ClassCastException 的 RuntimeException）被卷入到应用程序级的错误处理中来。这会让代码运行的错误变得模糊不清。这意味着，假如别人在你调用的代码中加入了新的异常，编译器将无法帮助你识别出各种不同的错误类型。绝大部分情况下，无论如何你都不应该用同一种方式来处理各种不同类型的异常。";}i:2;i:31190;}i:1095;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:31819;}i:1096;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:31819;}i:1097;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:422:"本规则也有极少数例外情况：期望捕获所有类型错误的特定的测试代码和顶层代码（为了阻止这些错误在用户界面上显示出来，或者保持批量工作的运行）。这种情况下可以捕获顶级的 Exception（或 Throwable）并进行相应的错误处理。在开始之前，你应该非常仔细地考虑一下，并在注释中解释清楚为什么这么做是安全的。";}i:2;i:31821;}i:1098;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:32243;}i:1099;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:32243;}i:1100;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:"比捕获顶级 Exception 更好的方案：";}i:2;i:32245;}i:1101;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:32290;}i:1102;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:32290;}i:1103;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:32290;}i:1104;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:32290;}i:1105;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:226:" 分开捕获每一种异常，在一条 try 语句后面跟随多个 catch	语句块。这样可能会有点别扭，但总比捕获所有 Exception 要好些。请小心别在 catch 语句块中重复执行大量的代码。";}i:2;i:32294;}i:1106;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:32520;}i:1107;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:32520;}i:1108;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:32520;}i:1109;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:32520;}i:1110;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:190:" 重新组织一下代码，使用多个 try 块，使错误处理的粒度更细一些。把 IO 从解析内容的代码中分离出来，根据各自的情况进行单独的错误处理。";}i:2;i:32524;}i:1111;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:32714;}i:1112;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:32714;}i:1113;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:32714;}i:1114;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:32714;}i:1115;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:130:" 再次抛出异常。很多时候在你这个级别根本就没必要捕获这个异常，只要让方法抛出该异常即可。";}i:2;i:32718;}i:1116;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:32848;}i:1117;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:32848;}i:1118;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:32848;}i:1119;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:32848;}i:1120;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:196:"请记住：异常是你的朋友！当编译器指出你没有捕获某个异常时，请不要皱眉头。而应该微笑：编译器帮助你找到了代码中的运行时（runtime）问题。";}i:2;i:32850;}i:1121;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:33046;}i:1122;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:33048;}i:1123;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:26:"9.8	不要使用 Finalizer";i:1;i:3;i:2;i:33048;}i:2;i:33048;}i:1124;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:33048;}i:1125;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:33048;}i:1126;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:97:"Finalizer 提供了一个机会，可以让对象被垃圾回收器回收时执行一些代码。";}i:2;i:33083;}i:1127;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:33180;}i:1128;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:33180;}i:1129;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:66:"优点：便于执行清理工作，特别是针对外部资源。";}i:2;i:33182;}i:1130;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:33248;}i:1131;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:33248;}i:1132;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:"缺点：调用 finalizer 的时机并不确定，甚至根本就不会调用。";}i:2;i:33250;}i:1133;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:33330;}i:1134;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:33330;}i:1135;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:497:"结论：我们不要使用 finalizers。大多数情况下，可以用优秀的异常处理代码来执行那些要放入 finalizer 的工作。如果确实是需要使用 finalizer，那就定义一个 close() 方法（或类似的方法），并且在文档中准确地记录下需要调用该方法的时机。相关例程可以参见InputStream。这种情况下还是适合使用 finalizer 的，但不需要在 finalizer 中输出日志信息，因为日志不能因为这个而被撑爆。";}i:2;i:33332;}i:1136;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:33829;}i:1137;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:33831;}i:1138;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:29:"9.9	使用完全限定 Import";i:1;i:3;i:2;i:33831;}i:2;i:33831;}i:1139;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:33831;}i:1140;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:33831;}i:1141;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:81:"当需要使用 foo 包中的 Bar 类时，存在两种可能的 import 方式：";}i:2;i:33869;}i:1142;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:33950;}i:1143;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:33950;}i:1144;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"1.	import foo.*;";}i:2;i:33952;}i:1145;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:33968;}i:1146;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:33968;}i:1147;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:41:"优点：可能会减少 import 语句。";}i:2;i:33970;}i:1148;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:34011;}i:1149;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:34011;}i:1150;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:"2.	import foo.Bar;";}i:2;i:34013;}i:1151;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:34031;}i:1152;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:34031;}i:1153;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:84:"优点：实际用到的类一清二楚。代码的可读性更好，便于维护。";}i:2;i:34033;}i:1154;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:34117;}i:1155;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:34117;}i:1156;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:183:"结论： 用后一种写法来 import 所有的 Android 代码。不过导入 java 标准库 (java.util.*、java.io.*等) 和单元测试代码 (junit.framework.*) 时可以例外。";}i:2;i:34119;}i:1157;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:34302;}i:1158;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:34304;}i:1159;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:28:"9.10	对 Import 语句排序";i:1;i:3;i:2;i:34304;}i:2;i:34304;}i:1160;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:34304;}i:1161;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:34304;}i:1162;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:"import 语句的次序应该如下：";}i:2;i:34341;}i:1163;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:34378;}i:1164;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:34378;}i:1165;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:"1.	Android imports";}i:2;i:34380;}i:1166;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:34398;}i:1167;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:34398;}i:1168;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:"2.	第三方库（com、junit、net、org）";}i:2;i:34400;}i:1169;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:34444;}i:1170;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:34444;}i:1171;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:"3.	java 和 javax";}i:2;i:34446;}i:1172;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:34463;}i:1173;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:34463;}i:1174;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:60:"为了精确匹配 IDE 的配置，import 顺序应该是：";}i:2;i:34465;}i:1175;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:34525;}i:1176;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:34525;}i:1177;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:78:"1.	在每组内部按字母排序，大写字母排在小写字母的前面。";}i:2;i:34527;}i:1178;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:34605;}i:1179;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:34605;}i:1180;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:93:"2.	每个大组之间应该空一行（android、com、junit、net、org、java、javax）。";}i:2;i:34607;}i:1181;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:34700;}i:1182;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:34700;}i:1183;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:556:"3.	原先次序是不作为规范性要求的。这意味着要么允许 IDE 改变顺序，要么使用 IDE的开发者不得不禁用 import 自动管理功能并且人工维护 import。这看起来比较糟糕。每当说起 java 规范，推荐的规范到处都是。符合我们要求的差不多就是“选择一个次序并坚持下去。”于是，我们就选择一个规范，更新规范手册，并让 IDE去遵守它。我们期望：不必耗费更多的精力，用 IDE 编码的用户就按照这种规则去 import 所有的 package。";}i:2;i:34702;}i:1184;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:35258;}i:1185;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:35258;}i:1186;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:"基于以下原因，选定了本项规则：";}i:2;i:35260;}i:1187;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:35305;}i:1188;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:35305;}i:1189;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:35305;}i:1190;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:35305;}i:1191;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:71:" 导入人员期望最先看到的放在最开始位置（android）。";}i:2;i:35309;}i:1192;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:35380;}i:1193;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:35380;}i:1194;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:35380;}i:1195;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:35380;}i:1196;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:62:" 导入人员期望最后才看到的放在最后（java）。";}i:2;i:35384;}i:1197;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:35446;}i:1198;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:35446;}i:1199;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:35446;}i:1200;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:35446;}i:1201;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:" 风格让人容易遵守。";}i:2;i:35450;}i:1202;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:35478;}i:1203;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:35478;}i:1204;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:35478;}i:1205;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:35478;}i:1206;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:" IDE 可以遵守。";}i:2;i:35482;}i:1207;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:35502;}i:1208;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:35502;}i:1209;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:35502;}i:1210;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:35502;}i:1211;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:280:"静态 import 的使用和位置已经成为略带争议的话题。有些人愿意让静态 import 和其它 import 混在一起，另一些人则期望让它们位于其它 import 之上或者之下。另外，我们还未提到让所有 IDE 都遵守同一个次序的方法。";}i:2;i:35504;}i:1212;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:35784;}i:1213;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:35784;}i:1214;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:105:"因为大多数人都认为这部分内容并不要紧，只要遵守你的决定并坚持下去即可。";}i:2;i:35786;}i:1215;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:35891;}i:1216;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:35893;}i:1217;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:32:"9.11	限制变量的作用范围";i:1;i:3;i:2;i:35893;}i:2;i:35893;}i:1218;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:35893;}i:1219;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:35893;}i:1220;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:337:"局部变量的作用范围应该是限制为最小的（Effective Java 第 29 条）。使用局部变量，可以增加代码的可读性和可维护性，并且降低发生错误的可能性。每个变量都应该在最小范围的代码块中进行声明，该代码块的大小只要能够包含所有对该变量的使用即可。";}i:2;i:35934;}i:1221;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:36271;}i:1222;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:36271;}i:1223;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:240:"应该在第一次用到局部变量的地方对其进行声明。几乎所有局部变量声明都应该进行初始化。如果还缺少足够的信息来正确地初始化变量，那就应该推迟声明，直至可以初始化为止。";}i:2;i:36273;}i:1224;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:36513;}i:1225;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:36513;}i:1226;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:371:"本规则存在一个例外，就是涉及 try-catch 语句的情况。如果变量是用方法的返回值来初始化的，而该方法可能会抛出一个 checked 异常，那么必须在 try 块中进行变量声明。如果需在 try 块之外使用该变量，那它就必须在 try 块之前就进行声明了，这时它是不可能进行正确的初始化的。";}i:2;i:36515;}i:1227;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:36892;}i:1228;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:344:"
//	实例化类cl，表示有序集合
Set s = null;
try {
    s = (Set) cl.newInstance();
} catch(IllegalAccessException e) {
    throw new IllegalArgumentException(cl + " not accessible");
} catch(InstantiationException e) {
    throw new IllegalArgumentException(cl + " not instantiable");
}

//	集合练习
s.addAll(Arrays.asList(args));
";i:1;s:4:"java";i:2;N;}i:2;i:36892;}i:1229;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:36892;}i:1230;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:97:"但即便是这种情况也是可以避免的，把try-catch	块封装在一个方法内即可。";}i:2;i:37250;}i:1231;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:37353;}i:1232;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:394:"
Set createSet(Class cl) {
//	实例化类cl，表示有序集合
try {
    return (Set) cl.newInstance();
} catch(IllegalAccessException e) {
    throw new IllegalArgumentException(cl + " not accessible"); 
} catch(InstantiationException e) {
    throw new IllegalArgumentException(cl + " not instantiable"); 
    }
}
...

//	集合练习
Set s = createSet(cl);
s.addAll(Arrays.asList(args));
";i:1;s:4:"java";i:2;N;}i:2;i:37353;}i:1233;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:37353;}i:1234;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:84:"除非理由十分充分，否则循环变量都应该在for语句内进行声明。";}i:2;i:37761;}i:1235;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:37851;}i:1236;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:133:"
for (int i = 0; i n; i++) {
    doSomething(i);
}
for (Iterator i = c.iterator(); i.hasNext(); ) {
    doSomethingElse(i.next());
}
";i:1;s:4:"java";i:2;N;}i:2;i:37851;}i:1237;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:37999;}i:1238;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:36:"9.12	使用标准的 Java Annotation";i:1;i:3;i:2;i:37999;}i:2;i:37999;}i:1239;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:37999;}i:1240;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:37999;}i:1241;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:267:"Annotation 应该位于 Java 语言元素的其它修饰符之前。 简单的 marker annotation（@Override 等）可以和语言元素放在同一行。	如果存在多个 annotation，或者annotation 是参数化的，则应按字母顺序各占一行来列出。";}i:2;i:38044;}i:1242;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:38311;}i:1243;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:38311;}i:1244;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:73:"对于 Java 内建的三种 annotation，Android 标准的实现如下：";}i:2;i:38313;}i:1245;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:38386;}i:1246;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:38386;}i:1247;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:38386;}i:1248;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:38386;}i:1249;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:409:" @Deprecated：只要某个语言元素已不再建议使用了，就必须使用@Deprecated annotation。如果使用了@Deprecated annotation，则必须同时进行@deprecated Javadoc 标记，并且给出一个替代的实现方式。此外请记住，被@Deprecated 的方法仍然是能正常执行的。如果看到以前的代码带有@deprecated Javadoc 标记，也请加上@Deprecated annotation。";}i:2;i:38390;}i:1250;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:38799;}i:1251;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:38799;}i:1252;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:38799;}i:1253;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:38799;}i:1254;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:282:" @Override:只要某个方法覆盖了已过时的或继承自超类的方法，就必须使用@Override annotation。例如，如果方法使用了@inheritdocs Javadoc 标记，且继承自超类（而不是 interface），则必须同时用@Override 标明覆盖了父类方法。";}i:2;i:38803;}i:1255;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:39085;}i:1256;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:39085;}i:1257;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:39085;}i:1258;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:39085;}i:1259;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:258:" @SuppressWarnings：@SuppressWarnings annotation 仅用于无法消除编译警告的场合。如果警告确实经过测试“不可能消除”，则必须使用@SuppressWarnings annotation，以确保所有的警告都能真实反映代码中的问题。";}i:2;i:39089;}i:1260;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:39347;}i:1261;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:39347;}i:1262;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:39347;}i:1263;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:39347;}i:1264;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:209:"当需要使用@SuppressWarnings annotation时，必须在前面加上TODO注释行，用于解释“不可能消除”警告的条件。通常是标明某个令人讨厌的类用到了某个拙劣的接口。";}i:2;i:39349;}i:1265;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:39564;}i:1266;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:152:"
// TODO:	第三方类 com.third.useful.Utility.rotate()	必须采用泛型
@SuppressWarnings("generic-cast")
List<String> blix = Utility.rotate(blax);
";i:1;s:4:"java";i:2;N;}i:2;i:39564;}i:1267;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:39564;}i:1268;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:139:"如果需要使用@SuppressWarnings annotation，应该重新组织一下代码，把需要应用 annotation 的语言元素独立出来。";}i:2;i:39730;}i:1269;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:39869;}i:1270;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:39871;}i:1271;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:26:"9.13	简称等同于单词";i:1;i:3;i:2;i:39871;}i:2;i:39871;}i:1272;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:39871;}i:1273;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:39871;}i:1274;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:87:"简称和缩写都视为变量名、方法名和类名。以下名称可读性更强：";}i:2;i:39906;}i:1275;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:39993;}i:1276;a:3:{i:0;s:10:"table_open";i:1;a:3:{i:0;i:2;i:1;i:6;i:2;i:39994;}i:2;i:39993;}i:1277;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:39993;}i:1278;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:39993;}i:1279;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"         好          ";}i:2;i:39995;}i:1280;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:40017;}i:1281;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:40017;}i:1282;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:"           差            ";}i:2;i:40018;}i:1283;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:40044;}i:1284;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:40045;}i:1285;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:40045;}i:1286;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:40045;}i:1287;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"   XmlHttpRequest   ";}i:2;i:40047;}i:1288;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:40067;}i:1289;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:40067;}i:1290;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"     XMLHTTPRequest    ";}i:2;i:40068;}i:1291;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:40091;}i:1292;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:40092;}i:1293;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:40092;}i:1294;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:40092;}i:1295;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"    getCustomerId   ";}i:2;i:40094;}i:1296;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:40114;}i:1297;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:40114;}i:1298;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"      getCustomerID    ";}i:2;i:40115;}i:1299;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:40138;}i:1300;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:40139;}i:1301;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:40139;}i:1302;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:40139;}i:1303;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"     class Html     ";}i:2;i:40141;}i:1304;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:40161;}i:1305;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:40161;}i:1306;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"       class ";}i:2;i:40162;}i:1307;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:4:"HTML";}i:2;i:40175;}i:1308;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"      ";}i:2;i:40179;}i:1309;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:40185;}i:1310;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:40186;}i:1311;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:40186;}i:1312;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:40186;}i:1313;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"     String url     ";}i:2;i:40188;}i:1314;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:40208;}i:1315;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:40208;}i:1316;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:"       String ";}i:2;i:40209;}i:1317;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:3:"URL";}i:2;i:40223;}i:1318;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"      ";}i:2;i:40226;}i:1319;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:40232;}i:1320;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:40233;}i:1321;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:40233;}i:1322;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:40233;}i:1323;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"       long id      ";}i:2;i:40235;}i:1324;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:40255;}i:1325;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:40255;}i:1326;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"         long ID       ";}i:2;i:40256;}i:1327;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:40279;}i:1328;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:40280;}i:1329;a:3:{i:0;s:11:"table_close";i:1;a:1:{i:0;i:40280;}i:2;i:40280;}i:1330;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:40280;}i:1331;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:148:"如何对待简称，JDK 和 Android 底层代码存在很大的差异。因此，你几乎不大可能与其它代码取得一致。别无选择，";}i:2;i:40282;}i:1332;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:40430;}i:1333;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:"把简称当作完整的单词看待";}i:2;i:40432;}i:1334;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:40468;}i:1335;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"吧。";}i:2;i:40470;}i:1336;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:40476;}i:1337;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:40476;}i:1338;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:104:"关于本条规则的进一步解释，请参阅 Effective Java 第 38 条和 Java Puzzlers 第 68条。";}i:2;i:40478;}i:1339;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:40582;}i:1340;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:40584;}i:1341;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:23:"9.14	使用 TODO 注释";i:1;i:3;i:2;i:40584;}i:2;i:40584;}i:1342;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:40584;}i:1343;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:40584;}i:1344;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:66:"对那些临时性的、短期的、够棒但不完美的代码，";}i:2;i:40616;}i:1345;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:40682;}i:1346;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"请使用 TODO 注释";}i:2;i:40684;}i:1347;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:40705;}i:1348;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"。";}i:2;i:40707;}i:1349;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:40710;}i:1350;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:40710;}i:1351;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:67:"TODO 注释应该包含全部大写的 TODO，后跟一个冒号：";}i:2;i:40712;}i:1352;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:40785;}i:1353;a:3:{i:0;s:4:"code";i:1;a:3:{i:0;s:127:"
// TODO: Remove this code after the UrlTable2 has been checked in. 
// TODO: Change this to use a flag instead of a constant.
";i:1;s:4:"java";i:2;N;}i:2;i:40785;}i:1354;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:40785;}i:1355;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:256:"如果 TODO 注释是“将来要做某事”的格式，则请确保包含一个很明确的日期（“在2013 年 11 月会修正”），或是一个很明确的事件（“在所有代码整合人员理解了 V7 协议之后删除本段代码”）。";}i:2;i:40926;}i:1356;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:41182;}i:1357;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:41184;}i:1358;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:15:"9.15	慎用 Log";i:1;i:3;i:2;i:41184;}i:2;i:41184;}i:1359;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:41184;}i:1360;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:41184;}i:1361;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:219:"记录日志会对性能产生显著的负面影响。如果日志内容不够简炼的话，很快会丧失可用性。日志功能支持五种不同的级别。以下列出了各个级别及其使用场合和方式。";}i:2;i:41208;}i:1362;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:41428;}i:1363;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:41428;}i:1364;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:41428;}i:1365;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:41428;}i:1366;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:381:" ERROR: 该级别日志应该在致命错误发生时使用，也就是说，错误的后果能被用户看到，但是不明确删除部分数据、卸装程序、清除数据区或重新刷机（或更糟糕）就无法恢复。该级别总是记录日志。需要记录 ERROR 级别日志的事件一般都应该向统计信息收集（statistics-gathering	）服务器报告。";}i:2;i:41432;}i:1367;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:41813;}i:1368;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:41813;}i:1369;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:41813;}i:1370;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:41813;}i:1371;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:388:" WARNING：该级别日志应该用于那些重大的、意外的事件，也就是说，错误的后果能被用户看到，但是不采取明确的动作可能就无法无损恢复，从等待或重启应用开始，直至重新下载新版程序或重启设备。该级别总是记录日志。需记录WARNING 级别日志的事件也可以考虑向统计信息收集服务器报告。";}i:2;i:41817;}i:1372;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:42205;}i:1373;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:42205;}i:1374;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:42205;}i:1375;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:42205;}i:1376;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:360:" INFORMATIVE：该级别的日志应该用于记录大部分人都会感兴趣的事件，也就是说，如果检测到事件的影响面可能很广，但不一定是错误。应该只有那些拥有本区域内最高级别身份认证的模块才能记录这些日志（为了避免级别不足的模块重复记录日志）。该级别总是记录日志。";}i:2;i:42209;}i:1377;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:42569;}i:1378;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:42569;}i:1379;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:42569;}i:1380;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:42569;}i:1381;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:955:" DEBUG：该级别的日志应该用于进一步记录有关调查、调试意外现象的设备事件。应该只记录那些有关控件运行所必需的信息。如果 debug 日志占用了太多的日志空间，那就应该使用详细级别日志（verbose）才更为合适。即使是发行版本（release build），该级别也会被记录，并且需用 if (LOCAL_LOG) 或 if (LOCAL_LOGD) 语句块包裹，这里的LOCAL_LOG[D] 在你的类或子控件中定义。这样就能够一次性关闭所有的调试日志。因此在 if (LOCAL_LOG) 语句块中不允许存在逻辑判断语句。所有日志所需的文字组织工作也应在 if (LOCAL_LOG) 语句块内完成。如果对记录日志的调用会导致在 if (LOCAL_LOG) 语句块之外完成文字组织工作，那该调用就必须控制在一个方法内完成。还存在一些代码仍然在使用 if (localLOGV)。这也是可以接受的，虽然名称不是标准的。";}i:2;i:42573;}i:1382;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:43528;}i:1383;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:43528;}i:1384;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:43528;}i:1385;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:43528;}i:1386;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:383:" VERBOSE：该级别日志应用于所有其余的事件。该级别仅会在调试版本（debug build）下记录日志，并且需用 if (LOCAL_LOGV) 语句块（或等效语句）包裹，这样该部分代码默认就不会编译进发行版本中去了。所有构建日志文字的代码将会在发行版本中剥离出去，并且需包含在 if (LOCAL_LOGV) 语句块中。";}i:2;i:43532;}i:1387;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:43915;}i:1388;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:43915;}i:1389;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:43915;}i:1390;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:43915;}i:1391;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"注意：";}i:2;i:43917;}i:1392;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:43926;}i:1393;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:43926;}i:1394;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:43926;}i:1395;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:43926;}i:1396;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:316:" 除了 VERBOSE 级别外，在同一个模块中同一个错误应该尽可能只报告一次：在同一个模块内的一系列层层嵌套的函数调用中，只有最内层的函数才返回错误；并且只有能为解决问题提供明显帮助的时候，同一模块中的调用方才写入一些日志。";}i:2;i:43930;}i:1397;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:44246;}i:1398;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:44246;}i:1399;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:44246;}i:1400;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:44246;}i:1401;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:739:" 除了 VERBOSE 级别外，在一系列嵌套的模块中，当较低级别的模块对来自较高级别模块的非法数据进行检测时，应该只把检测情况记录在 DEBUG 日志中，并且只记录那些调用者无法获取的信息。特别是不需要记录已经抛出异常的情况（异常中应该包含了全部有价值的信息），也不必记录那些只包含错误代码的信息。当应用程序与系统框架间进行交互时，这一点尤为重要。系统框架已能正确处理的第三方应用程序，也不应该记录大于 DEBUG 级别的日志。仅当一个模块或应用程序检测到自身或来自更低级别模块的错误时，才应该记录 INFORMATIVE 及以上级别的日志。";}i:2;i:44250;}i:1402;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:44989;}i:1403;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:44989;}i:1404;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:44989;}i:1405;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:44989;}i:1406;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:190:" 如果一个通常要记录日志的事件可能会多次发生，则采取一些频次限制措施或许是个好主意，以防日志被很多重复（或类似）的信息给撑爆了。";}i:2;i:44993;}i:1407;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:45183;}i:1408;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:45183;}i:1409;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:45183;}i:1410;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:45183;}i:1411;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:328:" 网络连接的丢失可被视为常见现象，也是完全可以预见的，不应该无缘无故就记录进日志。影响范围限于应用程序内部的网络中断应该记录在 DEBUG 或 VERBOSE级别的日志中（根据影响的严重程度及意外程度，再来确定是否在发行版本中也记录日志）。";}i:2;i:45187;}i:1412;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:45515;}i:1413;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:45515;}i:1414;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:45515;}i:1415;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:45515;}i:1416;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:127:" 有权访问的文件系统或第三方应用程序发起的系统空间满，应该记录大于INFORMATIVE 级别的日志。";}i:2;i:45519;}i:1417;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:45646;}i:1418;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:45646;}i:1419;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:45646;}i:1420;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:45646;}i:1421;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:260:" 来自任何未授信源的非法数据（包括共享存储上的任何文件，或来自任何网络连接的数据）可被视为可预见的，如果检测到非法数据也不应该记录大于 DEBUG 级别的日志（即使记录也应尽可能少）。";}i:2;i:45650;}i:1422;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:45910;}i:1423;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:45910;}i:1424;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:45910;}i:1425;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:45910;}i:1426;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:491:" 请记住，对字符串使用+操作符时，会在后台以默认大小（16 个字符）缓冲区创建一个 StringBuilder 对象，并且可能还会创建一些其它的临时 String 对象。换句话说，显式创建 StringBuilders 对象的代价并不会比用'+'操作符更高（事实上效率还将会提高很多）。还要记住，即使不会再去读取这些日志，调用 Log.v() 的代码也将编译进发行版中并获得执行，包括创建字符串的代码。";}i:2;i:45914;}i:1427;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:46405;}i:1428;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:46405;}i:1429;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:46405;}i:1430;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:46405;}i:1431;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:164:" 所有要被人阅读并存在于发行版本中的日志，都应该简洁明了、没有秘密、容易理解。这里包括所有 DEBUG 以上级别的日志。";}i:2;i:46409;}i:1432;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:46573;}i:1433;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:46573;}i:1434;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:46573;}i:1435;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:46573;}i:1436;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:167:" 只要有可能，日志就应该一句一行。行长最好不超过 80 或 100 个字符，尽可能避免超过 130 或 160 个字符（包括标识符）的行。";}i:2;i:46577;}i:1437;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:46744;}i:1438;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:46744;}i:1439;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:46744;}i:1440;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:46744;}i:1441;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:85:" 报告成功的日志记录绝不应该出现在大于 VERBOSE 级别的日志中。";}i:2;i:46748;}i:1442;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:46833;}i:1443;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:46833;}i:1444;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:46833;}i:1445;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:46833;}i:1446;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:168:" 用于诊断难以重现事件的临时日志应该限于 DEBUG 或 VERBOSE 级别，并且应该用 if 语句块包裹，以便在编译时能够一次全部关闭。";}i:2;i:46837;}i:1447;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:47005;}i:1448;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:47005;}i:1449;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:47005;}i:1450;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:47005;}i:1451;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:229:" 小心日志会泄漏隐私。应该避免将私人信息记入日志，受保护的内容肯定也不允许记录。这在编写系统框架级代码时尤为重要，因为很难预知哪些是私人信息和受保护信息。";}i:2;i:47009;}i:1452;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:47238;}i:1453;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:47238;}i:1454;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:47238;}i:1455;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:47238;}i:1456;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:261:" 绝对不要使用 System.out.println()（或本地代码中的 printf()）。System.out 和System.err 会重定向到/dev/null，因此 print 语句不会产生任何可见的效果。可是，这些调用中的所有字符串创建工作都仍然会执行。";}i:2;i:47242;}i:1457;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:47503;}i:1458;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:47503;}i:1459;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:47503;}i:1460;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:47503;}i:1461;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:47505;}i:1462;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"日志的黄金法则";}i:2;i:47507;}i:1463;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:47528;}i:1464;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:126:"是：你的日志记录不会导致其它日志的缓冲区溢出，正如其他人的日志也不会让你的溢出一样。";}i:2;i:47530;}i:1465;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:47656;}i:1466;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:47658;}i:1467;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:28:"10	在Eclipse中使用模板";i:1;i:2;i:2;i:47658;}i:2;i:47658;}i:1468;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:47658;}i:1469;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:47697;}i:1470;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:36:"10.1	导入android编码规范模板";i:1;i:3;i:2;i:47697;}i:2;i:47697;}i:1471;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:47697;}i:1472;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:47697;}i:1473;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:41:"在eclipse的preferences中，选择java ";}i:2;i:47742;}i:1474;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:47783;}i:1475;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:" code style ";}i:2;i:47785;}i:1476;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:47797;}i:1477;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:116:" formatter中选择Import，选择工程根目录下的development/ide/eclipse/目录下的android-formatting.xml。";}i:2;i:47799;}i:1478;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:47915;}i:1479;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:47915;}i:1480;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:41:"在eclipse的preferences中，选择java ";}i:2;i:47917;}i:1481;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:47958;}i:1482;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:" code style ";}i:2;i:47960;}i:1483;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:47972;}i:1484;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:120:" Organize Imports中选择Import，选择工程根目录下的development/ide/eclipse/目录下的android.importorder。";}i:2;i:47974;}i:1485;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:48094;}i:1486;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:48094;}i:1487;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:236:"说明：导入这两个文件，是为了与源码中的Android程序保持一致的编码规范。android-formatting.xml用来配置eclipse编译器的代码风格；android.importorder用来配置eclipse的import的顺序和结构。";}i:2;i:48096;}i:1488;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:48332;}i:1489;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:48333;}i:1490;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:48333;}}