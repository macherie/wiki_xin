<?xml version="1.0" encoding="utf-8"?>
<!-- generator="FeedCreator 1.7.2-ppt DokuWiki" -->
<?xml-stylesheet href="http://172.21.1.23/dokuwiki/lib/exe/css.php?s=feed" type="text/css"?>
<rdf:RDF
    xmlns="http://purl.org/rss/1.0/"
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel rdf:about="http://172.21.1.23/dokuwiki/feed.php">
        <title>SIMCOM DokuWiki! linux:skill</title>
        <description></description>
        <link>http://172.21.1.23/dokuwiki/</link>
        <image rdf:resource="http://172.21.1.23/dokuwiki/lib/tpl/dokubook/images/favicon.ico" />
       <dc:date>2014-03-07T10:51:37+01:00</dc:date>
        <items>
            <rdf:Seq>
                <rdf:li rdf:resource="http://172.21.1.23/dokuwiki/doku.php?id=linux:skill:debugfs&amp;rev=1390476864&amp;do=diff"/>
                <rdf:li rdf:resource="http://172.21.1.23/dokuwiki/doku.php?id=linux:skill:file_authority&amp;rev=1390476864&amp;do=diff"/>
                <rdf:li rdf:resource="http://172.21.1.23/dokuwiki/doku.php?id=linux:skill:memwatch&amp;rev=1390476864&amp;do=diff"/>
            </rdf:Seq>
        </items>
    </channel>
    <image rdf:about="http://172.21.1.23/dokuwiki/lib/tpl/dokubook/images/favicon.ico">
        <title>SIMCOM DokuWiki!</title>
        <link>http://172.21.1.23/dokuwiki/</link>
        <url>http://172.21.1.23/dokuwiki/lib/tpl/dokubook/images/favicon.ico</url>
    </image>
    <item rdf:about="http://172.21.1.23/dokuwiki/doku.php?id=linux:skill:debugfs&amp;rev=1390476864&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2014-01-23T12:34:24+01:00</dc:date>
        <title>linux:skill:debugfs</title>
        <link>http://172.21.1.23/dokuwiki/doku.php?id=linux:skill:debugfs&amp;rev=1390476864&amp;do=diff</link>
        <description>默认debugfs位置
cd /mnt/debugfs

Linux debugfs使用分享

软件查看gpio状态

在调试中加入debugfs有时可以起到事半功倍的效果： 


adb shell
 #mkdir /data/debug
 #mount -t debugfs debugfs /data/debug
 #cd /data/debug 


查看gpio状态</description>
    </item>
    <item rdf:about="http://172.21.1.23/dokuwiki/doku.php?id=linux:skill:file_authority&amp;rev=1390476864&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2014-01-23T12:34:24+01:00</dc:date>
        <title>linux:skill:file_authority</title>
        <link>http://172.21.1.23/dokuwiki/doku.php?id=linux:skill:file_authority&amp;rev=1390476864&amp;do=diff</link>
        <description>只更改目录以及所有子目录权限，不改变目录内文件权限。


find -type d -exec chmod 750 {} \;


只更改目录以及子目录内文件权限，不改变目录权限。 


find -not -type d -exec chmod 640 {} \;


只更改目录以及所有子目录权限，不改变目录内文件权限。</description>
    </item>
    <item rdf:about="http://172.21.1.23/dokuwiki/doku.php?id=linux:skill:memwatch&amp;rev=1390476864&amp;do=diff">
        <dc:format>text/html</dc:format>
        <dc:date>2014-01-23T12:34:24+01:00</dc:date>
        <title>linux:skill:memwatch</title>
        <link>http://172.21.1.23/dokuwiki/doku.php?id=linux:skill:memwatch&amp;rev=1390476864&amp;do=diff</link>
        <description>MEMWATCH 由 Johan Lindh 编写，是一个开放源代码 C 语言内存错误检测工具，您可以自己下载它（请参阅本文后面部分的 参考资料）。只要在代码中添加一个头文件并在 gcc 语句中定义了 MEMWATCH 之后，您就可以跟踪程序中的内存泄漏和错误了。MEMWATCH 支持 ANSI C，它提供结果日志纪录，能检测双重释放（double-free）、错误释放（erroneous free）、没有释放的内存（unfreed memory）、溢出和下溢等等。…</description>
    </item>
</rdf:RDF>
