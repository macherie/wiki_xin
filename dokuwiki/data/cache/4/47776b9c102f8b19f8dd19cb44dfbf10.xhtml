
<h1 class="sectionedit1" id="s300p和s200的耗流调试总结">S300P和S200的耗流调试总结</h1>
<div class="level1">

<p>
首先使机器进入飞行模式，排除待机时modem的干扰。
</p>

<p>
1.测量底板电流。
</p>

<p>
2.测量整机电流。经过整机和底板的测量，挑选具有代表性的板子作为调试使用。
</p>

<p>
3.软件方面: 
</p>

<p>
3.1查看是否进入休眠状态，如果无法休眠，看是否由于wake lock引起，判断是哪个设备引起的
</p>
<pre class="code">cat /proc/wakelocks
cat wakelocks.cap | awk &#039;{print $1 &quot; &quot; $5}&#039; | grep -v &quot; 0&quot; | grep -v active </pre>

<p>
3.2查看各设备相关的GPIO口的配置，如使能引脚、reset引脚等的状态
</p>

<p>
3.3更详细的各模块的配置，通过检查spec的要求调试。
</p>

<p>
4.硬件方面：
</p>

<p>
4.1用排除法，检测拿掉外围器件的电流，如LCD、TP、camera等；
</p>

<p>
4.2拿掉或者断开板子上的器件检测电流，如FPGA、BT、USB、OVP等；
</p>

<p>
4.3测量GPIO和LDO的状态，可配合软件修改GPIO或者LDO的状态来检测电流；
</p>

<p>
4.4检测线路上所有使用外接电阻的设备的耗流，如UART、USB、I2C、level shift等等。
</p>

<p>
5.在现象难以分析时，最好求助高通或者相关厂商，因为有些可能是厂商在对模块本身的设计时就存在BUG。
如s200屏幕耗流的问题，就是厂商屏幕的硬件BUG导致的，在休眠时reset引脚必须保持低电平，否则影响功耗。
</p>

<p>
<strong>S300P调试更详细的经历</strong>
</p>

<p>
调试过程中，有时候有些问题不一定像我们想象的那样容易找到，所以把经历写下来，作为一定的启示。
总结下来，最主要的还是认真仔细。
</p>

<p>
S300P的调试较S200更为困难，原因是S200在去掉屏幕后电流直接就从3mA下降到1.6mA，问题定位很快，
而S300P原因在底板上面产生，并且还是在较为肯定不容易有问题的部件上，这就没那么容易发现问题所在。
</p>

<p>
1，首先我们测量了板子和整机的电流，并尽快的测量了去掉外围设备的底板的电流，发现电流没有明显下降，
问题可以定位到底板上面。再分析具体是哪个模块造成，从软件和硬件两个方面进行。
</p>

<p>
2，由于S200和S300P硬件结构和软件相似度较高，可以直接从有区别的地方入手，软件上首先确定S300P与S200的差异，
在对照S200进行修改后，重新编译将代码烧到板子里，发现没有明显下降；
</p>

<p>
在最初没有定位到软件问题之后，就从硬件入手，测量去掉不同模块后的电流（断掉了蓝牙、wifi、FPGA、USB、I2C等器件），
同时软件上把代码回退到与高通QRD最接近的时候，测量耗流。
</p>

<p>
3，暂时硬件仍然无法将问题定位，软件上继续排查各设备的suspend的状态，GPIO、LDO在kernel,modem,lK中的配置；
把可以配置的GPIO几乎都重新配置了一遍（由于只是想定位问题，所以只是在suspend状态时配成input和pull down模式(高通的一个文档中提到过此方法)，当然这个方法
不一定准确，可能引起GPIO漏电，但也许这个方法速度较快，建议还是参考各模块的spec来配置）。软件同时也回述了相关的QRD、
S100D、S200等的版本。
硬件把几乎全部的GPIO和LDO也进行了测量并记录下来，分别确定各模块对GPIO和LDO的操作是否正确。
</p>

<p>
4，整个过程较为艰辛，在经过反复的软件调试和硬件调试后，最终终于确定问题点发生在UART的level shift漏电上，在对比S200差异化
分析的时候，如果更仔细和大胆的怀疑这个貌似不会出问题的地方的话，这个问题在上面第2步时就可以排查出来。
</p>

<p>
5，不过仔细想想，这些调试过程也是必要的，只有对一个产品作出全面体检后，才能保证后续更稳定的开发。
</p>

</div>
