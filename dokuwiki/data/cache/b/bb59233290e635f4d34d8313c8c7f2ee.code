<span class="kw4">static</span> <span class="kw4">int</span> __devinit e1000_probe<span class="br0">&#40;</span><span class="kw4">struct</span> pci_dev <span class="sy0">*</span>pdev<span class="sy0">,</span> <span class="kw4">const</span> <span class="kw4">struct</span> pci_device_id <span class="sy0">*</span>ent<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
       <span class="kw4">struct</span> net_device <span class="sy0">*</span>netdev<span class="sy0">;</span>
       <span class="kw4">struct</span> e1000_adapter <span class="sy0">*</span>adapter<span class="sy0">;</span>
       <span class="kw4">static</span> <span class="kw4">int</span> cards_found <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
       <span class="kw4">unsigned</span> <span class="kw4">long</span> mmio_start<span class="sy0">;</span>
       <span class="kw4">int</span> mmio_len<span class="sy0">;</span>
       <span class="kw4">int</span> pci_using_dac<span class="sy0">;</span>
       <span class="kw4">int</span> i<span class="sy0">;</span>
       <span class="kw4">int</span> err<span class="sy0">;</span>
       <span class="kw4">uint16_t</span> eeprom_data<span class="sy0">;</span>
&nbsp;
       <span class="kw1">if</span><span class="br0">&#40;</span><span class="br0">&#40;</span>err <span class="sy0">=</span> pci_enable_device<span class="br0">&#40;</span>pdev<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
              <span class="kw1">return</span> err<span class="sy0">;</span>
       <span class="coMULTI">/*
       在这里设置PCI设备的DMA掩码，如果这个设备支持DMA传输，则掩码置位。
       */</span>
       <span class="kw1">if</span><span class="br0">&#40;</span><span class="sy0">!</span><span class="br0">&#40;</span>err <span class="sy0">=</span> pci_set_dma_mask<span class="br0">&#40;</span>pdev<span class="sy0">,</span> PCI_DMA_64BIT<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
              pci_using_dac <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span>
       <span class="br0">&#125;</span> <span class="kw1">else</span> <span class="br0">&#123;</span>
              <span class="kw1">if</span><span class="br0">&#40;</span><span class="br0">&#40;</span>err <span class="sy0">=</span> pci_set_dma_mask<span class="br0">&#40;</span>pdev<span class="sy0">,</span> PCI_DMA_32BIT<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
                     E1000_ERR<span class="br0">&#40;</span><span class="st0">&quot;No usable DMA configuration, aborting<span class="es1">\n</span>&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
                     <span class="kw1">return</span> err<span class="sy0">;</span>
              <span class="br0">&#125;</span>
              pci_using_dac <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
       <span class="br0">&#125;</span>
&nbsp;
       <span class="kw1">if</span><span class="br0">&#40;</span><span class="br0">&#40;</span>err <span class="sy0">=</span> pci_request_regions<span class="br0">&#40;</span>pdev<span class="sy0">,</span> e1000_driver_name<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
              <span class="kw1">return</span> err<span class="sy0">;</span>
&nbsp;
       pci_set_master<span class="br0">&#40;</span>pdev<span class="br0">&#41;</span><span class="sy0">;</span>
       <span class="coMULTI">/*
       为e1000网卡对应的net_device结构分配内存。
       */</span>
       netdev <span class="sy0">=</span> alloc_etherdev<span class="br0">&#40;</span><span class="kw4">sizeof</span><span class="br0">&#40;</span><span class="kw4">struct</span> e1000_adapter<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
       <span class="kw1">if</span><span class="br0">&#40;</span><span class="sy0">!</span>netdev<span class="br0">&#41;</span> <span class="br0">&#123;</span>
              err <span class="sy0">=</span> <span class="sy0">-</span>ENOMEM<span class="sy0">;</span>
              <span class="kw1">goto</span> err_alloc_etherdev<span class="sy0">;</span>
       <span class="br0">&#125;</span>
&nbsp;
       SET_MODULE_OWNER<span class="br0">&#40;</span>netdev<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
       pci_set_drvdata<span class="br0">&#40;</span>pdev<span class="sy0">,</span> netdev<span class="br0">&#41;</span><span class="sy0">;</span>
       adapter <span class="sy0">=</span> netdev<span class="sy0">-&gt;</span>priv<span class="sy0">;</span>
       adapter<span class="sy0">-&gt;</span>netdev <span class="sy0">=</span> netdev<span class="sy0">;</span>
       adapter<span class="sy0">-&gt;</span>pdev <span class="sy0">=</span> pdev<span class="sy0">;</span>
       adapter<span class="sy0">-&gt;</span>hw.<span class="me1">back</span> <span class="sy0">=</span> adapter<span class="sy0">;</span>
&nbsp;
       mmio_start <span class="sy0">=</span> pci_resource_start<span class="br0">&#40;</span>pdev<span class="sy0">,</span> BAR_0<span class="br0">&#41;</span><span class="sy0">;</span>
       mmio_len <span class="sy0">=</span> pci_resource_len<span class="br0">&#40;</span>pdev<span class="sy0">,</span> BAR_0<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
       adapter<span class="sy0">-&gt;</span>hw.<span class="me1">hw_addr</span> <span class="sy0">=</span> ioremap<span class="br0">&#40;</span>mmio_start<span class="sy0">,</span> mmio_len<span class="br0">&#41;</span><span class="sy0">;</span>
       <span class="kw1">if</span><span class="br0">&#40;</span><span class="sy0">!</span>adapter<span class="sy0">-&gt;</span>hw.<span class="me1">hw_addr</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
              err <span class="sy0">=</span> <span class="sy0">-</span>EIO<span class="sy0">;</span>
              <span class="kw1">goto</span> err_ioremap<span class="sy0">;</span>
       <span class="br0">&#125;</span>
&nbsp;
       <span class="kw1">for</span><span class="br0">&#40;</span>i <span class="sy0">=</span> BAR_1<span class="sy0">;</span> i <span class="sy0">&lt;=</span> BAR_5<span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
              <span class="kw1">if</span><span class="br0">&#40;</span>pci_resource_len<span class="br0">&#40;</span>pdev<span class="sy0">,</span> i<span class="br0">&#41;</span> <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span>
                     <span class="kw1">continue</span><span class="sy0">;</span>
              <span class="kw1">if</span><span class="br0">&#40;</span>pci_resource_flags<span class="br0">&#40;</span>pdev<span class="sy0">,</span> i<span class="br0">&#41;</span> <span class="sy0">&amp;</span> IORESOURCE_IO<span class="br0">&#41;</span> <span class="br0">&#123;</span>
                     adapter<span class="sy0">-&gt;</span>hw.<span class="me1">io_base</span> <span class="sy0">=</span> pci_resource_start<span class="br0">&#40;</span>pdev<span class="sy0">,</span> i<span class="br0">&#41;</span><span class="sy0">;</span>
                     <span class="kw2">break</span><span class="sy0">;</span>
              <span class="br0">&#125;</span>
       <span class="br0">&#125;</span>
       <span class="coMULTI">/*
       将e1000网卡驱动程序的相应函数注册到net_device结构的成员函数上。这里值得注意的是如果定义了设备的CONFIG_E1000_NAPI宏，则设备对应的poll方法被注册为e1000_clean。
       在网络设备 初始化时（net_dev_init()函数）将所有的设备的poll方法注册为系统默认函数process_backlog（），该函数的处理方法就是 从CPU相关队列softnet_data的输入数据包队列中读取skb，然后调用netif_receive_skb（）函数提交给上层协议继续处理。 设备的poll方法是在软中断处理函数中调用的。
       */</span>
       netdev<span class="sy0">-&gt;</span>open <span class="sy0">=</span> <span class="sy0">&amp;</span>e1000_open<span class="sy0">;</span>
       netdev<span class="sy0">-&gt;</span>stop <span class="sy0">=</span> <span class="sy0">&amp;</span>e1000_close<span class="sy0">;</span>
       netdev<span class="sy0">-&gt;</span>hard_start_xmit <span class="sy0">=</span> <span class="sy0">&amp;</span>e1000_xmit_frame<span class="sy0">;</span>
       netdev<span class="sy0">-&gt;</span>get_stats <span class="sy0">=</span> <span class="sy0">&amp;</span>e1000_get_stats<span class="sy0">;</span>
       netdev<span class="sy0">-&gt;</span>set_multicast_list <span class="sy0">=</span> <span class="sy0">&amp;</span>e1000_set_multi<span class="sy0">;</span>
       netdev<span class="sy0">-&gt;</span>set_mac_address <span class="sy0">=</span> <span class="sy0">&amp;</span>e1000_set_mac<span class="sy0">;</span>
       netdev<span class="sy0">-&gt;</span>change_mtu <span class="sy0">=</span> <span class="sy0">&amp;</span>e1000_change_mtu<span class="sy0">;</span>
       netdev<span class="sy0">-&gt;</span>do_ioctl <span class="sy0">=</span> <span class="sy0">&amp;</span>e1000_ioctl<span class="sy0">;</span>
       netdev<span class="sy0">-&gt;</span>tx_timeout <span class="sy0">=</span> <span class="sy0">&amp;</span>e1000_tx_timeout<span class="sy0">;</span>
       netdev<span class="sy0">-&gt;</span>watchdog_timeo <span class="sy0">=</span> <span class="nu0">5</span> <span class="sy0">*</span> HZ<span class="sy0">;</span>
<span class="co2">#ifdef CONFIG_E1000_NAPI</span>
       netdev<span class="sy0">-&gt;</span>poll <span class="sy0">=</span> <span class="sy0">&amp;</span>e1000_clean<span class="sy0">;</span>
       netdev<span class="sy0">-&gt;</span>weight <span class="sy0">=</span> <span class="nu0">64</span><span class="sy0">;</span>
<span class="co2">#endif</span>
       netdev<span class="sy0">-&gt;</span>vlan_rx_register <span class="sy0">=</span> e1000_vlan_rx_register<span class="sy0">;</span>
       netdev<span class="sy0">-&gt;</span>vlan_rx_add_vid <span class="sy0">=</span> e1000_vlan_rx_add_vid<span class="sy0">;</span>
       netdev<span class="sy0">-&gt;</span>vlan_rx_kill_vid <span class="sy0">=</span> e1000_vlan_rx_kill_vid<span class="sy0">;</span>
       <span class="coMULTI">/*
       这些就是利用ifconfig能够看到的内存起始地址，以及基地址。
       */</span>
       netdev<span class="sy0">-&gt;</span>irq <span class="sy0">=</span> pdev<span class="sy0">-&gt;</span>irq<span class="sy0">;</span>
       netdev<span class="sy0">-&gt;</span>mem_start <span class="sy0">=</span> mmio_start<span class="sy0">;</span>
       netdev<span class="sy0">-&gt;</span>mem_end <span class="sy0">=</span> mmio_start <span class="sy0">+</span> mmio_len<span class="sy0">;</span>
       netdev<span class="sy0">-&gt;</span>base_addr <span class="sy0">=</span> adapter<span class="sy0">-&gt;</span>hw.<span class="me1">io_base</span><span class="sy0">;</span>
&nbsp;
       adapter<span class="sy0">-&gt;</span>bd_number <span class="sy0">=</span> cards_found<span class="sy0">;</span>
&nbsp;
       <span class="kw1">if</span><span class="br0">&#40;</span>pci_using_dac<span class="br0">&#41;</span>
              netdev<span class="sy0">-&gt;</span>features <span class="sy0">|=</span> NETIF_F_HIGHDMA<span class="sy0">;</span>
&nbsp;
       <span class="coMULTI">/* MAC地址是存放在网卡设备的EEPROM上的，现在将其拷贝出来。 */</span>
       e1000_read_mac_addr<span class="br0">&#40;</span><span class="sy0">&amp;</span>adapter<span class="sy0">-&gt;</span>hw<span class="br0">&#41;</span><span class="sy0">;</span>
       <a href="http://www.opengroup.org/onlinepubs/009695399/functions/memcpy.html"><span class="kw3">memcpy</span></a><span class="br0">&#40;</span>netdev<span class="sy0">-&gt;</span>dev_addr<span class="sy0">,</span> adapter<span class="sy0">-&gt;</span>hw.<span class="me1">mac_addr</span><span class="sy0">,</span> netdev<span class="sy0">-&gt;</span>addr_len<span class="br0">&#41;</span><span class="sy0">;</span>
       <span class="kw1">if</span><span class="br0">&#40;</span><span class="sy0">!</span>is_valid_ether_addr<span class="br0">&#40;</span>netdev<span class="sy0">-&gt;</span>dev_addr<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
              err <span class="sy0">=</span> <span class="sy0">-</span>EIO<span class="sy0">;</span>
              <span class="kw1">goto</span> err_eeprom<span class="sy0">;</span>
       <span class="br0">&#125;</span>
       <span class="coMULTI">/*
       这里初始化三个定时器列表，以后对内核Timer的实现进行分析，这里就不介绍了。
       */</span>
       init_timer<span class="br0">&#40;</span><span class="sy0">&amp;</span>adapter<span class="sy0">-&gt;</span>tx_fifo_stall_timer<span class="br0">&#41;</span><span class="sy0">;</span>
       adapter<span class="sy0">-&gt;</span>tx_fifo_stall_timer.<span class="kw2">function</span> <span class="sy0">=</span> <span class="sy0">&amp;</span>e1000_82547_tx_fifo_stall<span class="sy0">;</span>
       adapter<span class="sy0">-&gt;</span>tx_fifo_stall_timer.<span class="me1">data</span> <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">unsigned</span> <span class="kw4">long</span><span class="br0">&#41;</span> adapter<span class="sy0">;</span>
&nbsp;
       init_timer<span class="br0">&#40;</span><span class="sy0">&amp;</span>adapter<span class="sy0">-&gt;</span>watchdog_timer<span class="br0">&#41;</span><span class="sy0">;</span>
       adapter<span class="sy0">-&gt;</span>watchdog_timer.<span class="kw2">function</span> <span class="sy0">=</span> <span class="sy0">&amp;</span>e1000_watchdog<span class="sy0">;</span>
       adapter<span class="sy0">-&gt;</span>watchdog_timer.<span class="me1">data</span> <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">unsigned</span> <span class="kw4">long</span><span class="br0">&#41;</span> adapter<span class="sy0">;</span>
&nbsp;
       init_timer<span class="br0">&#40;</span><span class="sy0">&amp;</span>adapter<span class="sy0">-&gt;</span>phy_info_timer<span class="br0">&#41;</span><span class="sy0">;</span>
       adapter<span class="sy0">-&gt;</span>phy_info_timer.<span class="kw2">function</span> <span class="sy0">=</span> <span class="sy0">&amp;</span>e1000_update_phy_info<span class="sy0">;</span>
       adapter<span class="sy0">-&gt;</span>phy_info_timer.<span class="me1">data</span> <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">unsigned</span> <span class="kw4">long</span><span class="br0">&#41;</span> adapter<span class="sy0">;</span>
&nbsp;
       INIT_TQUEUE<span class="br0">&#40;</span><span class="sy0">&amp;</span>adapter<span class="sy0">-&gt;</span>tx_timeout_task<span class="sy0">,</span>
              <span class="br0">&#40;</span><span class="kw4">void</span> <span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="kw4">void</span> <span class="sy0">*</span><span class="br0">&#41;</span><span class="br0">&#41;</span>e1000_tx_timeout_task<span class="sy0">,</span> netdev<span class="br0">&#41;</span><span class="sy0">;</span>
       <span class="coMULTI">/*
       这里调用网络设备注册函数将当前网络设备注册到系统的dev_base[]设备数组当中，并且调用设备的probe函数，对于以太网来说，就是ethif_probe（）函数。相关的说明见内核网络设备操作部分的分析。
       调用关系：register_netdev （）-&gt;register_netdevice（）
       */</span>
       register_netdev<span class="br0">&#40;</span>netdev<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
       netif_carrier_off<span class="br0">&#40;</span>netdev<span class="br0">&#41;</span><span class="sy0">;</span>
       netif_stop_queue<span class="br0">&#40;</span>netdev<span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
e1000_check_options<span class="br0">&#40;</span>adapter<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span>