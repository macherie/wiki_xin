
<h3 class="sectionedit1" id="如何控制驱动代码的初始化时间">如何控制驱动代码的初始化时间</h3>
<div class="level3">

<p>
一般情况下，我们注册驱动代码的init函数使用module_init这个宏。但是使用这个宏，我们只能保证代码被运行，不能确定他的运行时间。在有些场合，我们需要保证某个驱动先于另一个驱动被启动，则这个宏的功能就无法完成我们的目的。（我觉得在MTK的代码平台下会比较常有这种情况）
</p>

</div>
<!-- EDIT1 SECTION "如何控制驱动代码的初始化时间" [1-430] -->
<h4 class="sectionedit2" id="inith">init.h</h4>
<div class="level4">

<p>
在kernel/include/linux/init.h中module_init做了详尽的声明
</p>
<pre class="code c"><span class="coMULTI">/*为了方便阅读，我修改了行的顺序*/</span>
<span class="nu0">268</span> <span class="co2">#define module_init(x)  __initcall(x)</span>
<span class="nu0">214</span> <span class="co2">#define __initcall(fn) device_initcall(fn)</span>
<span class="nu0">196</span> <span class="co2">#define pure_initcall(fn)               __define_initcall(fn, 0)</span>
<span class="nu0">198</span> <span class="co2">#define core_initcall(fn)               __define_initcall(fn, 1)</span>
<span class="nu0">199</span> <span class="co2">#define core_initcall_sync(fn)          __define_initcall(fn, 1s)</span>
<span class="nu0">200</span> <span class="co2">#define postcore_initcall(fn)           __define_initcall(fn, 2)</span>
<span class="nu0">201</span> <span class="co2">#define postcore_initcall_sync(fn)      __define_initcall(fn, 2s)</span>
<span class="nu0">202</span> <span class="co2">#define arch_initcall(fn)               __define_initcall(fn, 3)</span>
<span class="nu0">203</span> <span class="co2">#define arch_initcall_sync(fn)          __define_initcall(fn, 3s)</span>
<span class="nu0">204</span> <span class="co2">#define subsys_initcall(fn)             __define_initcall(fn, 4)</span>
<span class="nu0">205</span> <span class="co2">#define subsys_initcall_sync(fn)        __define_initcall(fn, 4s)</span>
<span class="nu0">206</span> <span class="co2">#define fs_initcall(fn)                 __define_initcall(fn, 5)</span>
<span class="nu0">207</span> <span class="co2">#define fs_initcall_sync(fn)            __define_initcall(fn, 5s)</span>
<span class="nu0">208</span> <span class="co2">#define rootfs_initcall(fn)             __define_initcall(fn, rootfs)</span>
<span class="nu0">209</span> <span class="co2">#define device_initcall(fn)             __define_initcall(fn, 6)</span>
<span class="nu0">210</span> <span class="co2">#define device_initcall_sync(fn)        __define_initcall(fn, 6s)</span>
<span class="nu0">211</span> <span class="co2">#define late_initcall(fn)               __define_initcall(fn, 7)</span>
<span class="nu0">212</span> <span class="co2">#define late_initcall_sync(fn)          __define_initcall(fn, 7s)</span></pre>

<p>
显然，module_init 等效于 device_initcall 从她后续的声明我们可以猜测，他的时间顺序要晚于arch_initcall等宏声明的函数。
</p>

</div>
<!-- EDIT2 SECTION "init.h" [431-1935] -->
<h4 class="sectionedit3" id="实践">实践</h4>
<div class="level4">

<p>
处于MTK平台的局限，我现在有个需求，需要将fm的代码先于MTK i2c adapter驱动运行。一下是我的修改方案：
</p>
<pre class="code c"><span class="nu0">1290</span> <span class="kw4">static</span> <span class="kw4">int</span> __init rda_module_init_f<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span>
<span class="nu0">1291</span> <span class="br0">&#123;</span>
<span class="nu0">1292</span>         <span class="kw4">int</span> err<span class="sy0">;</span>
<span class="nu0">1293</span>         RDA_DEBUG<span class="br0">&#40;</span><span class="st0">&quot;chaser    init in it<span class="es1">\n</span>&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="nu0">1294</span>         err <span class="sy0">=</span> i2c_register_board_info<span class="br0">&#40;</span><span class="nu0">3</span><span class="sy0">,&amp;</span>fm_i2c_info<span class="sy0">,</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="nu0">1295</span>         RDA_DEBUG<span class="br0">&#40;</span><span class="st0">&quot;chaser ret=%d<span class="es1">\n</span>&quot;</span><span class="sy0">,</span>err<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="nu0">1296</span>         err <span class="sy0">=</span> platform_device_register<span class="br0">&#40;</span><span class="sy0">&amp;</span>rda_fm_device<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="nu0">1297</span>         err <span class="sy0">=</span> platform_driver_register<span class="br0">&#40;</span><span class="sy0">&amp;</span>rda_fm_platform<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="nu0">1298</span>         <span class="kw1">if</span><span class="br0">&#40;</span>err<span class="br0">&#41;</span>
<span class="nu0">1299</span>         <span class="br0">&#123;</span>
<span class="nu0">1300</span>                 RDA_ERR<span class="br0">&#40;</span><span class="st0">&quot;module_init:register i2c is err<span class="es1">\n</span>&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="nu0">1301</span>                 <span class="kw1">return</span> err<span class="sy0">;</span>
<span class="nu0">1302</span>         <span class="br0">&#125;</span>
<span class="nu0">1303</span>         <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="nu0">1304</span> <span class="br0">&#125;</span>
<span class="nu0">1305</span> <span class="sy0">-</span> module_init<span class="br0">&#40;</span>rda_module_init_f<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="nu0">1305</span> <span class="sy0">+</span> arch_initcall<span class="br0">&#40;</span>rda_module_init_f<span class="br0">&#41;</span><span class="sy0">;</span></pre>

<p>
一下是使用module_init和使用arch_initcall两种情况的log信息：
</p>
<pre class="code c"><span class="coMULTI">/*修改前使用module_init*/</span>
<span class="nu0">4371</span> <span class="sy0">&lt;</span><span class="nu0">1</span><span class="sy0">&gt;</span><span class="br0">&#91;</span>    <span class="nu16">3.512734</span><span class="br0">&#93;</span><span class="sy0">&lt;</span><span class="nu0">2</span><span class="sy0">&gt;</span>.<span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="br0">&#91;</span><span class="nu0">1</span><span class="sy0">:</span>swapper<span class="sy0">/</span><span class="nu0">0</span><span class="br0">&#93;</span>RDA DEBUG chaser    init in it
<span class="coMULTI">/*修改后使用arch_initcall*/</span>
<span class="nu0">586</span> <span class="sy0">&lt;</span><span class="nu0">1</span><span class="sy0">&gt;</span><span class="br0">&#91;</span>    <span class="nu16">0.676376</span><span class="br0">&#93;</span><span class="sy0">&lt;</span><span class="nu0">2</span><span class="sy0">&gt;</span>.<span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="br0">&#91;</span><span class="nu0">1</span><span class="sy0">:</span>swapper<span class="sy0">/</span><span class="nu0">0</span><span class="br0">&#93;</span>RDA DEBUG chaser    init in it</pre>

<p>
有效。
</p>

</div>
<!-- EDIT3 SECTION "实践" [1936-] -->