a:2:{s:7:"current";a:9:{s:4:"date";a:2:{s:7:"created";i:1390478358;s:8:"modified";i:1451900484;}s:4:"user";s:0:"";s:7:"creator";s:0:"";s:11:"contributor";a:1:{s:6:"yi.hao";N;}s:11:"last_change";a:7:{s:4:"date";i:1451900484;s:2:"ip";s:12:"172.21.2.114";s:4:"type";s:1:"C";s:2:"id";s:32:"platform:8625q:s100d:system_call";s:4:"user";s:6:"yi.hao";s:3:"sum";s:97:"Page moved from linux:服务器管理:8625q:s100d:system_call to platform:8625q:s100d:system_call";s:5:"extra";s:0:"";}s:11:"plugin_move";a:1:{s:7:"old_ids";a:3:{s:32:"platform:8625q:s100d:system_call";i:1451899809;s:45:"linux:服务器管理:8625q:s100d:system_call";i:1451900484;s:48:"platform:服务器管理:8625q:s100d:system_call";i:1451900418;}}s:8:"internal";a:2:{s:5:"cache";b:1;s:3:"toc";b:1;}s:11:"description";a:1:{s:8:"abstract";s:611:"Linux 添加系统调用SCI（system call interface）

一、系统调用的目的
    系统调用是应用程序和操作系统内核之间的功能接口。其主要目的是使得用户可以使用操作系统提供的有关设备管理、输入/输入系统、文件系统和进程控制、通信
 以及存储管理等方面的功能，而不必了解系统程序的内部结构和有关硬件细节，从而起到减轻用户负担和保护系统以及提高资源利用率的作用。
 我们在编程时用到的很多函数，如fork、open等这些函数最终都是在系统调用里实现的。…";}s:8:"relation";a:1:{s:10:"firstimage";s:0:"";}}s:10:"persistent";a:6:{s:4:"date";a:2:{s:7:"created";i:1390478358;s:8:"modified";i:1451900484;}s:4:"user";s:0:"";s:7:"creator";s:0:"";s:11:"contributor";a:1:{s:6:"yi.hao";N;}s:11:"last_change";a:7:{s:4:"date";i:1451900484;s:2:"ip";s:12:"172.21.2.114";s:4:"type";s:1:"C";s:2:"id";s:32:"platform:8625q:s100d:system_call";s:4:"user";s:6:"yi.hao";s:3:"sum";s:97:"Page moved from linux:服务器管理:8625q:s100d:system_call to platform:8625q:s100d:system_call";s:5:"extra";s:0:"";}s:11:"plugin_move";a:1:{s:7:"old_ids";a:3:{s:32:"platform:8625q:s100d:system_call";i:1451899809;s:45:"linux:服务器管理:8625q:s100d:system_call";i:1451900484;s:48:"platform:服务器管理:8625q:s100d:system_call";i:1451900418;}}}}