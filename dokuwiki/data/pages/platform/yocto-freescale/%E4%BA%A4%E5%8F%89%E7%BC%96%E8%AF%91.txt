在yocto平台（for freescale）中实现交叉编译具体步骤如下：

如i.mx 6ul为例

  * 一.生成编译工具链

在平台根目录下输入 MACHINE=imx6ulevk source fsl-setup-release.sh -b build -e fb

进入build目录后输入 bitbake meta-toolchain 生成工具链运行脚本

生成的脚本目录./build/tmp/deploy/sdk/

运行poky-glibc-x86_64-meta-toolchain-cortexa7hf-vfp-neon-toolchain-1.8.sh 会让你选择工具链生成目录默认为 /opt/poky/1.8/

  * 二.设置环境变量

执行 source /opt/poky/1.8/environment-setup-cortexa7hf-vfp-neon-poky-linux-gnueabi

然后输入echo $CC

如果显示  arm-poky-linux-gnueabi-gcc -march=armv7-a -mfloat-abi=hard -mfpu=neon -mtune=cortex-a7 --sysroot=/opt/poky/1.8/sysroots/cortexa7hf-vfp-neon-poky-linux-gnueabi  则表示交叉编译环境设置成功。

  * 三.交叉编译程序源码包

以pppd源码包为例：

1.解压下载的pppd源码包

2.在源码包根目录下运行./configure 生成相关的Makefile

3.修改源码包中的Makefile   需要把有 CC = gcc 之类的注释掉，让CC使用环境变量中的交叉编译工具

4.运行make生成可执行文件，然后把该文件通过添加层的方式copy到image的rootfs中

如果是一些由configure生成Makefile的源码包，如libcurl，在设置完交叉编译工具链后，输入./configure --host=arm-poky-linux-gnueabi 来生成交叉编译的Makefile

注：在交叉编译过程，会碰到有些源码包用系统的gcc能编译，换了交叉编译工具编译就会报错的问题。
如在编译iproute2的源码包时，由于交叉编译工具缺少对汇编asm的头文件支持，导致编译arpd命令的时候会报错，但是由于用不到arpd命令，且此时可执行文件ip已生成，所以可以直接移植ip命令。

  * 四.添加可执行文件/sh脚本到image

新建层meta-com808

复制文件至source目录下meta-com808/recipes-example/example/elmo-com808-0.1/

修改meta-com808/recipes-example/example目录下elmo-com808_0.1.bb文件
<code bash>
SRC_URI = "...\
	file://xxx \     #添加这句才会在编译时把source文件夹下新添加的文件载入
"
...

do_install() {
	     install -d ${D}${bindir} #把SRC_URI 中的文件copy到rootfs的usr/bin目录
             ...
	     install -m 0755 XXX ${D}${bindir}   #添加权限
}

</code>