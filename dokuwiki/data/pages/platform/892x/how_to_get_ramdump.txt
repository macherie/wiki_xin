====== 如何抓取 ramdump ======

8926/8928 抓取 ramdump 的方法和 8625q 平台不一样，不需要用 "Memory Debug App" 工具。

连接USB后它会自动抓取(需要安装驱动和 QPST)。

===== 抓取方法 =====
==== PC USB 抓取 ====


  * 让机器进入 download 模式（出问题carsh进download或者手动让机器carsh），连接USB。当连上USB时就会自动抓取 ramdump。
  * QPST Configuration, select Help > Open Log File Directory 就可以打开保存 ramdump的目录。其中ramdump就在 Sahara\Port_COMX（当前连接的端口）下。
8-)<color red/lightgrey>注意： 连接上USB后要稍等一会，等它抓取完，需要一小会时间,如果没抓完 dump_info.txt 文件是空的。</color>



**ramdump保存的目录：**

{{linux:892x:ramdump.png?1000|ramdump保存目录}}


**可以打开 dump_info.txt 确认一下时间，看是否为刚刚要抓取的。**
<code>
2014/05/23 17:02:18.097
QPST 2.7.0.409
pref       base    length               region            file name
-------------------------------------------------------------------
   1 0xFE800000     24576               OCIMEM           OCIMEM.BIN 
   1 0xFC100000    131072  RPM Code RAM region          CODERAM.BIN 
   1 0xFC190000     65536  RPM Data RAM region          DATARAM.BIN 
   1 0xFC428000     16384   RPM MSG RAM region           MSGRAM.BIN 
   1 0xFE090000     65536     LPASS LPM region              LPM.BIN 
   1 0x0FE1B360         8        Pmic PON stat         PMIC_PON.BIN 
   1 0x0FE1B358         4  Reset Status Region         RST_STAT.BIN 
   1 0x0FE1B35C         4         Pmic RTCstat         PMIC_RTC.BIN 
   1 0x00000000 536870912       DDR CS0 Memory           DDRCS0.BIN 
Memory read failed to return data
2014/05/23 17:02:26.757
Exception MemoryDebug during memory dump
2014/05/23 17:02:26.768
</code>


==== SD卡抓取 ====

在SD卡中创建cookie文件 文件名为“rdcookie.txt”的空文件。

宕机的时候等着，S55/G55上抓ramdump到SD卡上时绿灯会闪烁，绿灯熄灭时就抓好了。

SD卡抓取ramdump 高通网站上有对应的Solution（Solution Number：00022254）[[how_to_get_ramdump#how_to_enable_saving_ramdump_onto_sdcard]]


====== Crash into download mode ======
为了让机器出问题后进入download模式而不是重启需要做以下修改。

kernel config 文件中把 <color red>CONFIG_MSM_DLOAD_MODE=y</color> 这个宏定义加上，这样crash的时候就会进download模式了


MSM_DLOAD_MODE 这个宏在 arch/arm/mach-msm/Kconfig 中定义。

在 kernel/arch/arm/mach-msm/restart.c 文件中使用到。

====== Crash device manually ======
两种 cause a crash 的方法:

<code bash> 
方法1
adb shell echo c > /proc/sysrq-trigger
</code>

<code>
方法2
Input the below command in QXDM command output tool to cause a err_fatal:
send_data 75 37 03 00
</code>


====== ramdump 分析所需文件 ======
AP：

out/target/product/xxx/obj/KERNEL_OBJ目录下的

System.map  vmlinux

保存目录(这个目录里面的obj文件是带debug信息的可用来缝隙Oops)：

out/target/product/xxx/symbols


CP：

rpm_proc/core/bsp/rpm/build/8x26/RPM_AAAAANAAR.elf

trustzone_images/core/bsp/tzbsp/build/FARAANBA/tz.elf

modem_proc/build/ms/M8926DAAAANAZQ00884.elf

debug_image/core/debug/dbi/output/msm8x26/sdi_AAAAANAZA.elf

debug_image/core/bsp/dbi/dbi/build/AAAAANAZ/sdi_AAAAANAZA.elf

rpm 和modem的后缀会根据你编译命令的不同而不同




======分析内核的ramdump======
**执行命令前先配置工程source build/envsetup.sh,然后lunch相应的项目，否则出现如下错误**：

Could not find platform independent libraries <prefix>
Could not find platform dependent libraries <exec_prefix>
Consider setting $PYTHONHOME to <prefix>[:<exec_prefix>]
ImportError: No module named site


python ramparse.py --everything -g <path_to_gdb> -n <path_to_nm> --vmlinux <path_to_vmlinux> --auto-dump <path_to_ramdump> -o <path_to_output> 

例子：
python ramparse.py --everything -g arm-linux-androideabi-gdb -n arm-linux-androideabi-nm --vmlinux /home/tsy/work/case/01575729/vmlinux --auto-dump /home/tsy/work/case/01575729/dump -o /home/tsy/work/case/01575729/dump/output 

python ramparse.py - -everything -g ~/work/c580/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.7/bin/arm-linux-androideabi-gdb -n ~/work/c580/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.7/bin/arm-linux-androideabi-nm  - -vmlinux ~/work/c580/out/target/product/c580/obj/KERNEL_OBJ/vmlinux  - -auto-dump ~/ramdump/  -o ~/ramdump/out/

工具包：{{linux:892x:linux-ramdump-parser-v2-64bit.tar|}}

上面的旧工具包不能分析8939平台64位的ramdump,请用下面的工具：\\ 
8939的工具包：[[http://172.21.1.23/dokuwiki/lib/exe/fetch.php?media=linux:8939:linux-ramdump-parser-v2-64-8939.tar.gz|linux-ramdump-parser-v2-64-8939.tar.gz]] \\ 
分析方法：　[[platform:8939:ramdump分析|8939分析内核的ramdump]]


====== 附加内容 ======
===== How to enable saving RAMDUMP onto SDCARD =====

** Question: How to enable saving RAMDUMP onto SDCARD **


Answer: 

On Qualcomm's later platform, 7x27a, 8x25, 8x60,8960, save ramdump to sdcard is supported and has a fast speed than usb.


1. Define “FEATURE_BOOT_RAMDUMPS_TO_SD_CARD” flag in cust*.h file(created from .builds) if not eanbled by default, this should enable/compile call (boot_ram_dumps_to_sd_card) to ram dump logic.
 

2. SD_PATH (define SD_PATH "/mmc1/") needs to be defined in cust*.h file. This also already exists in our build in .builds/cust*.h.


3. need to place “rdcookie.txt” empty file in FAT partition on removable SD card (at SD_PATH) to enable ram-dump-to-sd card.


on 8x60,8960

When SBL3 enters download mode with above setup, SBL3 will find “rdcookie.txt” at SD_PATH SBL3 will perform ram dump to SD card and enter dload mode after ram dump completion.

in sbl3_pre_dload_procs[]

boot_ram_dumps_to_sd_card()

[some notes]

1). make sure your device can enter download mode.
refer to solution 00022521
CR 352062
note: nv905 and nv4399 should not be set anymore.


2)change sdcc_bsp_slot_config in core\storage\sdcc\src\bsp\surf\8x60\sdcc_bsp_boot.c to 

<code c>
static sdcc_bsp_slot_type sdcc_bsp_slot_config [SDCC_BSP_NUM_SLOTS] = {
SDCC_BSP_EMBEDDED_MEM_SLOT,
SDCC_BSP_NO_SLOT,
SDCC_BSP_OPEN_SLOT,
SDCC_BSP_NO_SLOT
};
</code>
by this change, external sd card in SDCC3 slot can be  mounted on /mmc1/ of romfs in efs_boot_initialize().


on 8x55

osbl_ram_dumps_to_sd_card


on 7x27a, 8x25

oemsbl_ram_dumps_to_sd_card()



[note]:

on 7x30/7x27a, if meet sd card compatibility issue, can define FEATURE_SDCC_DISABLE_DMA in custsdcc.h.

but this will slow the sdcc speed.

