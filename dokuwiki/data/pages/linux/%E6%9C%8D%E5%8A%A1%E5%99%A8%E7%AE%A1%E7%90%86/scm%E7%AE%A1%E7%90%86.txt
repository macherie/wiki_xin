======SCM管理======
=====代码下载权限管理=====
通过对 gitolite-admin 库中文件修改管理代码下载权限

下载 gitolite-admin 库：
<code>
git@192.167.100.232:gitolite-admin.git
</code>

conf/gitolite.conf为管理文件，管理哪些库有哪些权限。

如需新加 ssh key，把 ssh key 的公钥放到 keydir 下并提交。

=====新建版本库=====
===1. 在代码服务器上创建新库===

**Gitolite+Gerrit服务器结构**

在gitolite-admin库中修改conf/gitolite.conf文件，加入新的git库。例：
<code>
repo    platform/vendor/qcom/i501
        R       =   @all
        RW+     =   gerrit2
</code>

**Git+Gerrit服务器结构**
<code>
ssh -p 29418 192.167.100.232 gerrit create-project --name platform/vendor/qcom/i501.git
</code>



===2. 修改manifest文件===
例：
<code>
cd .repo/manifests
vim default.xml
</code>

在manifest文件中加入
<code>
<project name="platform/vendor/qcom/i501" path="device/qcom/i501"/>
</code>

提交修改：
<code>
git add default.xml
git commit -m "Add new project i501"
git push ssh://yourname@192.167.100.232:29418/platform/manifest HEAD:refs/for/QRD8939_KK
</code>

===3. 把manifest的修改合入代码库===
登陆gerrit，review并submit修改

===4. 把代码提交到代码库===
在要提交的代码中
<code>
git init
git add .
git commit -m "init"
git push ssh://yourname@192.167.100.232:29418/platform/vendor/qcom/i501 HEAD:refs/heads/QRD8939_KK
</code>

=====gerrit服务器新建分支====
<color red> 确认服务器同一个git库中没有同名分支</color>

===2. 在本地新建分支并提交到服务器分支===
<code>
新建本地分支
repo start aaa --all
新建分支别名
repo forall -c 'git remote add sim-ssh ssh://yourname@192.167.100.232:29418/$REPO_PROJECT.git $@'
提交本地分支到服务器分支，服务器会新建不存在的分支
repo forall -c 'git push sim-ssh -f aaa:bbb'
aaa:本地分支，bbb:gerrit新建分支
</code>

=====gerrit服务器新建project====
<color red> 确认服务器没有同名project</color>

===1.gitolite-admin中新建项目库并提交===
<code>
 在gitolite-admin库中修改conf/gitolite.conf文件，加入新的git库。例：
 repo   aaa/bbb
        R       =   @all
        RW+     =   gerrit2
</code>
<color red>提交后会在服务器上git用户目录repositories下新建一个aaa/bbb.git库</color>

===2.gerrit2上创建软链接到bbb.git库===
<code>
1.切换到gerrit2账户到review_site/git/目录
2.创建链接到bbb.git
ln -s /home/git/repositories/aaa/bbb.git
</code>

===3.重启gerrit服务器===
<code>
cd /etc/init.d
./gerrit.sh restart
</code>

=====创建远程库别名=====
<code>
repo forall -c 'git remote add sim-ssh ssh://yourname@192.167.100.232:29418/$REPO_PROJECT.git $@'
</code>
**只需修改<color red>yourname</color>为自己的名字**
=====生成及应用patch=====
===git format-patch ===
用 git format-patch 生成 patch

某次提交以后的所有patch:
<code>
git format-patch 4e16                --4e16指的是commit名
</code>

某两次提交之间的所有patch:
<code>
git format-patch 365a..4e16      --365a和4e16分别对应两次提交的名称
</code>

===git am ===
用 git am 应用 patch。

在使用 git am 之前， 你要首先 git am –abort 一次，来放弃掉以前的am信息，这样才可以进行一次全新的am。
不然会遇到这样的错误。

.git/rebase-apply still exists but mbox given.

git-am 可以一次合并一个文件，或者一个目录下所有的patch
例：
<code>
git-am ~/patch/0001-trival-patch.patch
</code>
<code>
git am ~/patch-set/*.patch
</code>

如果 git am 失败，可能是这样的：
<code>
$ git am PATCH
Applying: PACTH DESCRIPTION
error: patch failed: file.c:137
error: file.c: patch does not apply
error: patch failed: Makefile:24
error: libavfilter/Makefile: patch does not apply
Patch failed at 0001 PATCH DESCRIPTION
When you have resolved this problem run "git am --resolved".
If you would prefer to skip this patch, instead run "git am --skip".
To restore the original branch and stop patching run "git am --abort".
</code>

可以使用 git apply 命令打冲突的patch
<code>
$ git apply PATCH --reject
$ （注：根据.rej文件手动解决所有冲突）
$ git add FIXED_FILES
$ git am --resolved
</code>

或者尝试另一种方法，三方合并（强制合并有冲突的patch文件，类似git stash apply）
<code>
$ git am -3 *.patch
$ git status
$ git diff （查看红色文件的冲突部分）
$ （修改里面的冲突符号包含的部分即可）
$ git add FIXED_FILES
$ git am --continue
</code>

=====高通代码下载=====
高通相关网址：
Createpoint: https://createpoint.qti.qualcomm.com（可下载文档，Release Note等）

Chipcode: https://chipcode.qti.qualcomm.com（下载私有代码）

开源代码: https://www.codeaurora.org/xwiki/bin/QAEP/release（下载开源代码）

Case和文档: https://support.cdmatech.com（Case，文档，工具等）

===下载私有代码===
Chipcode上下载私有代码，根据Release Note或Non-HLOS下的contents.xml下载对应的开源代码

1. 下载私有代码需要升级 git 到 1.8.1.2 以上，并用 openSSL 代替 gnuTLS

[[git:upgrading_git_on_linux | Linux 下升级 git]]

2. 在 Chipcode 上找到要下载代码的链接，用 git clone 下载代码

3. 根据 Release Note 或 Non-HLOS 中的 contents.xml 文件里 apps 的 build id 下载开源代码

===下载开源代码===
**1.没有下载过高通开源代码。由于代码数据大(几十G)，根据网络情况需要几天**

1. 根据私有代码content.xml查看apps项对应的build-id，如：LA.BR64.1.1-04610-8x16.0

2. repo 指定需要下载的manifest.xml

<del>
   repo init -u git://codeaurora.org/platform/manifest.git -b release -m LA.BR64.1.1-04610-8x16.0.xml --repo-url=git://codeaurora.org/tools/repo.git --repo-branch=caf-stable
</del>
<code>
   repo init -u git://codeaurora.org/platform/manifest.git -b release -m LA.BR64.1.1-04610-8x16.0.xml 
   repo sync
</code>

**2.在已有的高通源码的基础上同步。会节省很多时间**

1. 更新manifest。在 .repo/manifest/目录 git pull

<color red>2.没有下载过高通开源代码步骤</color> 

===新建项目代码===

**开源代码可直接上传到代码库，根据新项目的分支名（例：QRD8936_KK）**

创建远程库别名：
<code>
repo forall -c 'git remote add sim-ssh ssh://yourname@192.167.100.232:29418/$REPO_PROJECT.git $@'
</code>
**只需修改<color red>yourname</color>为自己的名字**

上传所有开源代码：
<code>
repo forall -c git push sim-ssh HEAD:refs/heads/QRD8936_KK
</code>
HEAD:refs/heads/QRD8936_KK 会直接提交到代码库，不需要review

**ChipCode上下载的代码包括Non-HLOS及vendor/qcom/proprietary，需要将代码分离出两个库。**

即将 LINUX/android/vendor/qcom/proprietary 下的所有代码提交到 vendor/qcom/proprietary 库里，除去 LINUX 文件夹其他代码提交到 Non-HLOS 库里。

Non-HLOS 库提交：
<code>
git push ssh://yourname@192.167.100.232:29418/Non-HLOS HEAD:refs/heads/QRD8939_KK
</code>
**需修改<color red>yourname</color>为自己的名字，修改<color red>QRD8939_KK</color>为要提交的分支名**

vendor/qcom/proprietary 库提交：
<code>
git push ssh://yourname@192.167.100.232:29418/platform/vendor/qcom/proprietary_4.4.4 HEAD:refs/heads/QRD8939_KK
</code>
**需修改<color red>yourname</color>为自己的名字，修改<color red>QRD8939_KK</color>为要提交的分支名，QRD8939_KK在<color red>platform/vendor/qcom/proprietary_4.4.4</color>下，其他项目在<color red>platform/vendor/qcom/proprietary</color>下**

**创建新项目的manifest文件**

1. 新建目录 manifests

2. 可以根据开源代码 .repo/manifests 下的default_<color red>apps_build_id</color>.xml 创建 default.xml 文件，将 <remote> 及 <default> 修改为我们代码服务器的 ip 及对应的项目分支。例：
<code>
<remote fetch="git@192.167.100.232:/" name="sim" review="http://192.167.100.232:8080"/>
<default remote="sim" revision="QRD8939_KK"/>
</code>

并在default.xml加入 Non-HLOS 及 vendor/qcom/proprietary 库
<code>
<project name="platform/vendor/qcom/proprietary_4.4.4" path="vendor/qcom/proprietary"/>
<project name="Non-HLOS" path="Non-HLOS"/>
</code>

3. 提交 manifest 文件
<code>
git init
git add default.xml
git commit -m "Add default manifest"
git push ssh://yourname@192.167.100.232:29418/platform/manifest HEAD:refs/heads/QRD8939_KK
</code>
**需修改<color red>yourname</color>为自己的名字，修改<color red>QRD8939_KK</color>为要提交的分支名**

**<color red>为了方便升级，可保留一份完整的高通原始代码在代码库，例：QAULCOMM_8939，高通代码更新时更新此代码库 开源代码 及 私有代码。可借助此高通原始代码用 git merge 升级 开源代码; 用此原始代码 生成 Non-HLOS 库 及 vendor/qcom/proprietary 库的 patch。每次提交高通原始代码到代码库是，也把.repo/manifests下的对应高通版本的manifest文件提交到我们自己代码库中，例：LNX.LA.3.7.3.1-02710-8939.0.xml</color>**
=====高通代码升级=====

ChipCode 里 Profile settings -> Notifications 可以配置接收高通代码的通知，可以设置 Global setting 为 Watch，或只设置 Favorites 关注的代码为 Watch。设置此通知后，高通有代码更新会发邮件通知。

升级代码前先更新我们代码库里的高通原始代码，例：<color red>QAULCOMM_8939</color>

**开源代码：**
<code>
repo forall -c git push sim-ssh HEAD:refs/heads/QAULCOMM_8939
</code>

将 .repo/manifests 下对应版本的manifest文件（例：LNX.LA.3.7.3.1-02710-8939.0.xml）提交到 QAULCOMM_8939 中的.repo/manifests 下。

**私有代码：**

1. 将私有代码中 LINUX/android/vendor/qcom/proprietary 下的所有代码提交到 vendor/qcom/proprietary 库里：
<code>
cd QAULCOMM_8939/vendor/qcom/proprietary
rm -fr *
cp -R 私有代码/LINUX/android/vendor/qcom/proprietary/* .
git add .
git commit -m "Commit label build_id"
git push sim-ssh HEAD:QAULCOMM_8939
</code>

2. 将私有代码中除 LINUX 目录的所有其他内容替换到 QAULCOMM_8939 下的 Non-HLOS 并提交。同步骤1。

===开源代码升级===
**比较开源代码有哪些库有修改**

可以通过两个版本的manifest文件比较。到 .repo manifests 目录下，用 bcompare <color red>apps_build_id_old</color>.xml <color red>apps_build_id_new</color>.xml，查看哪些库的 revision 不一样，不一样的库代码有更新。

**用 patch 的方式更新代码**

用 git format-patch 生成更新库的 patch，例：git format-patch <color red>apps_build_id_old</color>..<color red>apps_build_id_new</color>

用 git am 打更新库的patch。

**如果要更新的库我们没有修改过代码，可直接push到代码库**
<code>
git push sim-ssh HEAD:QRD8939_KK
</code>

**如果要更新的库高通修改很多，打 patch 冲突很多，可用 git merge 合并代码**
将高通代码分支<color red>QAULCOMM_8939</color> merge 到本地代码：
在我们自己代码环境下
<code>
repo sync .
repo start merge_qaulcomm_code .
git merge sim/QAULCOMM_8939
</code>
如遇到冲突，解好冲突后 git commit。

===私有代码升级===
私有代码可通过 patch 的方式升级。

Non-HLOS 库可根据 高通原始代码 <color red>QAULCOMM_8939</color> 生成两个版本间的 patch，用此 patch 打到 Non-HLOS 库下，解决冲突后提交代码。

vendor/qcom/proprietary 库代码也根据 高通原始代码 <color red>QAULCOMM_8939</color> 生成两个版本间的 patch，用此 patch 打到 vendor/qcom/proprietary 库下，解决冲突后提交代码。
===== D508 客户共享代码更新 =====
1. 编译 D508 开发版本 eng 版

2. 用 copy-prebuilt.sh 脚本生成 prebuilt_simcom
<code>
cd build/scm_tools
./copy-prebuilt.sh
</code>

3. 将生成的 prebuilt_simcom 覆盖到 D508 客户版本的 vendor/qcom/proprietary 下，并提交修改。

用比较工具比较 D508 开发版本 和 D508 客户版本 中 vendor/qcom/proprietary  下的 llvm-rs， prebuilt_HY11， qrdplus/globalization，qrdplus/Extension/res-overlay 几个文件夹中内容是否一样，如不一样请用 D508 开发版本 下的内容替换到 D508 客户版本 中。（此步只需在升级高通代码后做，不用每次发版本都做。）

4. 用 D508 客户版本 编译并发布 user 版本

5. 在 D508 客户版本 下生成 patch
<code>
cd build/scm_tools
./make-all-patch.sh
</code>
先输入上一次patch的tag，再输入此次patch的tag。

生成 patch 后，用 git tag 标记此次成的 patch 的位置
<code>
forall -c git tag -a D508-patch-日期 -m "D508-patch-日期"
forall -c git push sim-ssh D508-patch-日期
</code>

===== S100D（指端） 客户共享代码更新 =====
1. 编译 S100D 开发版本 指端 eng 版

2. 用 copy-prebuilt.sh 脚本生成 prebuilt_simcom
<code>
cd build/scm_tools
./copy-prebuilt.sh
</code>

3. 将生成的 prebuilt_simcom 覆盖到 S100D 客户版本的 vendor/qcom/proprietary 下，并提交修改。

4. 用 S100D 客户版本 编译并发布 user 版本

5. 在 S100D 客户版本 下生成 patch
<code>
cd build/scm_tools
./make-all-patch.sh
</code>
先输入上一次patch的tag，再输入此次patch的tag。

生成 patch 后，用 git tag 标记此次成的 patch 的位置
<code>
forall -c git tag -a S100D-patch-日期 -m "S100D-patch-日期"
forall -c git push sim-ssh S100D-patch-日期
</code>

===== S300P（新大陆） 客户共享代码更新 =====
1. 编译 S300P 开发版本 新大陆 eng 版

2. 用 copy-prebuilt.sh 脚本生成 prebuilt_simcom
<code>
cd build/scm_tools
./copy-prebuilt.sh
</code>

3. 将生成的 prebuilt_simcom 覆盖到 S300P 客户版本的 vendor/qcom/proprietary 下，并提交修改。

4. 用 S300P 客户版本 编译并发布 user 版本

5. 在 S300P 客户版本 下生成 patch
<code>
cd build/scm_tools
./make-all-patch.sh
</code>
先输入上一次patch的tag，再输入此次patch的tag。

生成 patch 后，用 git tag 标记此次成的 patch 的位置
<code>
forall -c git tag -a S300P-patch-日期 -m "S300P-patch-日期"
forall -c git push sim-ssh S300P-patch-日期
</code>

=====Mysql 数据库备份及恢复=====
备份：mysqldump -u gerrit2 -p reviewdb > reviewdb.sql
恢复：mysql -u gerrit2 -p reviewdb < reviewdb.sql


=====客户镜像制作方法(以D801代码为例)=====

1.首先下载裸镜像git库，下载位置为：\\192.167.100.225\share\个人共享\y.liu@sim.com\kk1.tar.gz 或 在下载高通代码时加--mirror选项，下载裸镜像库。

2.解压该压缩包，可见下有platform,device,kernel,tools四个文件夹，其中tools中只包含repo.git库，其他三个目录中分别存放的是Android所用的所有git库，以.git结尾。

3.进入D801代码的目录，repo status查看当前所有库的状态，根据提示进行处理，无提示表示所有库正常，或repo prune 删掉所有以和master分支合并过的分支，根据提示进行处理，无提示表示所有分支已删除。

4.repo start --all master 为D801代码中的所有库，新建名为master的分支。

5.repo forall -c 'git remote add sim-ssh /home/liuyang/kk1/$REPO_PROJECT.git $@' 为D801代码的所有库建立对应到/home/liuyang/kk1/下所有裸版本库的远程别名sim-ssh。

6.repo forall -c git push sim-ssh master:master 2>&1 | tee log 把D801代码中所有库上的master分支推送到sim-ssh即/home/liuyang/kk1/$REPO_PROJECT.git $@上去，查看log，确认那些库传输失败，然后单独传输，即如果提示没有a.git库，则从服务器上git clone下a库文件，然后删除分支，新建名为master分支，然后git remote add sim-ssh /home/liuyang/kk1/a.git即可。

7.关于manifest.git库的推送：
(1).新建一个manifest目录。
(2).把D801目录下.repo目录下的D801.xml放到该目录下，并改名为default.xml
(3).git init 初始化该目录。
(4).git add ; commit default.xml文件
(5).git checkout -b D801 新建D801分支。
(6).git push sim-ssh D801:D801 把D801分支推送到sim-ssh的manifest.git库上。

8.上述已新建完成一个完整的项目裸版本镜像。

9.关于如果下载该裸版本库。
(1).新建一个名为D801-repo-sync的目录，用于存放代码。
(2).在该目录下执行 
repo init -u <mirror_path>/platform/manifest.git -b D801 --repo-url=<mirror_path>/tools/repo.git 命令。
(3).vim .repo/manifest.xml 修改下载完成的manifest.xml
<remote fetch="<mirror_path>" name="sim" review="http://192.167.100.232:8080"/>
<default remote="sim" revision="master"/>
(4)然后执行repo sync即可。


