--- //[[shu.yin@sim.com|尹姝]] 2014/2/21//
====== JTAG动态调试 ======
^Document Title:     |JTAG动态调试  |
^Version:            |1.01        |
^Date:               |2013-04-10  |       
^Status:             |Release     |
^Document Control ID:|SIM0002     |
^Writer:             |Xifangqing  |


----


=====调试前准备:=====

编译一个Debug版本的image然后用QPST烧录到机器

Note：编译Debug版本需要注意以下事项：

**<color teal>1. </color>**USES_NO_DEBUG需要从py文件中去掉

**<color teal>2. </color>**DEBUG_ON设置为yes

**<color teal>3. </color>**生产的elf文件会比平时大很多



=====调试Boot（DBL, OSBL）：=====

以OSBL调试为例，下面是实际操作中的说明和截图

**<color teal>1. </color>**打开trace32窗口，运行脚本AMSS\products\7x30\build\ms\boot_debug.cmm

{{doc:jtag1.png}}

**<color teal>2. </color>**当前路径就是\build\ms\，pwd回车，选择2 for Android，Apps boot base默认写0.

{{doc:jtag2.png}}

回车弹出如下框图，选取elf文件

{{doc:jtag3.png}}

{{doc:jtag4.png}}

**<color teal>3. </color>**选择Debug OSBL

{{doc:jtag5.png}}

弹出如下框图，选取即可；

{{doc:jtag6.png}}

{{doc:jtag7.png}}

**<color teal>4. </color>**完成上述，程序会停在0xFFFF0440，等待用户操作。点击{{doc:jtag21.png}}查看当前系统设置的断点，在 osbl_main_ctl（）函数入口有一个断点，按F7执行到该断点处。

{{doc:jtag8.png}}

{{doc:jtag9.png}}

**<color teal>5. </color>**下面以检测设备按键状态为例。

osbl_check_key_to_download_mode（）该函数在osbl_hw_init（）中被调用，

可以在命令框中输入list osbl_hw_init ，列出函数原型；

{{doc:jtag10.png}}

**<color teal>6. </color>**在函数入口设置断点，可以直接右击选择“breakpoint”，断点类型可以选择“auto”，也可以在命名框中输入“B.S 地址”，如下图； 按F7执行到断点处。

{{doc:jtag11.png}}

{{doc:jtag12.png}}

F2 “step” 以语句为单位执行；

F3 “step over call”是一个函数为单位执行；

v.r  查看当前变量的值，如下仅按下camera键，则cam_key=0x1；

也可以把右击选取需要查看的变量，Add to watch window中查看。

{{doc:jtag13.png}}

V.F 可以查看当前call stack，如图；

{{doc:jtag14.png}}

=====调试AMSS：=====

**<color teal>1. </color>**执行脚本 AMSS\products\7x30\build\ms\jload.cmm

选取该elf文件；

{{doc:jtag15.png}}

{{doc:jtag16.png}}

{{doc:jtag17.png}}

**<color teal>2. </color>**以查询PM8058 ADC通道参数为例，vbatt_update_adc_battery_params（）每25秒会被调用。

**list vbatt_update_adc_battery_params**

设置断点，先不使能（Enable前不打勾）该断点，让系统正常启动。然后Enable该断点，F7再运行，可以看到，每隔一会就会在该处停住。

程序在此运行停止，命名框中输入V.R 就可以查看ADC通道的参数了。

{{doc:jtag18.png}}

{{doc:jtag19.png}}

**<color teal>3. </color>**Modem休眠问题可以通过JTAG很方便的调试，

sleep_negate_okts（），只要有某个任务投反对票，则不允许modem休眠，打开TCXO；

sleep_assert_okts（)，允许modem休眠，关闭TCXO。

{{doc:jtag20.png}}

=====参考文档：=====

SP80-VU655-5_A_Software_Debug_Manual_MSM7x27A_MSM7x25A_LA.pdf (Page 24).
