 --- //[[shu.yin@sim.com|尹姝]] 2013/12/11//
====== Git 基本操作 ======

[[http://mt.sohu.com/20160927/n469237607.shtml]]

{{:git:git使用及技巧.ppt|}}

===== git rm =====
** 删除文件 **

要从Git版本库中删除某个文件，就必须要先从暂存区删除，然后提交。可以用 git rm 命令完成此工作，并连带从工作区中删除指定的文件。
<code bash>
$ git rm welcom.txt
</code>

** 强制删除 **

如果删除之前修改过并且已经加到暂存区的话，则必须要用强制删除选项-f。
<code bash>
$ git rm -f welcom.txt
</code>

** 删除Git版本库中文件，保留当前工作区文件 **

如果只想把文件从Git版本库中删除，但想保留在当前工作区，可以用--cached选项。
<code bash>
$ git rm --cached welcom.txt
</code>

** 删除文件夹里所有文件 **
<code bash>
$ git rm -r dir/
</code>

** 快速标记删除 **

将本地有改动(包括修改和删除)的文件标记到暂存区
<code bash>
$ git add -u .
</code>

===== git mv =====
** 移动文件 ** 
<code bash>
$ git mv file_from file_to
</code>
git mv 命令相当于运行了下面三条命令：
<code bash>
$ mv file_from file_to
$ git rm file_from
$ git add file_to
</code>

===== git diff =====
[[git:diff|git diff]]

===== git status =====
Git status 命令用来确定哪些文件当前处于什么状态。

** Nothing to commit：** 工作目录是干净的，即当前没有任何被加到暂存区，也没有任何文件在上次提交后更改过。

** Changes not staged for commit：** 版本库中的文件在工作区中被修改了，还没有加到暂存区中（即还没有git add），也没有提交到版本库中。

** Changes to be committed：** 版本库中的文件在工作区中被修改了，并已加到暂存区中（即也git add），但还没有提交到版本库中。

** Untracked files：** 新加文件，版本库中并没有此文件。

** Git status -s **

第一列为暂存区状态

第二列为工作区状态
<code bash>
$ git status -s
</code>
<color green>M</color><color red>M</color> aaa

位于第一列的字符 <color green>M</color> 的含义是：版本库中的文件与处于中间状态——提交任务(提交暂存区，stage)中的文件相比有改动。

位于第二列的字符 <color red>M</color> 的含义是：工作区当前的文件与处于中间状态——提交任务(提交暂存区，stage)中的文件相比有改动。

===== git log =====
** 查看历史提交。**

默认不用任何参数的话，git log 会按提交时间列出所有的更新，最近的更新排在最上面。每次更新都有一个 SHA1 哈希值、作者的名字和电子邮件地址、提交时间及提交说明。

参数：
<code>
-p       选项展开显示每次提交的内容差异。
-<n>     则仅显示最近的 <n> 次提交。
--stat   仅显示简要的增改行数统计。
--pretty 可以指定使用完全不同于默认格式的方式展示历史提交。比如用 oneline 将每到个提交放在一行显示。另外还有 shor, full 和 fuller 可以用，展示的信息或多或少有些不同，请自己动手实践一下看看效果如何。
</code>

** 例：查看某段时刻的log **
<code bash>
git log --until=2013-11-23  #表示查看2013年11月23日以前的log
git log --since="2 days ago" --until="10 hour ago" #就表示你希望查找两天前到十小时前的log
git log --until=1.minute.ago # 一分钟之前的所有 log
git log --since=1.day.ago #一天之内的log
git log --since=1.hour.ago #一个小时之内的 log
git log --since=1.month.ago --until=2.weeks.ago #一个月之前到半个月之前的log
git log --since=2013.08.01 --until=2013-09-07 #某个时间段的 log
</code>

=====多分支操作 =====
当一套代码含有多个分支，且需要在不同的分支上进行来回的切换和开发，如果分别下载不同分支的代码到本地会占用大量内存，导致本机容量不够，故提供以下方法仅供参考。

eg：因CB09代码 客户需求不同，特此创建了不同的开发分支（主分支msm8996，客户分支MSM8996_C01，MSM8996_C02等）

下载完主分支msm8996代码后，进入到需要修改 的文件目录下（包含.git库即可）,eg abi/cpp
<code bash>

$ cd abi/cpp
$ git status . \\ 查看本地代码是否有修改但尚未提交
$ git stash   \\ 如果本地代码已经有修改但尚未提交，为防止切换分支时覆盖本地代码，可先暂存本地代码
$ git branch -rv   \\ 查看远程所有分支及相关信息
$ git checkout -b MSM8996_C01 sim/MSM8996_C01  \\ 如需要在客户分支MSM8996_C01进行相关开发测试，则基于远程分支sim/MSM8996_C01 创建本地跟踪分支MSM8996_C01
$ xxxxxx  \\ 根据开发需求 进行相关修改，合并和提交
$ repo upload .  \\ 推送代码至评审服务器,此时推送到服务器上对应的分支是 MSM8996_C01,不在是默认的分支msm8996
$ git checkout master-branch  \\ 修改完成代码后再切换回主分支即可
$ git stash pop  \\ 将本地主分支上修改但未保存的代码 重新释放出来，进行后续的开发
</code>

{{:git:2016-12-20_17_09_08屏幕截图.png|}}

{{:git:2016-12-20_17_05_59屏幕截图.png|}}

{{:git:2016-12-20_17_07_08屏幕截图.png|}}

注释：如果修改的文件牵扯的文件目录很多 （位于不同的.git 库下），可以在以上git命令前 添加 repo forall -c 通过迭代器对代码整体进行切换



=====Git使用中“..”和“...”之间的区别=====

--- //[[yuhua.wang@sim.com|yuhua.wang]] 2016/12/21 14:50//

在使用git中，我们经常需要对比几次提交或连续提交之间的区别，而"..."（三个点）和“..”（两个点）成为不二之选，那么他们之间有什么异同呢？下面简单介绍如下：

相同点：两者均可以表示一段Git提交记录，即 CommitA..CommitB or CommitA...CommitB 均表示从提交 CommitA到 ComiitB之间的所有提交。

不同点：因两者在不同的Git命令中其含义存在一定区别，故根据Git具体指令介绍如下： 

    * <color red>  如果是在git log 查看历史记录中</color>

注释：可通过在终端 执行 man git-rev-list 查看其详细的区别。

如下图的提交历史：
        D---E-------F                      特性分支2
       /      
      B---C---G---H---I---J            特性分支1
     /                     
    A-------K---------------L--M     主分支 
   
git log F..J 将显示C, G, H, I, J

git log J..F 将显示D, E, F

git log F..M 将显示K, L, M

git log M..F 将显示B, D, E, F

git log F...J 将显示D, E, F, C, G, H, I, J

git log F...M 将显示B, D, E, F, K, L, M

综上我们可以知道：

<code bash>

1）“R1..R2” 与 “^R1 R2”表示的范围一样，均可以表示达到 R2但不可以达到R1的所有提交（即包含R2 但是不包含 R1）

2） “R1...R2” 叫做 ”Symmetric difference“，它与 "R1 R2 --not $(git merge-base --all R1 R2)"表示的范围一样，都是表示可以到R1或者R1，但是不能同时达到两者的提交（即包含R1和R2，但是不包含两者共同的祖先） 

3） “R1...R2” 和 “R2...R1” 表示的范围一样。

</code>

  * <color red>  如果是在git diff 对比文件差异中</color>
 注释：可通过在终端 执行 man git-diff 查看该命令具体使用方法。

案例如下：我们首先通过 git log 查看一下当前git库都有那些提交，在分别执行 git diff SHA1 SHA2，git diff SHA1..SHA2，git diff SHA1...SHA2 查看之间的区别。

{{:git:2016-12-21_14_20_06屏幕截图.png|}}

{{:git:2016-12-21_14_17_57屏幕截图.png|}}

{{:git:2016-12-21_14_18_30屏幕截图.png|}}

{{:git:2016-12-21_14_18_49屏幕截图.png|}}

其次，我们也可以通过查看官方资料给出的解释：

git diff [--options] <commit> <commit> [--] [<path>...] 
        This is to view the changes between two arbitrary <commit>.    （对比两者提交之间的任意差异）

git diff [--options] <commit>..<commit> [--] [<path>...]
         This is synonymous to the previous form. If <commit> on one side is omitted, it will have the same effect as using HEAD instead. （对比两者提交之间的任意差异，即使在其中一个提交中被忽略，但其提交记录依旧会被应用在HEAD中。）

git diff [--options] <commit>...<commit> [--] [<path>...]
         This form is to view the changes on the branch containing and up to the second <commit>, starting at a common ancestor of both  <commit>. "git diff A...B" is equivalent to "git diff $(git-merge-base A B) B". You can omit any one of <commit>, which has the same effect as using HEAD instead   （输出自A和B分别开发以来，B分支上的更改。）
         
 $ git diff topic master    (1)                \\  1. Changes between the tips of the topic and the master branches.

 $ git diff topic..master   (2)                 \\ 2. Same as above.

 $ git diff topic...master  (3)                 \\ 3. Changes that occurred on the master branch since when the topic branch was started off it.      
   

综上我们可以知道：

<code bash>

1）“R1..R2” 表示R1到R2之间的区别，功能通 ”R1 R2“不添加 ..    

2） “R1...R2” 与git diff $(git merge-base R1 R2)R2 相同，表示从R1和R2公共祖先到R2的区别。

</code>

===== Git 忽略文件 =====
[[git:gitignore|Git 忽略文件]]
