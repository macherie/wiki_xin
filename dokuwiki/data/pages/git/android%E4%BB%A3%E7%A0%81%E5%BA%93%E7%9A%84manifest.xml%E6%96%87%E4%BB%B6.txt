====== Android代码库manifest.xml文件介绍 ======
Android源码库数据量庞大，因此Google为了方便管理代码库以及后期的开发，特此引入了repo来封装git，大大的简化了代码库的下载、更新和推送。而庞大的代码库则被封装在.repo/manifest.xml文件中，在下载或推送代码时，git会根据xml文件对应的库和路径进行代码的自动索引。现就xml文件简单介绍如下：
<code>
<?xml version="1.0" encoding="UTF-8"?>
<manifest>
  <remote fetch="git@172.16.6.72:/" name="sim" review="http://172.16.6.72:8080"/>
  <default remote="sim" revision="QRD8926_KK"/>
  <project name="device/common"/>
  <project groups="pdk" name="device/generic/armv7-a-neon"/>
  <project groups="pdk" name="device/generic/common"/>
  <project name="device/qcom/common">
    <copyfile dest="build.sh" src="build.sh"/>
    <copyfile dest="vendor/qcom/build/tasks/generate_extra_images.mk" src="generate_extra_images.mk"/>
  </project>
  <project groups="pdk" name="platform/external/chromium-trace" path="external/chromium-trace"/>
</manifest>
</code>

====== manifest元素 ======

最顶层的xml元素，<manifest>与</manifest>对应，成对出现。

====== remote元素 ======
功能：设置远程git服务器的属性

属性：
  * name：远程git服务器的名字，直接用于git fetch，git remote等操作。
  * alias：远程git服务器的别名，如果设置了，则会覆盖name的设定，在一个manifest文件中，name不能重名，但alias可以重名。
  * fetch：所有projects的git url前缀。
  * review：指定gerrit服务器名，用于repo upload操作，若没指定，repo upload无效果。
例如：
<code>
<remote fetch="ssh://git.example.com"   name="test"   review="gerrit.example.com"/>
</code>

====== default元素 ======
功能：设定所有project的默认属性值，如果在project元素中没有指定一个属性，则使用default元素的属性值。
属性：
  * remote：之前定义的某一的remote元素中name属性值，用于指定使用哪一个远程git服务器。
  * revesion：git分支名字，例如master或者 refs/heads/master
  * sync_j：在repo sync中默认并行的数目
  * sync_c：设置为true，则只同步指定的分支（revision属性指定），而不是所有ref内容。
  * sync_s：设置为true，则会同步git的子项目。

====== manifest-server元素 ======
只能有一个该元素，他的url属性用于指定manifest服务的url，通常是一个xml rpc服务。

====== project元素 ======
功能：指定一个需要clone的git仓库在服务器上对应的路径和clone到本地后所属的路径。

属性：
    * name: 唯一的名字标识project，同时也用于生成git仓库的URL。格式如下：
<code>
 ${remote_fetch}/${project_name}.git
</code>

    * path: 可选的路径。指定git clone出来的代码存放在本地的子目录。如果没有指定，则以name作为子目录名。
    * remote: 指定之前在某个remote元素中的name。
    * revision: 指定需要获取的git提交点（master, refs/heads/master, tag或者SHA-1值）。
    * groups: 列出project所属的组，以空格或者逗号分隔多个组名。所有的project都自动属于"all"组。每一个project自动属于name:'name' 和path:'path'组。
例如
<code>
<project name="monkeys" path="barrel-of"/>，它自动属于default, name:monkeys, 和path:barrel-of组。如果一个project属于notdefault组，则repo sync时不会下载。
</code>
    * sync_c: 如果设置为true，则只同步指定的分支(revision 属性指定)，而不是所有的ref内容。
    * sync_s: 如果设置为true，则会同步git的子项目。
    * upstream: 在哪个git分支可以找到一个SHA1。用于同步revision锁定的manifest(-c 模式)。该模式可以避免同步整个ref空间。
    * annotation: 可以有多个annotation，格式为name-value pair。在repo forall 命令中这些值会导入到环境变量中。
    * remove-project: 从内部的manifest表中删除指定的project。经常用于本地的manifest文件，用户可以替换一个project的定义。

====== include元素 ======
通过name属性可以引入另外一个manifest文件(路径相对于manifest repository's root）。